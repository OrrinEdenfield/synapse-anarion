{
	"name": "tpc-ds-queries-1tb-medium",
	"properties": {
		"folder": {
			"name": "TPC-DS-02-Run-Queries"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "tpcdsMedium",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "56g",
			"driverCores": 8,
			"executorMemory": "56g",
			"executorCores": 8,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "d10a1a51-3ace-4897-a7d7-155676e78208"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_sparksql",
				"display_name": "sql"
			},
			"language_info": {
				"name": "sql"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/e1bee07b-a025-41e2-ae0f-2291101bce96/resourceGroups/MiddleEarth/providers/Microsoft.Synapse/workspaces/anarion/bigDataPools/tpcdsMedium",
				"name": "tpcdsMedium",
				"type": "Spark",
				"endpoint": "https://anarion.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/tpcdsMedium",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.2",
				"nodeCount": 3,
				"cores": 8,
				"memory": 56,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"collapsed": false
				},
				"source": [
					"use tpcds1tb;"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"--query1\r\n",
					"with customer_total_return as\r\n",
					"(select sr_customer_sk as ctr_customer_sk\r\n",
					",sr_store_sk as ctr_store_sk\r\n",
					",sum(SR_RETURN_AMT) as ctr_total_return\r\n",
					"from store_returns\r\n",
					",date_dim\r\n",
					"where sr_returned_date_sk = d_date_sk\r\n",
					"and d_year =2000\r\n",
					"group by sr_customer_sk\r\n",
					",sr_store_sk)\r\n",
					" select  c_customer_id\r\n",
					"from customer_total_return ctr1\r\n",
					",store\r\n",
					",customer\r\n",
					"where ctr1.ctr_total_return > (select avg(ctr_total_return)*1.2\r\n",
					"from customer_total_return ctr2\r\n",
					"where ctr1.ctr_store_sk = ctr2.ctr_store_sk)\r\n",
					"and s_store_sk = ctr1.ctr_store_sk\r\n",
					"and s_state = 'TN'\r\n",
					"and ctr1.ctr_customer_sk = c_customer_sk\r\n",
					"order by c_customer_id\r\n",
					" limit 100;"
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"--query2\r\n",
					" with wscs as\r\n",
					" (select sold_date_sk\r\n",
					"        ,sales_price\r\n",
					"  from  (select ws_sold_date_sk sold_date_sk\r\n",
					"              ,ws_ext_sales_price sales_price\r\n",
					"        from web_sales \r\n",
					"        union all\r\n",
					"        select cs_sold_date_sk sold_date_sk\r\n",
					"              ,cs_ext_sales_price sales_price\r\n",
					"        from catalog_sales) x ),\r\n",
					" wswscs as \r\n",
					" (select d_week_seq,\r\n",
					"        sum(case when (d_day_name='Sunday') then sales_price else null end) sun_sales,\r\n",
					"        sum(case when (d_day_name='Monday') then sales_price else null end) mon_sales,\r\n",
					"        sum(case when (d_day_name='Tuesday') then sales_price else  null end) tue_sales,\r\n",
					"        sum(case when (d_day_name='Wednesday') then sales_price else null end) wed_sales,\r\n",
					"        sum(case when (d_day_name='Thursday') then sales_price else null end) thu_sales,\r\n",
					"        sum(case when (d_day_name='Friday') then sales_price else null end) fri_sales,\r\n",
					"        sum(case when (d_day_name='Saturday') then sales_price else null end) sat_sales\r\n",
					" from wscs\r\n",
					"     ,date_dim\r\n",
					" where d_date_sk = sold_date_sk\r\n",
					" group by d_week_seq)\r\n",
					" select d_week_seq1\r\n",
					"       ,round(sun_sales1/sun_sales2,2)\r\n",
					"       ,round(mon_sales1/mon_sales2,2)\r\n",
					"       ,round(tue_sales1/tue_sales2,2)\r\n",
					"       ,round(wed_sales1/wed_sales2,2)\r\n",
					"       ,round(thu_sales1/thu_sales2,2)\r\n",
					"       ,round(fri_sales1/fri_sales2,2)\r\n",
					"       ,round(sat_sales1/sat_sales2,2)\r\n",
					" from\r\n",
					" (select wswscs.d_week_seq d_week_seq1\r\n",
					"        ,sun_sales sun_sales1\r\n",
					"        ,mon_sales mon_sales1\r\n",
					"        ,tue_sales tue_sales1\r\n",
					"        ,wed_sales wed_sales1\r\n",
					"        ,thu_sales thu_sales1\r\n",
					"        ,fri_sales fri_sales1\r\n",
					"        ,sat_sales sat_sales1\r\n",
					"  from wswscs,date_dim \r\n",
					"  where date_dim.d_week_seq = wswscs.d_week_seq and\r\n",
					"        d_year = 2001) y,\r\n",
					" (select wswscs.d_week_seq d_week_seq2\r\n",
					"        ,sun_sales sun_sales2\r\n",
					"        ,mon_sales mon_sales2\r\n",
					"        ,tue_sales tue_sales2\r\n",
					"        ,wed_sales wed_sales2\r\n",
					"        ,thu_sales thu_sales2\r\n",
					"        ,fri_sales fri_sales2\r\n",
					"        ,sat_sales sat_sales2\r\n",
					"  from wswscs\r\n",
					"      ,date_dim \r\n",
					"  where date_dim.d_week_seq = wswscs.d_week_seq and\r\n",
					"        d_year = 2001+1) z\r\n",
					" where d_week_seq1=d_week_seq2-53\r\n",
					" order by d_week_seq1;\r\n",
					""
				],
				"execution_count": 3
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"--query3\r\n",
					"  select  dt.d_year \r\n",
					"       ,item.i_brand_id brand_id \r\n",
					"       ,item.i_brand brand\r\n",
					"       ,sum(ss_ext_sales_price) sum_agg\r\n",
					" from  date_dim dt \r\n",
					"      ,store_sales\r\n",
					"      ,item\r\n",
					" where dt.d_date_sk = store_sales.ss_sold_date_sk\r\n",
					"   and store_sales.ss_item_sk = item.i_item_sk\r\n",
					"   and item.i_manufact_id = 128\r\n",
					"   and dt.d_moy=11\r\n",
					" group by dt.d_year\r\n",
					"      ,item.i_brand\r\n",
					"      ,item.i_brand_id\r\n",
					" order by dt.d_year\r\n",
					"         ,sum_agg desc\r\n",
					"         ,brand_id\r\n",
					"  limit 100;"
				],
				"execution_count": 4
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"--query4\r\n",
					"with year_total as (\r\n",
					" select c_customer_id customer_id\r\n",
					"       ,c_first_name customer_first_name\r\n",
					"       ,c_last_name customer_last_name\r\n",
					"       ,c_preferred_cust_flag customer_preferred_cust_flag\r\n",
					"       ,c_birth_country customer_birth_country\r\n",
					"       ,c_login customer_login\r\n",
					"       ,c_email_address customer_email_address\r\n",
					"       ,d_year dyear\r\n",
					"       ,sum(((ss_ext_list_price-ss_ext_wholesale_cost-ss_ext_discount_amt)+ss_ext_sales_price)/2) year_total\r\n",
					"       ,'s' sale_type\r\n",
					" from customer\r\n",
					"     ,store_sales\r\n",
					"     ,date_dim\r\n",
					" where c_customer_sk = ss_customer_sk\r\n",
					"   and ss_sold_date_sk = d_date_sk\r\n",
					" group by c_customer_id\r\n",
					"         ,c_first_name\r\n",
					"         ,c_last_name\r\n",
					"         ,c_preferred_cust_flag\r\n",
					"         ,c_birth_country\r\n",
					"         ,c_login\r\n",
					"         ,c_email_address\r\n",
					"         ,d_year\r\n",
					" union all\r\n",
					" select c_customer_id customer_id\r\n",
					"       ,c_first_name customer_first_name\r\n",
					"       ,c_last_name customer_last_name\r\n",
					"       ,c_preferred_cust_flag customer_preferred_cust_flag\r\n",
					"       ,c_birth_country customer_birth_country\r\n",
					"       ,c_login customer_login\r\n",
					"       ,c_email_address customer_email_address\r\n",
					"       ,d_year dyear\r\n",
					"       ,sum((((cs_ext_list_price-cs_ext_wholesale_cost-cs_ext_discount_amt)+cs_ext_sales_price)/2) ) year_total\r\n",
					"       ,'c' sale_type\r\n",
					" from customer\r\n",
					"     ,catalog_sales\r\n",
					"     ,date_dim\r\n",
					" where c_customer_sk = cs_bill_customer_sk\r\n",
					"   and cs_sold_date_sk = d_date_sk\r\n",
					" group by c_customer_id\r\n",
					"         ,c_first_name\r\n",
					"         ,c_last_name\r\n",
					"         ,c_preferred_cust_flag\r\n",
					"         ,c_birth_country\r\n",
					"         ,c_login\r\n",
					"         ,c_email_address\r\n",
					"         ,d_year\r\n",
					"union all\r\n",
					" select c_customer_id customer_id\r\n",
					"       ,c_first_name customer_first_name\r\n",
					"       ,c_last_name customer_last_name\r\n",
					"       ,c_preferred_cust_flag customer_preferred_cust_flag\r\n",
					"       ,c_birth_country customer_birth_country\r\n",
					"       ,c_login customer_login\r\n",
					"       ,c_email_address customer_email_address\r\n",
					"       ,d_year dyear\r\n",
					"       ,sum((((ws_ext_list_price-ws_ext_wholesale_cost-ws_ext_discount_amt)+ws_ext_sales_price)/2) ) year_total\r\n",
					"       ,'w' sale_type\r\n",
					" from customer\r\n",
					"     ,web_sales\r\n",
					"     ,date_dim\r\n",
					" where c_customer_sk = ws_bill_customer_sk\r\n",
					"   and ws_sold_date_sk = d_date_sk\r\n",
					" group by c_customer_id\r\n",
					"         ,c_first_name\r\n",
					"         ,c_last_name\r\n",
					"         ,c_preferred_cust_flag\r\n",
					"         ,c_birth_country\r\n",
					"         ,c_login\r\n",
					"         ,c_email_address\r\n",
					"         ,d_year\r\n",
					"         )\r\n",
					"  select  \r\n",
					"                  t_s_secyear.customer_id\r\n",
					"                 ,t_s_secyear.customer_first_name\r\n",
					"                 ,t_s_secyear.customer_last_name\r\n",
					"                 ,t_s_secyear.customer_preferred_cust_flag\r\n",
					" from year_total t_s_firstyear\r\n",
					"     ,year_total t_s_secyear\r\n",
					"     ,year_total t_c_firstyear\r\n",
					"     ,year_total t_c_secyear\r\n",
					"     ,year_total t_w_firstyear\r\n",
					"     ,year_total t_w_secyear\r\n",
					" where t_s_secyear.customer_id = t_s_firstyear.customer_id\r\n",
					"   and t_s_firstyear.customer_id = t_c_secyear.customer_id\r\n",
					"   and t_s_firstyear.customer_id = t_c_firstyear.customer_id\r\n",
					"   and t_s_firstyear.customer_id = t_w_firstyear.customer_id\r\n",
					"   and t_s_firstyear.customer_id = t_w_secyear.customer_id\r\n",
					"   and t_s_firstyear.sale_type = 's'\r\n",
					"   and t_c_firstyear.sale_type = 'c'\r\n",
					"   and t_w_firstyear.sale_type = 'w'\r\n",
					"   and t_s_secyear.sale_type = 's'\r\n",
					"   and t_c_secyear.sale_type = 'c'\r\n",
					"   and t_w_secyear.sale_type = 'w'\r\n",
					"   and t_s_firstyear.dyear =  2001\r\n",
					"   and t_s_secyear.dyear = 2001+1\r\n",
					"   and t_c_firstyear.dyear =  2001\r\n",
					"   and t_c_secyear.dyear =  2001+1\r\n",
					"   and t_w_firstyear.dyear = 2001\r\n",
					"   and t_w_secyear.dyear = 2001+1\r\n",
					"   and t_s_firstyear.year_total > 0\r\n",
					"   and t_c_firstyear.year_total > 0\r\n",
					"   and t_w_firstyear.year_total > 0\r\n",
					"   and case when t_c_firstyear.year_total > 0 then t_c_secyear.year_total / t_c_firstyear.year_total else null end\r\n",
					"           > case when t_s_firstyear.year_total > 0 then t_s_secyear.year_total / t_s_firstyear.year_total else null end\r\n",
					"   and case when t_c_firstyear.year_total > 0 then t_c_secyear.year_total / t_c_firstyear.year_total else null end\r\n",
					"           > case when t_w_firstyear.year_total > 0 then t_w_secyear.year_total / t_w_firstyear.year_total else null end\r\n",
					" order by t_s_secyear.customer_id\r\n",
					"         ,t_s_secyear.customer_first_name\r\n",
					"         ,t_s_secyear.customer_last_name\r\n",
					"         ,t_s_secyear.customer_preferred_cust_flag\r\n",
					" limit 100;"
				],
				"execution_count": 5
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"--query5\r\n",
					" with ssr as\r\n",
					" (select s_store_id,\r\n",
					"        sum(sales_price) as sales,\r\n",
					"        sum(profit) as profit,\r\n",
					"        sum(return_amt) as returns,\r\n",
					"        sum(net_loss) as profit_loss\r\n",
					" from\r\n",
					"  ( select  ss_store_sk as store_sk,\r\n",
					"            ss_sold_date_sk  as date_sk,\r\n",
					"            ss_ext_sales_price as sales_price,\r\n",
					"            ss_net_profit as profit,\r\n",
					"            cast(0 as decimal(7,2)) as return_amt,\r\n",
					"            cast(0 as decimal(7,2)) as net_loss\r\n",
					"    from store_sales\r\n",
					"    union all\r\n",
					"    select sr_store_sk as store_sk,\r\n",
					"           sr_returned_date_sk as date_sk,\r\n",
					"           cast(0 as decimal(7,2)) as sales_price,\r\n",
					"           cast(0 as decimal(7,2)) as profit,\r\n",
					"           sr_return_amt as return_amt,\r\n",
					"           sr_net_loss as net_loss\r\n",
					"    from store_returns\r\n",
					"   ) salesreturns,\r\n",
					"     date_dim,\r\n",
					"     store\r\n",
					" where date_sk = d_date_sk\r\n",
					"       and d_date between cast('2000-08-23' as date) \r\n",
					"                  and date_add(cast('2000-08-23' as date), 14 )\r\n",
					"       and store_sk = s_store_sk\r\n",
					" group by s_store_id)\r\n",
					" ,\r\n",
					" csr as\r\n",
					" (select cp_catalog_page_id,\r\n",
					"        sum(sales_price) as sales,\r\n",
					"        sum(profit) as profit,\r\n",
					"        sum(return_amt) as returns,\r\n",
					"        sum(net_loss) as profit_loss\r\n",
					" from\r\n",
					"  ( select  cs_catalog_page_sk as page_sk,\r\n",
					"            cs_sold_date_sk  as date_sk,\r\n",
					"            cs_ext_sales_price as sales_price,\r\n",
					"            cs_net_profit as profit,\r\n",
					"            cast(0 as decimal(7,2)) as return_amt,\r\n",
					"            cast(0 as decimal(7,2)) as net_loss\r\n",
					"    from catalog_sales\r\n",
					"    union all\r\n",
					"    select cr_catalog_page_sk as page_sk,\r\n",
					"           cr_returned_date_sk as date_sk,\r\n",
					"           cast(0 as decimal(7,2)) as sales_price,\r\n",
					"           cast(0 as decimal(7,2)) as profit,\r\n",
					"           cr_return_amount as return_amt,\r\n",
					"           cr_net_loss as net_loss\r\n",
					"    from catalog_returns\r\n",
					"   ) salesreturns,\r\n",
					"     date_dim,\r\n",
					"     catalog_page\r\n",
					" where date_sk = d_date_sk\r\n",
					"       and d_date between cast('2000-08-23' as date)\r\n",
					"                  and date_add(cast('2000-08-23' as date), 14 )\r\n",
					"       and page_sk = cp_catalog_page_sk\r\n",
					" group by cp_catalog_page_id)\r\n",
					" ,\r\n",
					" wsr as\r\n",
					" (select web_site_id,\r\n",
					"        sum(sales_price) as sales,\r\n",
					"        sum(profit) as profit,\r\n",
					"        sum(return_amt) as returns,\r\n",
					"        sum(net_loss) as profit_loss\r\n",
					" from\r\n",
					"  ( select  ws_web_site_sk as wsr_web_site_sk,\r\n",
					"            ws_sold_date_sk  as date_sk,\r\n",
					"            ws_ext_sales_price as sales_price,\r\n",
					"            ws_net_profit as profit,\r\n",
					"            cast(0 as decimal(7,2)) as return_amt,\r\n",
					"            cast(0 as decimal(7,2)) as net_loss\r\n",
					"    from web_sales\r\n",
					"    union all\r\n",
					"    select ws_web_site_sk as wsr_web_site_sk,\r\n",
					"           wr_returned_date_sk as date_sk,\r\n",
					"           cast(0 as decimal(7,2)) as sales_price,\r\n",
					"           cast(0 as decimal(7,2)) as profit,\r\n",
					"           wr_return_amt as return_amt,\r\n",
					"           wr_net_loss as net_loss\r\n",
					"    from web_returns left outer join web_sales on\r\n",
					"         ( wr_item_sk = ws_item_sk\r\n",
					"           and wr_order_number = ws_order_number)\r\n",
					"   ) salesreturns,\r\n",
					"     date_dim,\r\n",
					"     web_site\r\n",
					" where date_sk = d_date_sk\r\n",
					"       and d_date between cast('2000-08-23' as date)\r\n",
					"                  and date_add(cast('2000-08-23' as date), 14 )\r\n",
					"       and wsr_web_site_sk = web_site_sk\r\n",
					" group by web_site_id)\r\n",
					"  select  channel\r\n",
					"        , id\r\n",
					"        , sum(sales) as sales\r\n",
					"        , sum(returns) as returns\r\n",
					"        , sum(profit) as profit\r\n",
					" from \r\n",
					" (select 'store channel' as channel\r\n",
					"        , concat('store', s_store_id) as id\r\n",
					"        , sales\r\n",
					"        , returns\r\n",
					"        , (profit - profit_loss) as profit\r\n",
					" from   ssr\r\n",
					" union all\r\n",
					" select 'catalog channel' as channel\r\n",
					"        , concat('catalog_page', cp_catalog_page_id) as id\r\n",
					"        , sales\r\n",
					"        , returns\r\n",
					"        , (profit - profit_loss) as profit\r\n",
					" from  csr\r\n",
					" union all\r\n",
					" select 'web channel' as channel\r\n",
					"        , concat('web_site', web_site_id) as id\r\n",
					"        , sales\r\n",
					"        , returns\r\n",
					"        , (profit - profit_loss) as profit\r\n",
					" from   wsr\r\n",
					" ) x\r\n",
					" group by rollup (channel, id)\r\n",
					" order by channel\r\n",
					"         ,id\r\n",
					"  limit 100;"
				],
				"execution_count": 6
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"--query6\r\n",
					"  select  a.ca_state state, count(*) cnt\r\n",
					" from customer_address a\r\n",
					"     ,customer c\r\n",
					"     ,store_sales s\r\n",
					"     ,date_dim d\r\n",
					"     ,item i\r\n",
					" where       a.ca_address_sk = c.c_current_addr_sk\r\n",
					" \tand c.c_customer_sk = s.ss_customer_sk\r\n",
					" \tand s.ss_sold_date_sk = d.d_date_sk\r\n",
					" \tand s.ss_item_sk = i.i_item_sk\r\n",
					" \tand d.d_month_seq = \r\n",
					" \t     (select distinct (d_month_seq)\r\n",
					" \t      from date_dim\r\n",
					"               where d_year = 2001\r\n",
					" \t        and d_moy = 1 )\r\n",
					" \tand i.i_current_price > 1.2 * \r\n",
					"             (select avg(j.i_current_price) \r\n",
					" \t     from item j \r\n",
					" \t     where j.i_category = i.i_category)\r\n",
					" group by a.ca_state\r\n",
					" having count(*) >= 10\r\n",
					" order by cnt \r\n",
					"  limit 100;"
				],
				"execution_count": 7
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"--query7\r\n",
					"  select  i_item_id, \r\n",
					"        avg(ss_quantity) agg1,\r\n",
					"        avg(ss_list_price) agg2,\r\n",
					"        avg(ss_coupon_amt) agg3,\r\n",
					"        avg(ss_sales_price) agg4 \r\n",
					" from store_sales, customer_demographics, date_dim, item, promotion\r\n",
					" where ss_sold_date_sk = d_date_sk and\r\n",
					"       ss_item_sk = i_item_sk and\r\n",
					"       ss_cdemo_sk = cd_demo_sk and\r\n",
					"       ss_promo_sk = p_promo_sk and\r\n",
					"       cd_gender = 'M' and \r\n",
					"       cd_marital_status = 'S' and\r\n",
					"       cd_education_status = 'College' and\r\n",
					"       (p_channel_email = 'N' or p_channel_event = 'N') and\r\n",
					"       d_year = 2000 \r\n",
					" group by i_item_id\r\n",
					" order by i_item_id\r\n",
					"  limit 100;"
				],
				"execution_count": 8
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"--query8\r\n",
					"  select  s_store_name\r\n",
					"      ,sum(ss_net_profit)\r\n",
					" from store_sales\r\n",
					"     ,date_dim\r\n",
					"     ,store,\r\n",
					"     (select ca_zip\r\n",
					"     from (\r\n",
					"      SELECT substr(ca_zip,1,5) ca_zip\r\n",
					"      FROM customer_address\r\n",
					"      WHERE substr(ca_zip,1,5) IN (\r\n",
					"                          '24128','76232','65084','87816','83926','77556',\r\n",
					"                          '20548','26231','43848','15126','91137',\r\n",
					"                          '61265','98294','25782','17920','18426',\r\n",
					"                          '98235','40081','84093','28577','55565',\r\n",
					"                          '17183','54601','67897','22752','86284',\r\n",
					"                          '18376','38607','45200','21756','29741',\r\n",
					"                          '96765','23932','89360','29839','25989',\r\n",
					"                          '28898','91068','72550','10390','18845',\r\n",
					"                          '47770','82636','41367','76638','86198',\r\n",
					"                          '81312','37126','39192','88424','72175',\r\n",
					"                          '81426','53672','10445','42666','66864',\r\n",
					"                          '66708','41248','48583','82276','18842',\r\n",
					"                          '78890','49448','14089','38122','34425',\r\n",
					"                          '79077','19849','43285','39861','66162',\r\n",
					"                          '77610','13695','99543','83444','83041',\r\n",
					"                          '12305','57665','68341','25003','57834',\r\n",
					"                          '62878','49130','81096','18840','27700',\r\n",
					"                          '23470','50412','21195','16021','76107',\r\n",
					"                          '71954','68309','18119','98359','64544',\r\n",
					"                          '10336','86379','27068','39736','98569',\r\n",
					"                          '28915','24206','56529','57647','54917',\r\n",
					"                          '42961','91110','63981','14922','36420',\r\n",
					"                          '23006','67467','32754','30903','20260',\r\n",
					"                          '31671','51798','72325','85816','68621',\r\n",
					"                          '13955','36446','41766','68806','16725',\r\n",
					"                          '15146','22744','35850','88086','51649',\r\n",
					"                          '18270','52867','39972','96976','63792',\r\n",
					"                          '11376','94898','13595','10516','90225',\r\n",
					"                          '58943','39371','94945','28587','96576',\r\n",
					"                          '57855','28488','26105','83933','25858',\r\n",
					"                          '34322','44438','73171','30122','34102',\r\n",
					"                          '22685','71256','78451','54364','13354',\r\n",
					"                          '45375','40558','56458','28286','45266',\r\n",
					"                          '47305','69399','83921','26233','11101',\r\n",
					"                          '15371','69913','35942','15882','25631',\r\n",
					"                          '24610','44165','99076','33786','70738',\r\n",
					"                          '26653','14328','72305','62496','22152',\r\n",
					"                          '10144','64147','48425','14663','21076',\r\n",
					"                          '18799','30450','63089','81019','68893',\r\n",
					"                          '24996','51200','51211','45692','92712',\r\n",
					"                          '70466','79994','22437','25280','38935',\r\n",
					"                          '71791','73134','56571','14060','19505',\r\n",
					"                          '72425','56575','74351','68786','51650',\r\n",
					"                          '20004','18383','76614','11634','18906',\r\n",
					"                          '15765','41368','73241','76698','78567',\r\n",
					"                          '97189','28545','76231','75691','22246',\r\n",
					"                          '51061','90578','56691','68014','51103',\r\n",
					"                          '94167','57047','14867','73520','15734',\r\n",
					"                          '63435','25733','35474','24676','94627',\r\n",
					"                          '53535','17879','15559','53268','59166',\r\n",
					"                          '11928','59402','33282','45721','43933',\r\n",
					"                          '68101','33515','36634','71286','19736',\r\n",
					"                          '58058','55253','67473','41918','19515',\r\n",
					"                          '36495','19430','22351','77191','91393',\r\n",
					"                          '49156','50298','87501','18652','53179',\r\n",
					"                          '18767','63193','23968','65164','68880',\r\n",
					"                          '21286','72823','58470','67301','13394',\r\n",
					"                          '31016','70372','67030','40604','24317',\r\n",
					"                          '45748','39127','26065','77721','31029',\r\n",
					"                          '31880','60576','24671','45549','13376',\r\n",
					"                          '50016','33123','19769','22927','97789',\r\n",
					"                          '46081','72151','15723','46136','51949',\r\n",
					"                          '68100','96888','64528','14171','79777',\r\n",
					"                          '28709','11489','25103','32213','78668',\r\n",
					"                          '22245','15798','27156','37930','62971',\r\n",
					"                          '21337','51622','67853','10567','38415',\r\n",
					"                          '15455','58263','42029','60279','37125',\r\n",
					"                          '56240','88190','50308','26859','64457',\r\n",
					"                          '89091','82136','62377','36233','63837',\r\n",
					"                          '58078','17043','30010','60099','28810',\r\n",
					"                          '98025','29178','87343','73273','30469',\r\n",
					"                          '64034','39516','86057','21309','90257',\r\n",
					"                          '67875','40162','11356','73650','61810',\r\n",
					"                          '72013','30431','22461','19512','13375',\r\n",
					"                          '55307','30625','83849','68908','26689',\r\n",
					"                          '96451','38193','46820','88885','84935',\r\n",
					"                          '69035','83144','47537','56616','94983',\r\n",
					"                          '48033','69952','25486','61547','27385',\r\n",
					"                          '61860','58048','56910','16807','17871',\r\n",
					"                          '35258','31387','35458','35576')\r\n",
					"     intersect\r\n",
					"      select ca_zip\r\n",
					"      from (SELECT substr(ca_zip,1,5) ca_zip,count(*) cnt\r\n",
					"            FROM customer_address, customer\r\n",
					"            WHERE ca_address_sk = c_current_addr_sk and\r\n",
					"                  c_preferred_cust_flag='Y'\r\n",
					"            group by ca_zip\r\n",
					"            having count(*) > 10)A1)A2) V1\r\n",
					" where ss_store_sk = s_store_sk\r\n",
					"  and ss_sold_date_sk = d_date_sk\r\n",
					"  and d_qoy = 2 and d_year = 1998\r\n",
					"  and (substr(s_zip,1,2) = substr(V1.ca_zip,1,2))\r\n",
					" group by s_store_name\r\n",
					" order by s_store_name\r\n",
					"  limit 100;"
				],
				"execution_count": 9
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"--query9\r\n",
					"select case when (select count(*) \r\n",
					"                  from store_sales \r\n",
					"                  where ss_quantity between 1 and 20) > 74129\r\n",
					"            then (select avg(ss_ext_discount_amt) \r\n",
					"                  from store_sales \r\n",
					"                  where ss_quantity between 1 and 20) \r\n",
					"            else (select avg(ss_net_paid)\r\n",
					"                  from store_sales\r\n",
					"                  where ss_quantity between 1 and 20) end bucket1 ,\r\n",
					"       case when (select count(*)\r\n",
					"                  from store_sales\r\n",
					"                  where ss_quantity between 21 and 40) > 122840\r\n",
					"            then (select avg(ss_ext_discount_amt)\r\n",
					"                  from store_sales\r\n",
					"                  where ss_quantity between 21 and 40) \r\n",
					"            else (select avg(ss_net_paid)\r\n",
					"                  from store_sales\r\n",
					"                  where ss_quantity between 21 and 40) end bucket2,\r\n",
					"       case when (select count(*)\r\n",
					"                  from store_sales\r\n",
					"                  where ss_quantity between 41 and 60) > 56580\r\n",
					"            then (select avg(ss_ext_discount_amt)\r\n",
					"                  from store_sales\r\n",
					"                  where ss_quantity between 41 and 60)\r\n",
					"            else (select avg(ss_net_paid)\r\n",
					"                  from store_sales\r\n",
					"                  where ss_quantity between 41 and 60) end bucket3,\r\n",
					"       case when (select count(*)\r\n",
					"                  from store_sales\r\n",
					"                  where ss_quantity between 61 and 80) > 10097\r\n",
					"            then (select avg(ss_ext_discount_amt)\r\n",
					"                  from store_sales\r\n",
					"                  where ss_quantity between 61 and 80)\r\n",
					"            else (select avg(ss_net_paid)\r\n",
					"                  from store_sales\r\n",
					"                  where ss_quantity between 61 and 80) end bucket4,\r\n",
					"       case when (select count(*)\r\n",
					"                  from store_sales\r\n",
					"                  where ss_quantity between 81 and 100) > 165306\r\n",
					"            then (select avg(ss_ext_discount_amt)\r\n",
					"                  from store_sales\r\n",
					"                  where ss_quantity between 81 and 100)\r\n",
					"            else (select avg(ss_net_paid)\r\n",
					"                  from store_sales\r\n",
					"                  where ss_quantity between 81 and 100) end bucket5\r\n",
					"from reason\r\n",
					"where r_reason_sk = 1;"
				],
				"execution_count": 10
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"--query10\r\n",
					"  select  \r\n",
					"  cd_gender,\r\n",
					"  cd_marital_status,\r\n",
					"  cd_education_status,\r\n",
					"  count(*) cnt1,\r\n",
					"  cd_purchase_estimate,\r\n",
					"  count(*) cnt2,\r\n",
					"  cd_credit_rating,\r\n",
					"  count(*) cnt3,\r\n",
					"  cd_dep_count,\r\n",
					"  count(*) cnt4,\r\n",
					"  cd_dep_employed_count,\r\n",
					"  count(*) cnt5,\r\n",
					"  cd_dep_college_count,\r\n",
					"  count(*) cnt6\r\n",
					" from\r\n",
					"  customer c,customer_address ca,customer_demographics\r\n",
					" where\r\n",
					"  c.c_current_addr_sk = ca.ca_address_sk and\r\n",
					"  ca_county in ('Rush County','Toole County','Jefferson County','Dona Ana County','La Porte County') and\r\n",
					"  cd_demo_sk = c.c_current_cdemo_sk and \r\n",
					"  exists (select *\r\n",
					"          from store_sales,date_dim\r\n",
					"          where c.c_customer_sk = ss_customer_sk and\r\n",
					"                ss_sold_date_sk = d_date_sk and\r\n",
					"                d_year = 2002 and\r\n",
					"                d_moy between 1 and 1+3) and\r\n",
					"   (exists (select *\r\n",
					"            from web_sales,date_dim\r\n",
					"            where c.c_customer_sk = ws_bill_customer_sk and\r\n",
					"                  ws_sold_date_sk = d_date_sk and\r\n",
					"                  d_year = 2002 and\r\n",
					"                  d_moy between 1 ANd 1+3) or \r\n",
					"    exists (select * \r\n",
					"            from catalog_sales,date_dim\r\n",
					"            where c.c_customer_sk = cs_ship_customer_sk and\r\n",
					"                  cs_sold_date_sk = d_date_sk and\r\n",
					"                  d_year = 2002 and\r\n",
					"                  d_moy between 1 and 1+3))\r\n",
					" group by cd_gender,\r\n",
					"          cd_marital_status,\r\n",
					"          cd_education_status,\r\n",
					"          cd_purchase_estimate,\r\n",
					"          cd_credit_rating,\r\n",
					"          cd_dep_count,\r\n",
					"          cd_dep_employed_count,\r\n",
					"          cd_dep_college_count\r\n",
					" order by cd_gender,\r\n",
					"          cd_marital_status,\r\n",
					"          cd_education_status,\r\n",
					"          cd_purchase_estimate,\r\n",
					"          cd_credit_rating,\r\n",
					"          cd_dep_count,\r\n",
					"          cd_dep_employed_count,\r\n",
					"          cd_dep_college_count\r\n",
					" limit 100;"
				],
				"execution_count": 11
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"--query11\r\n",
					" with year_total as (\r\n",
					" select c_customer_id customer_id\r\n",
					"       ,c_first_name customer_first_name\r\n",
					"       ,c_last_name customer_last_name\r\n",
					"       ,c_preferred_cust_flag customer_preferred_cust_flag\r\n",
					"       ,c_birth_country customer_birth_country\r\n",
					"       ,c_login customer_login\r\n",
					"       ,c_email_address customer_email_address\r\n",
					"       ,d_year dyear\r\n",
					"       ,sum(ss_ext_list_price-ss_ext_discount_amt) year_total\r\n",
					"       ,'s' sale_type\r\n",
					" from customer\r\n",
					"     ,store_sales\r\n",
					"     ,date_dim\r\n",
					" where c_customer_sk = ss_customer_sk\r\n",
					"   and ss_sold_date_sk = d_date_sk\r\n",
					" group by c_customer_id\r\n",
					"         ,c_first_name\r\n",
					"         ,c_last_name\r\n",
					"         ,c_preferred_cust_flag \r\n",
					"         ,c_birth_country\r\n",
					"         ,c_login\r\n",
					"         ,c_email_address\r\n",
					"         ,d_year \r\n",
					" union all\r\n",
					" select c_customer_id customer_id\r\n",
					"       ,c_first_name customer_first_name\r\n",
					"       ,c_last_name customer_last_name\r\n",
					"       ,c_preferred_cust_flag customer_preferred_cust_flag\r\n",
					"       ,c_birth_country customer_birth_country\r\n",
					"       ,c_login customer_login\r\n",
					"       ,c_email_address customer_email_address\r\n",
					"       ,d_year dyear\r\n",
					"       ,sum(ws_ext_list_price-ws_ext_discount_amt) year_total\r\n",
					"       ,'w' sale_type\r\n",
					" from customer\r\n",
					"     ,web_sales\r\n",
					"     ,date_dim\r\n",
					" where c_customer_sk = ws_bill_customer_sk\r\n",
					"   and ws_sold_date_sk = d_date_sk\r\n",
					" group by c_customer_id\r\n",
					"         ,c_first_name\r\n",
					"         ,c_last_name\r\n",
					"         ,c_preferred_cust_flag \r\n",
					"         ,c_birth_country\r\n",
					"         ,c_login\r\n",
					"         ,c_email_address\r\n",
					"         ,d_year\r\n",
					"         )\r\n",
					"  select  \r\n",
					"                  t_s_secyear.customer_id\r\n",
					"                 ,t_s_secyear.customer_first_name\r\n",
					"                 ,t_s_secyear.customer_last_name\r\n",
					"                 ,t_s_secyear.customer_preferred_cust_flag\r\n",
					" from year_total t_s_firstyear\r\n",
					"     ,year_total t_s_secyear\r\n",
					"     ,year_total t_w_firstyear\r\n",
					"     ,year_total t_w_secyear\r\n",
					" where t_s_secyear.customer_id = t_s_firstyear.customer_id\r\n",
					"         and t_s_firstyear.customer_id = t_w_secyear.customer_id\r\n",
					"         and t_s_firstyear.customer_id = t_w_firstyear.customer_id\r\n",
					"         and t_s_firstyear.sale_type = 's'\r\n",
					"         and t_w_firstyear.sale_type = 'w'\r\n",
					"         and t_s_secyear.sale_type = 's'\r\n",
					"         and t_w_secyear.sale_type = 'w'\r\n",
					"         and t_s_firstyear.dyear = 2001\r\n",
					"         and t_s_secyear.dyear = 2001+1\r\n",
					"         and t_w_firstyear.dyear = 2001\r\n",
					"         and t_w_secyear.dyear = 2001+1\r\n",
					"         and t_s_firstyear.year_total > 0\r\n",
					"         and t_w_firstyear.year_total > 0\r\n",
					"         and case when t_w_firstyear.year_total > 0 then t_w_secyear.year_total / t_w_firstyear.year_total else 0.0 end\r\n",
					"             > case when t_s_firstyear.year_total > 0 then t_s_secyear.year_total / t_s_firstyear.year_total else 0.0 end\r\n",
					" order by t_s_secyear.customer_id\r\n",
					"         ,t_s_secyear.customer_first_name\r\n",
					"         ,t_s_secyear.customer_last_name\r\n",
					"         ,t_s_secyear.customer_preferred_cust_flag\r\n",
					" limit 100;"
				],
				"execution_count": 12
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"--query12\r\n",
					" select  i_item_id\r\n",
					"      ,i_item_desc \r\n",
					"      ,i_category \r\n",
					"      ,i_class \r\n",
					"      ,i_current_price\r\n",
					"      ,sum(ws_ext_sales_price) as itemrevenue \r\n",
					"      ,sum(ws_ext_sales_price)*100/sum(sum(ws_ext_sales_price)) over\r\n",
					"          (partition by i_class) as revenueratio\r\n",
					"from\t\r\n",
					"\tweb_sales\r\n",
					"    \t,item \r\n",
					"    \t,date_dim\r\n",
					"where \r\n",
					"\tws_item_sk = i_item_sk \r\n",
					"  \tand i_category in ('Sports', 'Books', 'Home')\r\n",
					"  \tand ws_sold_date_sk = d_date_sk\r\n",
					"\tand d_date between cast('1999-02-22' as date) \r\n",
					"                                and date_add(cast('1999-02-22' as date), 30 )\r\n",
					"group by \r\n",
					"\ti_item_id\r\n",
					"        ,i_item_desc \r\n",
					"        ,i_category\r\n",
					"        ,i_class\r\n",
					"        ,i_current_price\r\n",
					"order by \r\n",
					"\ti_category\r\n",
					"        ,i_class\r\n",
					"        ,i_item_id\r\n",
					"        ,i_item_desc\r\n",
					"        ,revenueratio\r\n",
					" limit 100;"
				],
				"execution_count": 13
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"--query13\r\n",
					" select avg(ss_quantity)\r\n",
					"       ,avg(ss_ext_sales_price)\r\n",
					"       ,avg(ss_ext_wholesale_cost)\r\n",
					"       ,sum(ss_ext_wholesale_cost)\r\n",
					" from store_sales\r\n",
					"     ,store\r\n",
					"     ,customer_demographics\r\n",
					"     ,household_demographics\r\n",
					"     ,customer_address\r\n",
					"     ,date_dim\r\n",
					" where s_store_sk = ss_store_sk\r\n",
					" and  ss_sold_date_sk = d_date_sk and d_year = 2001\r\n",
					" and((ss_hdemo_sk=hd_demo_sk\r\n",
					"  and cd_demo_sk = ss_cdemo_sk\r\n",
					"  and cd_marital_status = 'M'\r\n",
					"  and cd_education_status = 'Advanced Degree'\r\n",
					"  and ss_sales_price between 100.00 and 150.00\r\n",
					"  and hd_dep_count = 3   \r\n",
					"     )or\r\n",
					"     (ss_hdemo_sk=hd_demo_sk\r\n",
					"  and cd_demo_sk = ss_cdemo_sk\r\n",
					"  and cd_marital_status = 'S'\r\n",
					"  and cd_education_status = 'College'\r\n",
					"  and ss_sales_price between 50.00 and 100.00   \r\n",
					"  and hd_dep_count = 1\r\n",
					"     ) or \r\n",
					"     (ss_hdemo_sk=hd_demo_sk\r\n",
					"  and cd_demo_sk = ss_cdemo_sk\r\n",
					"  and cd_marital_status = 'W'\r\n",
					"  and cd_education_status = '2 yr Degree'\r\n",
					"  and ss_sales_price between 150.00 and 200.00 \r\n",
					"  and hd_dep_count = 1  \r\n",
					"     ))\r\n",
					" and((ss_addr_sk = ca_address_sk\r\n",
					"  and ca_country = 'United States'\r\n",
					"  and ca_state in ('TX', 'OH', 'TX')\r\n",
					"  and ss_net_profit between 100 and 200  \r\n",
					"     ) or\r\n",
					"     (ss_addr_sk = ca_address_sk\r\n",
					"  and ca_country = 'United States'\r\n",
					"  and ca_state in ('OR', 'NM', 'KY')\r\n",
					"  and ss_net_profit between 150 and 300  \r\n",
					"     ) or\r\n",
					"     (ss_addr_sk = ca_address_sk\r\n",
					"  and ca_country = 'United States'\r\n",
					"  and ca_state in ('VA', 'TX', 'MS')\r\n",
					"  and ss_net_profit between 50 and 250  \r\n",
					"     ));"
				],
				"execution_count": 14
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"--query14\r\n",
					"with  cross_items as\r\n",
					" (select i_item_sk ss_item_sk\r\n",
					" from item,\r\n",
					" (select iss.i_brand_id brand_id\r\n",
					"     ,iss.i_class_id class_id\r\n",
					"     ,iss.i_category_id category_id\r\n",
					" from store_sales\r\n",
					"     ,item iss\r\n",
					"     ,date_dim d1\r\n",
					" where ss_item_sk = iss.i_item_sk\r\n",
					"   and ss_sold_date_sk = d1.d_date_sk\r\n",
					"   and d1.d_year between 1999 AND 1999 + 2\r\n",
					" intersect \r\n",
					" select ics.i_brand_id\r\n",
					"     ,ics.i_class_id\r\n",
					"     ,ics.i_category_id\r\n",
					" from catalog_sales\r\n",
					"     ,item ics\r\n",
					"     ,date_dim d2\r\n",
					" where cs_item_sk = ics.i_item_sk\r\n",
					"   and cs_sold_date_sk = d2.d_date_sk\r\n",
					"   and d2.d_year between 1999 AND 1999 + 2\r\n",
					" intersect\r\n",
					" select iws.i_brand_id\r\n",
					"     ,iws.i_class_id\r\n",
					"     ,iws.i_category_id\r\n",
					" from web_sales\r\n",
					"     ,item iws\r\n",
					"     ,date_dim d3\r\n",
					" where ws_item_sk = iws.i_item_sk\r\n",
					"   and ws_sold_date_sk = d3.d_date_sk\r\n",
					"   and d3.d_year between 1999 AND 1999 + 2)\r\n",
					" where i_brand_id = brand_id\r\n",
					"      and i_class_id = class_id\r\n",
					"      and i_category_id = category_id\r\n",
					"),\r\n",
					" avg_sales as\r\n",
					" (select avg(quantity*list_price) average_sales\r\n",
					"  from (select ss_quantity quantity\r\n",
					"             ,ss_list_price list_price\r\n",
					"       from store_sales\r\n",
					"           ,date_dim\r\n",
					"       where ss_sold_date_sk = d_date_sk\r\n",
					"         and d_year between 1999 and 1999 + 2\r\n",
					"       union all \r\n",
					"       select cs_quantity quantity \r\n",
					"             ,cs_list_price list_price\r\n",
					"       from catalog_sales\r\n",
					"           ,date_dim\r\n",
					"       where cs_sold_date_sk = d_date_sk\r\n",
					"         and d_year between 1999 and 1999 + 2 \r\n",
					"       union all\r\n",
					"       select ws_quantity quantity\r\n",
					"             ,ws_list_price list_price\r\n",
					"       from web_sales\r\n",
					"           ,date_dim\r\n",
					"       where ws_sold_date_sk = d_date_sk\r\n",
					"         and d_year between 1999 and 1999 + 2) x)\r\n",
					"  select  channel, i_brand_id,i_class_id,i_category_id,sum(sales), sum(number_sales)\r\n",
					" from(\r\n",
					"       select 'store' channel, i_brand_id,i_class_id\r\n",
					"             ,i_category_id,sum(ss_quantity*ss_list_price) sales\r\n",
					"             , count(*) number_sales\r\n",
					"       from store_sales\r\n",
					"           ,item\r\n",
					"           ,date_dim\r\n",
					"       where ss_item_sk in (select ss_item_sk from cross_items)\r\n",
					"         and ss_item_sk = i_item_sk\r\n",
					"         and ss_sold_date_sk = d_date_sk\r\n",
					"         and d_year = 1999+2 \r\n",
					"         and d_moy = 11\r\n",
					"       group by i_brand_id,i_class_id,i_category_id\r\n",
					"       having sum(ss_quantity*ss_list_price) > (select average_sales from avg_sales)\r\n",
					"       union all\r\n",
					"       select 'catalog' channel, i_brand_id,i_class_id,i_category_id, sum(cs_quantity*cs_list_price) sales, count(*) number_sales\r\n",
					"       from catalog_sales\r\n",
					"           ,item\r\n",
					"           ,date_dim\r\n",
					"       where cs_item_sk in (select ss_item_sk from cross_items)\r\n",
					"         and cs_item_sk = i_item_sk\r\n",
					"         and cs_sold_date_sk = d_date_sk\r\n",
					"         and d_year = 1999+2 \r\n",
					"         and d_moy = 11\r\n",
					"       group by i_brand_id,i_class_id,i_category_id\r\n",
					"       having sum(cs_quantity*cs_list_price) > (select average_sales from avg_sales)\r\n",
					"       union all\r\n",
					"       select 'web' channel, i_brand_id,i_class_id,i_category_id, sum(ws_quantity*ws_list_price) sales , count(*) number_sales\r\n",
					"       from web_sales\r\n",
					"           ,item\r\n",
					"           ,date_dim\r\n",
					"       where ws_item_sk in (select ss_item_sk from cross_items)\r\n",
					"         and ws_item_sk = i_item_sk\r\n",
					"         and ws_sold_date_sk = d_date_sk\r\n",
					"         and d_year = 1999+2\r\n",
					"         and d_moy = 11\r\n",
					"       group by i_brand_id,i_class_id,i_category_id\r\n",
					"       having sum(ws_quantity*ws_list_price) > (select average_sales from avg_sales)\r\n",
					" ) y\r\n",
					" group by rollup (channel, i_brand_id,i_class_id,i_category_id)\r\n",
					" order by channel,i_brand_id,i_class_id,i_category_id\r\n",
					"  limit 100;\r\n",
					" with  cross_items as\r\n",
					" (select i_item_sk ss_item_sk\r\n",
					" from item,\r\n",
					" (select iss.i_brand_id brand_id\r\n",
					"     ,iss.i_class_id class_id\r\n",
					"     ,iss.i_category_id category_id\r\n",
					" from store_sales\r\n",
					"     ,item iss\r\n",
					"     ,date_dim d1\r\n",
					" where ss_item_sk = iss.i_item_sk\r\n",
					"   and ss_sold_date_sk = d1.d_date_sk\r\n",
					"   and d1.d_year between 1999 AND 1999 + 2\r\n",
					" intersect\r\n",
					" select ics.i_brand_id\r\n",
					"     ,ics.i_class_id\r\n",
					"     ,ics.i_category_id\r\n",
					" from catalog_sales\r\n",
					"     ,item ics\r\n",
					"     ,date_dim d2\r\n",
					" where cs_item_sk = ics.i_item_sk\r\n",
					"   and cs_sold_date_sk = d2.d_date_sk\r\n",
					"   and d2.d_year between 1999 AND 1999 + 2\r\n",
					" intersect\r\n",
					" select iws.i_brand_id\r\n",
					"     ,iws.i_class_id\r\n",
					"     ,iws.i_category_id\r\n",
					" from web_sales\r\n",
					"     ,item iws\r\n",
					"     ,date_dim d3\r\n",
					" where ws_item_sk = iws.i_item_sk\r\n",
					"   and ws_sold_date_sk = d3.d_date_sk\r\n",
					"   and d3.d_year between 1999 AND 1999 + 2) x\r\n",
					" where i_brand_id = brand_id\r\n",
					"      and i_class_id = class_id\r\n",
					"      and i_category_id = category_id\r\n",
					"),\r\n",
					" avg_sales as\r\n",
					"(select avg(quantity*list_price) average_sales\r\n",
					"  from (select ss_quantity quantity\r\n",
					"             ,ss_list_price list_price\r\n",
					"       from store_sales\r\n",
					"           ,date_dim\r\n",
					"       where ss_sold_date_sk = d_date_sk\r\n",
					"         and d_year between 1999 and 1999 + 2\r\n",
					"       union all\r\n",
					"       select cs_quantity quantity\r\n",
					"             ,cs_list_price list_price\r\n",
					"       from catalog_sales\r\n",
					"           ,date_dim\r\n",
					"       where cs_sold_date_sk = d_date_sk\r\n",
					"         and d_year between 1999 and 1999 + 2\r\n",
					"       union all\r\n",
					"       select ws_quantity quantity\r\n",
					"             ,ws_list_price list_price\r\n",
					"       from web_sales\r\n",
					"           ,date_dim\r\n",
					"       where ws_sold_date_sk = d_date_sk\r\n",
					"         and d_year between 1999 and 1999 + 2) x)\r\n",
					"  select  * from\r\n",
					" (select 'store' channel, i_brand_id,i_class_id,i_category_id\r\n",
					"        ,sum(ss_quantity*ss_list_price) sales, count(*) number_sales\r\n",
					" from store_sales \r\n",
					"     ,item\r\n",
					"     ,date_dim\r\n",
					" where ss_item_sk in (select ss_item_sk from cross_items)\r\n",
					"   and ss_item_sk = i_item_sk\r\n",
					"   and ss_sold_date_sk = d_date_sk\r\n",
					"   and d_week_seq = (select d_week_seq\r\n",
					"                     from date_dim\r\n",
					"                     where d_year = 1999 + 1\r\n",
					"                       and d_moy = 12\r\n",
					"                       and d_dom = 11)\r\n",
					" group by i_brand_id,i_class_id,i_category_id\r\n",
					" having sum(ss_quantity*ss_list_price) > (select average_sales from avg_sales)) this_year,\r\n",
					" (select 'store' channel_2, i_brand_id as i_brand_id_2, i_class_id as i_class_id_2\r\n",
					"        ,i_category_id as i_category_id_2 , sum(ss_quantity*ss_list_price) sales_2, count(*) number_sales_2\r\n",
					" from store_sales\r\n",
					"     ,item\r\n",
					"     ,date_dim\r\n",
					" where ss_item_sk in (select ss_item_sk from cross_items)\r\n",
					"   and ss_item_sk = i_item_sk\r\n",
					"   and ss_sold_date_sk = d_date_sk\r\n",
					"   and d_week_seq = (select d_week_seq\r\n",
					"                     from date_dim\r\n",
					"                     where d_year = 1999\r\n",
					"                       and d_moy = 12\r\n",
					"                       and d_dom = 11)\r\n",
					" group by i_brand_id,i_class_id,i_category_id\r\n",
					" having sum(ss_quantity*ss_list_price) > (select average_sales from avg_sales)) last_year\r\n",
					" where this_year.i_brand_id= last_year.i_brand_id_2\r\n",
					"   and this_year.i_class_id = last_year.i_class_id_2\r\n",
					"   and this_year.i_category_id = last_year.i_category_id_2\r\n",
					" order by this_year.channel, this_year.i_brand_id, this_year.i_class_id, this_year.i_category_id\r\n",
					"  limit 100;"
				],
				"execution_count": 15
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"--query15\r\n",
					"  select  ca_zip\r\n",
					"       ,sum(cs_sales_price)\r\n",
					" from catalog_sales\r\n",
					"     ,customer\r\n",
					"     ,customer_address\r\n",
					"     ,date_dim\r\n",
					" where cs_bill_customer_sk = c_customer_sk\r\n",
					" \tand c_current_addr_sk = ca_address_sk \r\n",
					" \tand ( substr(ca_zip,1,5) in ('85669', '86197','88274','83405','86475',\r\n",
					"                                   '85392', '85460', '80348', '81792')\r\n",
					" \t      or ca_state in ('CA','WA','GA')\r\n",
					" \t      or cs_sales_price > 500)\r\n",
					" \tand cs_sold_date_sk = d_date_sk\r\n",
					" \tand d_qoy = 2 and d_year = 2001\r\n",
					" group by ca_zip\r\n",
					" order by ca_zip\r\n",
					"  limit 100;"
				],
				"execution_count": 16
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"--query16\r\n",
					" select  \r\n",
					"   count(distinct cs_order_number) as order_count\r\n",
					"  ,sum(cs_ext_ship_cost) as total_shipping_cost\r\n",
					"  ,sum(cs_net_profit) as total_net_profit\r\n",
					"from\r\n",
					"   catalog_sales cs1\r\n",
					"  ,date_dim\r\n",
					"  ,customer_address\r\n",
					"  ,call_center\r\n",
					"where\r\n",
					"    d_date between cast('2002-2-01' as date) and \r\n",
					"           date_add(cast('2002-2-01' as date), 60 )\r\n",
					"and cs1.cs_ship_date_sk = d_date_sk\r\n",
					"and cs1.cs_ship_addr_sk = ca_address_sk\r\n",
					"and ca_state = 'GA'\r\n",
					"and cs1.cs_call_center_sk = cc_call_center_sk\r\n",
					"and cc_county in ('Williamson County','Williamson County','Williamson County','Williamson County',\r\n",
					"                  'Williamson County'\r\n",
					")\r\n",
					"and exists (select *\r\n",
					"            from catalog_sales cs2\r\n",
					"            where cs1.cs_order_number = cs2.cs_order_number\r\n",
					"              and cs1.cs_warehouse_sk <> cs2.cs_warehouse_sk)\r\n",
					"and not exists(select *\r\n",
					"               from catalog_returns cr1\r\n",
					"               where cs1.cs_order_number = cr1.cr_order_number)\r\n",
					"order by count(distinct cs_order_number)\r\n",
					" limit 100;"
				],
				"execution_count": 17
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"--query17\r\n",
					"  select  i_item_id\r\n",
					"       ,i_item_desc\r\n",
					"       ,s_state\r\n",
					"       ,count(ss_quantity) as store_sales_quantitycount\r\n",
					"       ,avg(ss_quantity) as store_sales_quantityave\r\n",
					"       ,stddev_samp(ss_quantity) as store_sales_quantitystdev\r\n",
					"       ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov\r\n",
					"       ,count(sr_return_quantity) as store_returns_quantitycount\r\n",
					"       ,avg(sr_return_quantity) as store_returns_quantityave\r\n",
					"       ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev\r\n",
					"       ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov\r\n",
					"       ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave\r\n",
					"       ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev\r\n",
					"       ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov\r\n",
					" from store_sales\r\n",
					"     ,store_returns\r\n",
					"     ,catalog_sales\r\n",
					"     ,date_dim d1\r\n",
					"     ,date_dim d2\r\n",
					"     ,date_dim d3\r\n",
					"     ,store\r\n",
					"     ,item\r\n",
					" where d1.d_quarter_name = '2001Q1'\r\n",
					"   and d1.d_date_sk = ss_sold_date_sk\r\n",
					"   and i_item_sk = ss_item_sk\r\n",
					"   and s_store_sk = ss_store_sk\r\n",
					"   and ss_customer_sk = sr_customer_sk\r\n",
					"   and ss_item_sk = sr_item_sk\r\n",
					"   and ss_ticket_number = sr_ticket_number\r\n",
					"   and sr_returned_date_sk = d2.d_date_sk\r\n",
					"   and d2.d_quarter_name in ('2001Q1','2001Q2','2001Q3')\r\n",
					"   and sr_customer_sk = cs_bill_customer_sk\r\n",
					"   and sr_item_sk = cs_item_sk\r\n",
					"   and cs_sold_date_sk = d3.d_date_sk\r\n",
					"   and d3.d_quarter_name in ('2001Q1','2001Q2','2001Q3')\r\n",
					" group by i_item_id\r\n",
					"         ,i_item_desc\r\n",
					"         ,s_state\r\n",
					" order by i_item_id\r\n",
					"         ,i_item_desc\r\n",
					"         ,s_state\r\n",
					" limit 100;"
				],
				"execution_count": 18
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"--query18\r\n",
					"  select  i_item_id,\r\n",
					"        ca_country,\r\n",
					"        ca_state, \r\n",
					"        ca_county,\r\n",
					"        avg( cast(cs_quantity as decimal(12,2))) agg1,\r\n",
					"        avg( cast(cs_list_price as decimal(12,2))) agg2,\r\n",
					"        avg( cast(cs_coupon_amt as decimal(12,2))) agg3,\r\n",
					"        avg( cast(cs_sales_price as decimal(12,2))) agg4,\r\n",
					"        avg( cast(cs_net_profit as decimal(12,2))) agg5,\r\n",
					"        avg( cast(c_birth_year as decimal(12,2))) agg6,\r\n",
					"        avg( cast(cd1.cd_dep_count as decimal(12,2))) agg7\r\n",
					" from catalog_sales, customer_demographics cd1, \r\n",
					"      customer_demographics cd2, customer, customer_address, date_dim, item\r\n",
					" where cs_sold_date_sk = d_date_sk and\r\n",
					"       cs_item_sk = i_item_sk and\r\n",
					"       cs_bill_cdemo_sk = cd1.cd_demo_sk and\r\n",
					"       cs_bill_customer_sk = c_customer_sk and\r\n",
					"       cd1.cd_gender = 'F' and \r\n",
					"       cd1.cd_education_status = 'Unknown' and\r\n",
					"       c_current_cdemo_sk = cd2.cd_demo_sk and\r\n",
					"       c_current_addr_sk = ca_address_sk and\r\n",
					"       c_birth_month in (1,6,8,9,12,2) and\r\n",
					"       d_year = 1998 and\r\n",
					"       ca_state in ('MS','IN','ND'\r\n",
					"                   ,'OK','NM','VA','MS')\r\n",
					" group by rollup (i_item_id, ca_country, ca_state, ca_county)\r\n",
					" order by ca_country,\r\n",
					"        ca_state, \r\n",
					"        ca_county,\r\n",
					"\ti_item_id\r\n",
					"  limit 100;"
				],
				"execution_count": 19
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"--query19\r\n",
					"  select  i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,\r\n",
					" \tsum(ss_ext_sales_price) ext_price\r\n",
					" from date_dim, store_sales, item,customer,customer_address,store\r\n",
					" where d_date_sk = ss_sold_date_sk\r\n",
					"   and ss_item_sk = i_item_sk\r\n",
					"   and i_manager_id=8\r\n",
					"   and d_moy=11\r\n",
					"   and d_year=1998\r\n",
					"   and ss_customer_sk = c_customer_sk \r\n",
					"   and c_current_addr_sk = ca_address_sk\r\n",
					"   and substr(ca_zip,1,5) <> substr(s_zip,1,5) \r\n",
					"   and ss_store_sk = s_store_sk \r\n",
					" group by i_brand\r\n",
					"      ,i_brand_id\r\n",
					"      ,i_manufact_id\r\n",
					"      ,i_manufact\r\n",
					" order by ext_price desc\r\n",
					"         ,i_brand\r\n",
					"         ,i_brand_id\r\n",
					"         ,i_manufact_id\r\n",
					"         ,i_manufact\r\n",
					" limit 100 ;"
				],
				"execution_count": 20
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"--query20\r\n",
					"  select  i_item_id\r\n",
					"       ,i_item_desc \r\n",
					"       ,i_category \r\n",
					"       ,i_class \r\n",
					"       ,i_current_price\r\n",
					"       ,sum(cs_ext_sales_price) as itemrevenue \r\n",
					"       ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over\r\n",
					"           (partition by i_class) as revenueratio\r\n",
					" from\tcatalog_sales\r\n",
					"     ,item \r\n",
					"     ,date_dim\r\n",
					" where cs_item_sk = i_item_sk \r\n",
					"   and i_category in ('Sports', 'Books', 'Home')\r\n",
					"   and cs_sold_date_sk = d_date_sk\r\n",
					" and d_date between cast('1999-02-22' as date) \r\n",
					"                                and date_add(cast('1999-02-22' as date), 30)\r\n",
					" group by i_item_id\r\n",
					"         ,i_item_desc \r\n",
					"         ,i_category\r\n",
					"         ,i_class\r\n",
					"         ,i_current_price\r\n",
					" order by i_category\r\n",
					"         ,i_class\r\n",
					"         ,i_item_id\r\n",
					"         ,i_item_desc\r\n",
					"         ,revenueratio\r\n",
					" limit 100;"
				],
				"execution_count": 21
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"--query21\r\n",
					"  select  *\r\n",
					" from(select w_warehouse_name\r\n",
					"            ,i_item_id\r\n",
					"            ,sum(case when (cast(d_date as date) < cast ('2000-03-11' as date))\r\n",
					"\t                then inv_quantity_on_hand \r\n",
					"                      else 0 end) as inv_before\r\n",
					"            ,sum(case when (cast(d_date as date) >= cast ('2000-03-11' as date))\r\n",
					"                      then inv_quantity_on_hand \r\n",
					"                      else 0 end) as inv_after\r\n",
					"   from inventory\r\n",
					"       ,warehouse\r\n",
					"       ,item\r\n",
					"       ,date_dim\r\n",
					"   where i_current_price between 0.99 and 1.49\r\n",
					"     and i_item_sk          = inv_item_sk\r\n",
					"     and inv_warehouse_sk   = w_warehouse_sk\r\n",
					"     and inv_date_sk    = d_date_sk\r\n",
					"     and d_date between date_sub(cast ('2000-03-11' as date), 30 )\r\n",
					"                    and date_add(cast ('2000-03-11' as date), 30 )\r\n",
					"   group by w_warehouse_name, i_item_id) x\r\n",
					" where (case when inv_before > 0 \r\n",
					"             then inv_after / inv_before \r\n",
					"             else null\r\n",
					"             end) between 2.0/3.0 and 3.0/2.0\r\n",
					" order by w_warehouse_name\r\n",
					"         ,i_item_id\r\n",
					"  limit 100;"
				],
				"execution_count": 22
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"--query22\r\n",
					" select  i_product_name\r\n",
					"             ,i_brand\r\n",
					"             ,i_class\r\n",
					"             ,i_category\r\n",
					"             ,avg(inv_quantity_on_hand) qoh\r\n",
					"       from inventory\r\n",
					"           ,date_dim\r\n",
					"           ,item\r\n",
					"       where inv_date_sk=d_date_sk\r\n",
					"              and inv_item_sk=i_item_sk\r\n",
					"              and d_month_seq between 1200 and 1200 + 11\r\n",
					"       group by rollup(i_product_name\r\n",
					"                       ,i_brand\r\n",
					"                       ,i_class\r\n",
					"                       ,i_category)\r\n",
					"order by qoh, i_product_name, i_brand, i_class, i_category\r\n",
					" limit 100;"
				],
				"execution_count": 23
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"--query23\r\n",
					" with frequent_ss_items as \r\n",
					" (select substr(i_item_desc,1,30) itemdesc,i_item_sk item_sk,d_date solddate,count(*) cnt\r\n",
					"  from store_sales\r\n",
					"      ,date_dim \r\n",
					"      ,item\r\n",
					"  where ss_sold_date_sk = d_date_sk\r\n",
					"    and ss_item_sk = i_item_sk \r\n",
					"    and d_year in (2000,2000+1,2000+2,2000+3)\r\n",
					"  group by substr(i_item_desc,1,30),i_item_sk,d_date\r\n",
					"  having count(*) >4),\r\n",
					" max_store_sales as\r\n",
					" (select max(csales) tpcds_cmax \r\n",
					"  from (select c_customer_sk,sum(ss_quantity*ss_sales_price) csales\r\n",
					"        from store_sales\r\n",
					"            ,customer\r\n",
					"            ,date_dim \r\n",
					"        where ss_customer_sk = c_customer_sk\r\n",
					"         and ss_sold_date_sk = d_date_sk\r\n",
					"         and d_year in (2000,2000+1,2000+2,2000+3) \r\n",
					"        group by c_customer_sk)),\r\n",
					" best_ss_customer as\r\n",
					" (select c_customer_sk,sum(ss_quantity*ss_sales_price) ssales\r\n",
					"  from store_sales\r\n",
					"      ,customer\r\n",
					"  where ss_customer_sk = c_customer_sk\r\n",
					"  group by c_customer_sk\r\n",
					"  having sum(ss_quantity*ss_sales_price) > (50/100.0) * (select\r\n",
					"  *\r\n",
					"from\r\n",
					" max_store_sales))\r\n",
					"  select  sum(sales)\r\n",
					" from (select cs_quantity*cs_list_price sales\r\n",
					"       from catalog_sales\r\n",
					"           ,date_dim \r\n",
					"       where d_year = 2000 \r\n",
					"         and d_moy = 2 \r\n",
					"         and cs_sold_date_sk = d_date_sk \r\n",
					"         and cs_item_sk in (select item_sk from frequent_ss_items)\r\n",
					"         and cs_bill_customer_sk in (select c_customer_sk from best_ss_customer)\r\n",
					"      union all\r\n",
					"      select ws_quantity*ws_list_price sales\r\n",
					"       from web_sales \r\n",
					"           ,date_dim \r\n",
					"       where d_year = 2000 \r\n",
					"         and d_moy = 2 \r\n",
					"         and ws_sold_date_sk = d_date_sk \r\n",
					"         and ws_item_sk in (select item_sk from frequent_ss_items)\r\n",
					"         and ws_bill_customer_sk in (select c_customer_sk from best_ss_customer)) \r\n",
					"  limit 100; \r\n",
					" with frequent_ss_items as\r\n",
					" (select substr(i_item_desc,1,30) itemdesc,i_item_sk item_sk,d_date solddate,count(*) cnt\r\n",
					"  from store_sales\r\n",
					"      ,date_dim\r\n",
					"      ,item\r\n",
					"  where ss_sold_date_sk = d_date_sk\r\n",
					"    and ss_item_sk = i_item_sk\r\n",
					"    and d_year in (2000,2000 + 1,2000 + 2,2000 + 3)\r\n",
					"  group by substr(i_item_desc,1,30),i_item_sk,d_date\r\n",
					"  having count(*) >4),\r\n",
					" max_store_sales as\r\n",
					" (select max(csales) tpcds_cmax\r\n",
					"  from (select c_customer_sk,sum(ss_quantity*ss_sales_price) csales\r\n",
					"        from store_sales\r\n",
					"            ,customer\r\n",
					"            ,date_dim \r\n",
					"        where ss_customer_sk = c_customer_sk\r\n",
					"         and ss_sold_date_sk = d_date_sk\r\n",
					"         and d_year in (2000,2000+1,2000+2,2000+3)\r\n",
					"        group by c_customer_sk)),\r\n",
					" best_ss_customer as\r\n",
					" (select c_customer_sk,sum(ss_quantity*ss_sales_price) ssales\r\n",
					"  from store_sales\r\n",
					"      ,customer\r\n",
					"  where ss_customer_sk = c_customer_sk\r\n",
					"  group by c_customer_sk\r\n",
					"  having sum(ss_quantity*ss_sales_price) > (50/100.0) * (select\r\n",
					"  *\r\n",
					" from max_store_sales))\r\n",
					"  select  c_last_name,c_first_name,sales\r\n",
					" from (select c_last_name,c_first_name,sum(cs_quantity*cs_list_price) sales\r\n",
					"        from catalog_sales\r\n",
					"            ,customer\r\n",
					"            ,date_dim \r\n",
					"        where d_year = 2000 \r\n",
					"         and d_moy = 2 \r\n",
					"         and cs_sold_date_sk = d_date_sk \r\n",
					"         and cs_item_sk in (select item_sk from frequent_ss_items)\r\n",
					"         and cs_bill_customer_sk in (select c_customer_sk from best_ss_customer)\r\n",
					"         and cs_bill_customer_sk = c_customer_sk \r\n",
					"       group by c_last_name,c_first_name\r\n",
					"      union all\r\n",
					"      select c_last_name,c_first_name,sum(ws_quantity*ws_list_price) sales\r\n",
					"       from web_sales\r\n",
					"           ,customer\r\n",
					"           ,date_dim \r\n",
					"       where d_year = 2000 \r\n",
					"         and d_moy = 2 \r\n",
					"         and ws_sold_date_sk = d_date_sk \r\n",
					"         and ws_item_sk in (select item_sk from frequent_ss_items)\r\n",
					"         and ws_bill_customer_sk in (select c_customer_sk from best_ss_customer)\r\n",
					"         and ws_bill_customer_sk = c_customer_sk\r\n",
					"       group by c_last_name,c_first_name) \r\n",
					"     order by c_last_name,c_first_name,sales\r\n",
					"   limit 100;"
				],
				"execution_count": 24
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"--query24\r\n",
					"with ssales as\r\n",
					"(select c_last_name\r\n",
					"      ,c_first_name\r\n",
					"      ,s_store_name\r\n",
					"      ,ca_state\r\n",
					"      ,s_state\r\n",
					"      ,i_color\r\n",
					"      ,i_current_price\r\n",
					"      ,i_manager_id\r\n",
					"      ,i_units\r\n",
					"      ,i_size\r\n",
					"      ,sum(ss_net_paid) netpaid\r\n",
					"from store_sales\r\n",
					"    ,store_returns\r\n",
					"    ,store\r\n",
					"    ,item\r\n",
					"    ,customer\r\n",
					"    ,customer_address\r\n",
					"where ss_ticket_number = sr_ticket_number\r\n",
					"  and ss_item_sk = sr_item_sk\r\n",
					"  and ss_customer_sk = c_customer_sk\r\n",
					"  and ss_item_sk = i_item_sk\r\n",
					"  and ss_store_sk = s_store_sk\r\n",
					"  and c_current_addr_sk = ca_address_sk\r\n",
					"  and c_birth_country <> upper(ca_country)\r\n",
					"  and s_zip = ca_zip\r\n",
					"and s_market_id=8\r\n",
					"group by c_last_name\r\n",
					"        ,c_first_name\r\n",
					"        ,s_store_name\r\n",
					"        ,ca_state\r\n",
					"        ,s_state\r\n",
					"        ,i_color\r\n",
					"        ,i_current_price\r\n",
					"        ,i_manager_id\r\n",
					"        ,i_units\r\n",
					"        ,i_size)\r\n",
					"select c_last_name\r\n",
					"      ,c_first_name\r\n",
					"      ,s_store_name\r\n",
					"      ,sum(netpaid) paid\r\n",
					"from ssales\r\n",
					"where i_color = 'pale'\r\n",
					"group by c_last_name\r\n",
					"        ,c_first_name\r\n",
					"        ,s_store_name\r\n",
					"having sum(netpaid) > (select 0.05*avg(netpaid)\r\n",
					"                                 from ssales)\r\n",
					"order by c_last_name\r\n",
					"        ,c_first_name\r\n",
					"        ,s_store_name\r\n",
					";\r\n",
					"with ssales as\r\n",
					"(select c_last_name\r\n",
					"      ,c_first_name\r\n",
					"      ,s_store_name\r\n",
					"      ,ca_state\r\n",
					"      ,s_state\r\n",
					"      ,i_color\r\n",
					"      ,i_current_price\r\n",
					"      ,i_manager_id\r\n",
					"      ,i_units\r\n",
					"      ,i_size\r\n",
					"      ,sum(ss_net_paid) netpaid\r\n",
					"from store_sales\r\n",
					"    ,store_returns\r\n",
					"    ,store\r\n",
					"    ,item\r\n",
					"    ,customer\r\n",
					"    ,customer_address\r\n",
					"where ss_ticket_number = sr_ticket_number\r\n",
					"  and ss_item_sk = sr_item_sk\r\n",
					"  and ss_customer_sk = c_customer_sk\r\n",
					"  and ss_item_sk = i_item_sk\r\n",
					"  and ss_store_sk = s_store_sk\r\n",
					"  and c_current_addr_sk = ca_address_sk\r\n",
					"  and c_birth_country <> upper(ca_country)\r\n",
					"  and s_zip = ca_zip\r\n",
					"  and s_market_id = 8\r\n",
					"group by c_last_name\r\n",
					"        ,c_first_name\r\n",
					"        ,s_store_name\r\n",
					"        ,ca_state\r\n",
					"        ,s_state\r\n",
					"        ,i_color\r\n",
					"        ,i_current_price\r\n",
					"        ,i_manager_id\r\n",
					"        ,i_units\r\n",
					"        ,i_size)\r\n",
					"select c_last_name\r\n",
					"      ,c_first_name\r\n",
					"      ,s_store_name\r\n",
					"      ,sum(netpaid) paid\r\n",
					"from ssales\r\n",
					"where i_color = 'chiffon'\r\n",
					"group by c_last_name\r\n",
					"        ,c_first_name\r\n",
					"        ,s_store_name\r\n",
					"having sum(netpaid) > (select 0.05*avg(netpaid)\r\n",
					"                           from ssales)\r\n",
					"order by c_last_name\r\n",
					"        ,c_first_name\r\n",
					"        ,s_store_name;"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"--query25\r\n",
					"  select  \r\n",
					" i_item_id\r\n",
					" ,i_item_desc\r\n",
					" ,s_store_id\r\n",
					" ,s_store_name\r\n",
					" ,sum(ss_net_profit) as store_sales_profit\r\n",
					" ,sum(sr_net_loss) as store_returns_loss\r\n",
					" ,sum(cs_net_profit) as catalog_sales_profit\r\n",
					" from\r\n",
					" store_sales\r\n",
					" ,store_returns\r\n",
					" ,catalog_sales\r\n",
					" ,date_dim d1\r\n",
					" ,date_dim d2\r\n",
					" ,date_dim d3\r\n",
					" ,store\r\n",
					" ,item\r\n",
					" where\r\n",
					" d1.d_moy = 4\r\n",
					" and d1.d_year = 2001\r\n",
					" and d1.d_date_sk = ss_sold_date_sk\r\n",
					" and i_item_sk = ss_item_sk\r\n",
					" and s_store_sk = ss_store_sk\r\n",
					" and ss_customer_sk = sr_customer_sk\r\n",
					" and ss_item_sk = sr_item_sk\r\n",
					" and ss_ticket_number = sr_ticket_number\r\n",
					" and sr_returned_date_sk = d2.d_date_sk\r\n",
					" and d2.d_moy               between 4 and  10\r\n",
					" and d2.d_year              = 2001\r\n",
					" and sr_customer_sk = cs_bill_customer_sk\r\n",
					" and sr_item_sk = cs_item_sk\r\n",
					" and cs_sold_date_sk = d3.d_date_sk\r\n",
					" and d3.d_moy               between 4 and  10 \r\n",
					" and d3.d_year              = 2001\r\n",
					" group by\r\n",
					" i_item_id\r\n",
					" ,i_item_desc\r\n",
					" ,s_store_id\r\n",
					" ,s_store_name\r\n",
					" order by\r\n",
					" i_item_id\r\n",
					" ,i_item_desc\r\n",
					" ,s_store_id\r\n",
					" ,s_store_name\r\n",
					"  limit 100;"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"--query26\r\n",
					"  select  i_item_id, \r\n",
					"        avg(cs_quantity) agg1,\r\n",
					"        avg(cs_list_price) agg2,\r\n",
					"        avg(cs_coupon_amt) agg3,\r\n",
					"        avg(cs_sales_price) agg4 \r\n",
					" from catalog_sales, customer_demographics, date_dim, item, promotion\r\n",
					" where cs_sold_date_sk = d_date_sk and\r\n",
					"       cs_item_sk = i_item_sk and\r\n",
					"       cs_bill_cdemo_sk = cd_demo_sk and\r\n",
					"       cs_promo_sk = p_promo_sk and\r\n",
					"       cd_gender = 'M' and \r\n",
					"       cd_marital_status = 'S' and\r\n",
					"       cd_education_status = 'College' and\r\n",
					"       (p_channel_email = 'N' or p_channel_event = 'N') and\r\n",
					"       d_year = 2000 \r\n",
					" group by i_item_id\r\n",
					" order by i_item_id\r\n",
					"  limit 100;"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"--query27\r\n",
					"  select  i_item_id,\r\n",
					"        s_state, grouping(s_state) g_state,\r\n",
					"        avg(ss_quantity) agg1,\r\n",
					"        avg(ss_list_price) agg2,\r\n",
					"        avg(ss_coupon_amt) agg3,\r\n",
					"        avg(ss_sales_price) agg4\r\n",
					" from store_sales, customer_demographics, date_dim, store, item\r\n",
					" where ss_sold_date_sk = d_date_sk and\r\n",
					"       ss_item_sk = i_item_sk and\r\n",
					"       ss_store_sk = s_store_sk and\r\n",
					"       ss_cdemo_sk = cd_demo_sk and\r\n",
					"       cd_gender = 'M' and\r\n",
					"       cd_marital_status = 'S' and\r\n",
					"       cd_education_status = 'College' and\r\n",
					"       d_year = 2002 and\r\n",
					"       s_state in ('TN','TN', 'TN', 'TN', 'TN', 'TN')\r\n",
					" group by rollup (i_item_id, s_state)\r\n",
					" order by i_item_id\r\n",
					"         ,s_state\r\n",
					"  limit 100;"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"--query28\r\n",
					" select  *\r\n",
					"from (select avg(ss_list_price) B1_LP\r\n",
					"            ,count(ss_list_price) B1_CNT\r\n",
					"            ,count(distinct ss_list_price) B1_CNTD\r\n",
					"      from store_sales\r\n",
					"      where ss_quantity between 0 and 5\r\n",
					"        and (ss_list_price between 8 and 8+10 \r\n",
					"             or ss_coupon_amt between 459 and 459+1000\r\n",
					"             or ss_wholesale_cost between 57 and 57+20)) B1,\r\n",
					"     (select avg(ss_list_price) B2_LP\r\n",
					"            ,count(ss_list_price) B2_CNT\r\n",
					"            ,count(distinct ss_list_price) B2_CNTD\r\n",
					"      from store_sales\r\n",
					"      where ss_quantity between 6 and 10\r\n",
					"        and (ss_list_price between 90 and 90+10\r\n",
					"          or ss_coupon_amt between 2323 and 2323+1000\r\n",
					"          or ss_wholesale_cost between 31 and 31+20)) B2,\r\n",
					"     (select avg(ss_list_price) B3_LP\r\n",
					"            ,count(ss_list_price) B3_CNT\r\n",
					"            ,count(distinct ss_list_price) B3_CNTD\r\n",
					"      from store_sales\r\n",
					"      where ss_quantity between 11 and 15\r\n",
					"        and (ss_list_price between 142 and 142+10\r\n",
					"          or ss_coupon_amt between 12214 and 12214+1000\r\n",
					"          or ss_wholesale_cost between 79 and 79+20)) B3,\r\n",
					"     (select avg(ss_list_price) B4_LP\r\n",
					"            ,count(ss_list_price) B4_CNT\r\n",
					"            ,count(distinct ss_list_price) B4_CNTD\r\n",
					"      from store_sales\r\n",
					"      where ss_quantity between 16 and 20\r\n",
					"        and (ss_list_price between 135 and 135+10\r\n",
					"          or ss_coupon_amt between 6071 and 6071+1000\r\n",
					"          or ss_wholesale_cost between 38 and 38+20)) B4,\r\n",
					"     (select avg(ss_list_price) B5_LP\r\n",
					"            ,count(ss_list_price) B5_CNT\r\n",
					"            ,count(distinct ss_list_price) B5_CNTD\r\n",
					"      from store_sales\r\n",
					"      where ss_quantity between 21 and 25\r\n",
					"        and (ss_list_price between 122 and 122+10\r\n",
					"          or ss_coupon_amt between 836 and 836+1000\r\n",
					"          or ss_wholesale_cost between 17 and 17+20)) B5,\r\n",
					"     (select avg(ss_list_price) B6_LP\r\n",
					"            ,count(ss_list_price) B6_CNT\r\n",
					"            ,count(distinct ss_list_price) B6_CNTD\r\n",
					"      from store_sales\r\n",
					"      where ss_quantity between 26 and 30\r\n",
					"        and (ss_list_price between 154 and 154+10\r\n",
					"          or ss_coupon_amt between 7326 and 7326+1000\r\n",
					"          or ss_wholesale_cost between 7 and 7+20)) B6\r\n",
					" limit 100;"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"--query29\r\n",
					"  select   \r\n",
					"     i_item_id\r\n",
					"    ,i_item_desc\r\n",
					"    ,s_store_id\r\n",
					"    ,s_store_name\r\n",
					"    ,sum(ss_quantity)        as store_sales_quantity\r\n",
					"    ,sum(sr_return_quantity) as store_returns_quantity\r\n",
					"    ,sum(cs_quantity)        as catalog_sales_quantity\r\n",
					" from\r\n",
					"    store_sales\r\n",
					"   ,store_returns\r\n",
					"   ,catalog_sales\r\n",
					"   ,date_dim             d1\r\n",
					"   ,date_dim             d2\r\n",
					"   ,date_dim             d3\r\n",
					"   ,store\r\n",
					"   ,item\r\n",
					" where\r\n",
					"     d1.d_moy               = 9 \r\n",
					" and d1.d_year              = 1999\r\n",
					" and d1.d_date_sk           = ss_sold_date_sk\r\n",
					" and i_item_sk              = ss_item_sk\r\n",
					" and s_store_sk             = ss_store_sk\r\n",
					" and ss_customer_sk         = sr_customer_sk\r\n",
					" and ss_item_sk             = sr_item_sk\r\n",
					" and ss_ticket_number       = sr_ticket_number\r\n",
					" and sr_returned_date_sk    = d2.d_date_sk\r\n",
					" and d2.d_moy               between 9 and  9 + 3 \r\n",
					" and d2.d_year              = 1999\r\n",
					" and sr_customer_sk         = cs_bill_customer_sk\r\n",
					" and sr_item_sk             = cs_item_sk\r\n",
					" and cs_sold_date_sk        = d3.d_date_sk     \r\n",
					" and d3.d_year              in (1999,1999+1,1999+2)\r\n",
					" group by\r\n",
					"    i_item_id\r\n",
					"   ,i_item_desc\r\n",
					"   ,s_store_id\r\n",
					"   ,s_store_name\r\n",
					" order by\r\n",
					"    i_item_id \r\n",
					"   ,i_item_desc\r\n",
					"   ,s_store_id\r\n",
					"   ,s_store_name\r\n",
					"  limit 100;"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"--query30\r\n",
					" with customer_total_return as\r\n",
					" (select wr_returning_customer_sk as ctr_customer_sk\r\n",
					"        ,ca_state as ctr_state, \r\n",
					" \tsum(wr_return_amt) as ctr_total_return\r\n",
					" from web_returns\r\n",
					"     ,date_dim\r\n",
					"     ,customer_address\r\n",
					" where wr_returned_date_sk = d_date_sk \r\n",
					"   and d_year =2002\r\n",
					"   and wr_returning_addr_sk = ca_address_sk \r\n",
					" group by wr_returning_customer_sk\r\n",
					"         ,ca_state)\r\n",
					"  select  c_customer_id,c_salutation,c_first_name,c_last_name,c_preferred_cust_flag\r\n",
					"       ,c_birth_day,c_birth_month,c_birth_year,c_birth_country,c_login,c_email_address\r\n",
					"       ,c_last_review_date,ctr_total_return\r\n",
					" from customer_total_return ctr1\r\n",
					"     ,customer_address\r\n",
					"     ,customer\r\n",
					" where ctr1.ctr_total_return > (select avg(ctr_total_return)*1.2\r\n",
					" \t\t\t  from customer_total_return ctr2 \r\n",
					"                  \t  where ctr1.ctr_state = ctr2.ctr_state)\r\n",
					"       and ca_address_sk = c_current_addr_sk\r\n",
					"       and ca_state = 'GA'\r\n",
					"       and ctr1.ctr_customer_sk = c_customer_sk\r\n",
					" order by c_customer_id,c_salutation,c_first_name,c_last_name,c_preferred_cust_flag\r\n",
					"                  ,c_birth_day,c_birth_month,c_birth_year,c_birth_country,c_login,c_email_address\r\n",
					"                  ,c_last_review_date,ctr_total_return\r\n",
					" limit 100;"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"--query31\r\n",
					" with ss as\r\n",
					" (select ca_county,d_qoy, d_year,sum(ss_ext_sales_price) as store_sales\r\n",
					" from store_sales,date_dim,customer_address\r\n",
					" where ss_sold_date_sk = d_date_sk\r\n",
					"  and ss_addr_sk=ca_address_sk\r\n",
					" group by ca_county,d_qoy, d_year),\r\n",
					" ws as\r\n",
					" (select ca_county,d_qoy, d_year,sum(ws_ext_sales_price) as web_sales\r\n",
					" from web_sales,date_dim,customer_address\r\n",
					" where ws_sold_date_sk = d_date_sk\r\n",
					"  and ws_bill_addr_sk=ca_address_sk\r\n",
					" group by ca_county,d_qoy, d_year)\r\n",
					" select \r\n",
					"        ss1.ca_county\r\n",
					"       ,ss1.d_year\r\n",
					"       ,ws2.web_sales/ws1.web_sales web_q1_q2_increase\r\n",
					"       ,ss2.store_sales/ss1.store_sales store_q1_q2_increase\r\n",
					"       ,ws3.web_sales/ws2.web_sales web_q2_q3_increase\r\n",
					"       ,ss3.store_sales/ss2.store_sales store_q2_q3_increase\r\n",
					" from\r\n",
					"        ss ss1\r\n",
					"       ,ss ss2\r\n",
					"       ,ss ss3\r\n",
					"       ,ws ws1\r\n",
					"       ,ws ws2\r\n",
					"       ,ws ws3\r\n",
					" where\r\n",
					"    ss1.d_qoy = 1\r\n",
					"    and ss1.d_year = 2000\r\n",
					"    and ss1.ca_county = ss2.ca_county\r\n",
					"    and ss2.d_qoy = 2\r\n",
					"    and ss2.d_year = 2000\r\n",
					" and ss2.ca_county = ss3.ca_county\r\n",
					"    and ss3.d_qoy = 3\r\n",
					"    and ss3.d_year = 2000\r\n",
					"    and ss1.ca_county = ws1.ca_county\r\n",
					"    and ws1.d_qoy = 1\r\n",
					"    and ws1.d_year = 2000\r\n",
					"    and ws1.ca_county = ws2.ca_county\r\n",
					"    and ws2.d_qoy = 2\r\n",
					"    and ws2.d_year = 2000\r\n",
					"    and ws1.ca_county = ws3.ca_county\r\n",
					"    and ws3.d_qoy = 3\r\n",
					"    and ws3.d_year =2000\r\n",
					"    and case when ws1.web_sales > 0 then ws2.web_sales/ws1.web_sales else null end \r\n",
					"       > case when ss1.store_sales > 0 then ss2.store_sales/ss1.store_sales else null end\r\n",
					"    and case when ws2.web_sales > 0 then ws3.web_sales/ws2.web_sales else null end\r\n",
					"       > case when ss2.store_sales > 0 then ss3.store_sales/ss2.store_sales else null end\r\n",
					" order by ss1.ca_county;"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"--query32\r\n",
					"select  sum(cs_ext_discount_amt)  as excess_discount_amount\r\n",
					"from \r\n",
					"   catalog_sales \r\n",
					"   ,item \r\n",
					"   ,date_dim\r\n",
					"where\r\n",
					"i_manufact_id = 977\r\n",
					"and i_item_sk = cs_item_sk \r\n",
					"and d_date between '2000-01-27' and \r\n",
					"        date_add(cast('2000-01-27' as date), 90 )\r\n",
					"and d_date_sk = cs_sold_date_sk \r\n",
					"and cs_ext_discount_amt  \r\n",
					"     > ( \r\n",
					"         select \r\n",
					"            1.3 * avg(cs_ext_discount_amt) \r\n",
					"         from \r\n",
					"            catalog_sales \r\n",
					"           ,date_dim\r\n",
					"         where \r\n",
					"              cs_item_sk = i_item_sk \r\n",
					"          and d_date between '2000-01-27' and\r\n",
					"                             date_add(cast('2000-01-27' as date), 90 )\r\n",
					"          and d_date_sk = cs_sold_date_sk \r\n",
					"      ) \r\n",
					" limit 100;"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"--query33\r\n",
					" with ss as (\r\n",
					" select\r\n",
					"          i_manufact_id,sum(ss_ext_sales_price) total_sales\r\n",
					" from\r\n",
					" \tstore_sales,\r\n",
					" \tdate_dim,\r\n",
					"         customer_address,\r\n",
					"         item\r\n",
					" where\r\n",
					"         i_manufact_id in (select\r\n",
					"  i_manufact_id\r\n",
					"from\r\n",
					" item\r\n",
					"where i_category in ('Electronics'))\r\n",
					" and     ss_item_sk              = i_item_sk\r\n",
					" and     ss_sold_date_sk         = d_date_sk\r\n",
					" and     d_year                  = 1998\r\n",
					" and     d_moy                   = 5\r\n",
					" and     ss_addr_sk              = ca_address_sk\r\n",
					" and     ca_gmt_offset           = -5 \r\n",
					" group by i_manufact_id),\r\n",
					" cs as (\r\n",
					" select\r\n",
					"          i_manufact_id,sum(cs_ext_sales_price) total_sales\r\n",
					" from\r\n",
					" \tcatalog_sales,\r\n",
					" \tdate_dim,\r\n",
					"         customer_address,\r\n",
					"         item\r\n",
					" where\r\n",
					"         i_manufact_id               in (select\r\n",
					"  i_manufact_id\r\n",
					"from\r\n",
					" item\r\n",
					"where i_category in ('Electronics'))\r\n",
					" and     cs_item_sk              = i_item_sk\r\n",
					" and     cs_sold_date_sk         = d_date_sk\r\n",
					" and     d_year                  = 1998\r\n",
					" and     d_moy                   = 5\r\n",
					" and     cs_bill_addr_sk         = ca_address_sk\r\n",
					" and     ca_gmt_offset           = -5 \r\n",
					" group by i_manufact_id),\r\n",
					" ws as (\r\n",
					" select\r\n",
					"          i_manufact_id,sum(ws_ext_sales_price) total_sales\r\n",
					" from\r\n",
					" \tweb_sales,\r\n",
					" \tdate_dim,\r\n",
					"         customer_address,\r\n",
					"         item\r\n",
					" where\r\n",
					"         i_manufact_id               in (select\r\n",
					"  i_manufact_id\r\n",
					"from\r\n",
					" item\r\n",
					"where i_category in ('Electronics'))\r\n",
					" and     ws_item_sk              = i_item_sk\r\n",
					" and     ws_sold_date_sk         = d_date_sk\r\n",
					" and     d_year                  = 1998\r\n",
					" and     d_moy                   = 5\r\n",
					" and     ws_bill_addr_sk         = ca_address_sk\r\n",
					" and     ca_gmt_offset           = -5\r\n",
					" group by i_manufact_id)\r\n",
					"  select  i_manufact_id ,sum(total_sales) total_sales\r\n",
					" from  (select * from ss \r\n",
					"        union all\r\n",
					"        select * from cs \r\n",
					"        union all\r\n",
					"        select * from ws) tmp1\r\n",
					" group by i_manufact_id\r\n",
					" order by total_sales\r\n",
					" limit 100;\r\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"--query34\r\n",
					" select c_last_name\r\n",
					"       ,c_first_name\r\n",
					"       ,c_salutation\r\n",
					"       ,c_preferred_cust_flag\r\n",
					"       ,ss_ticket_number\r\n",
					"       ,cnt from\r\n",
					"   (select ss_ticket_number\r\n",
					"          ,ss_customer_sk\r\n",
					"          ,count(*) cnt\r\n",
					"    from store_sales,date_dim,store,household_demographics\r\n",
					"    where store_sales.ss_sold_date_sk = date_dim.d_date_sk\r\n",
					"    and store_sales.ss_store_sk = store.s_store_sk  \r\n",
					"    and store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk\r\n",
					"    and (date_dim.d_dom between 1 and 3 or date_dim.d_dom between 25 and 28)\r\n",
					"    and (household_demographics.hd_buy_potential = '>10000' or\r\n",
					"         household_demographics.hd_buy_potential = 'Unknown')\r\n",
					"    and household_demographics.hd_vehicle_count > 0\r\n",
					"    and (case when household_demographics.hd_vehicle_count > 0 \r\n",
					"\tthen household_demographics.hd_dep_count/ household_demographics.hd_vehicle_count \r\n",
					"\telse null \r\n",
					"\tend)  > 1.2\r\n",
					"    and date_dim.d_year in (1999,1999+1,1999+2)\r\n",
					"    and store.s_county in ('Williamson County','Williamson County','Williamson County','Williamson County',\r\n",
					"                           'Williamson County','Williamson County','Williamson County','Williamson County')\r\n",
					"    group by ss_ticket_number,ss_customer_sk) dn,customer\r\n",
					"    where ss_customer_sk = c_customer_sk\r\n",
					"      and cnt between 15 and 20\r\n",
					"    order by c_last_name,c_first_name,c_salutation,c_preferred_cust_flag desc, ss_ticket_number;"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"--query35\r\n",
					"  select   \r\n",
					"  ca_state,\r\n",
					"  cd_gender,\r\n",
					"  cd_marital_status,\r\n",
					"  cd_dep_count,\r\n",
					"  count(*) cnt1,\r\n",
					"  min(cd_dep_count),\r\n",
					"  max(cd_dep_count),\r\n",
					"  avg(cd_dep_count),\r\n",
					"  cd_dep_employed_count,\r\n",
					"  count(*) cnt2,\r\n",
					"  min(cd_dep_employed_count),\r\n",
					"  max(cd_dep_employed_count),\r\n",
					"  avg(cd_dep_employed_count),\r\n",
					"  cd_dep_college_count,\r\n",
					"  count(*) cnt3,\r\n",
					"  min(cd_dep_college_count),\r\n",
					"  max(cd_dep_college_count),\r\n",
					"  avg(cd_dep_college_count)\r\n",
					" from\r\n",
					"  customer c,customer_address ca,customer_demographics\r\n",
					" where\r\n",
					"  c.c_current_addr_sk = ca.ca_address_sk and\r\n",
					"  cd_demo_sk = c.c_current_cdemo_sk and \r\n",
					"  exists (select *\r\n",
					"          from store_sales,date_dim\r\n",
					"          where c.c_customer_sk = ss_customer_sk and\r\n",
					"                ss_sold_date_sk = d_date_sk and\r\n",
					"                d_year = 2002 and\r\n",
					"                d_qoy < 4) and\r\n",
					"   (exists (select *\r\n",
					"            from web_sales,date_dim\r\n",
					"            where c.c_customer_sk = ws_bill_customer_sk and\r\n",
					"                  ws_sold_date_sk = d_date_sk and\r\n",
					"                  d_year = 2002 and\r\n",
					"                  d_qoy < 4) or \r\n",
					"    exists (select * \r\n",
					"            from catalog_sales,date_dim\r\n",
					"            where c.c_customer_sk = cs_ship_customer_sk and\r\n",
					"                  cs_sold_date_sk = d_date_sk and\r\n",
					"                  d_year = 2002 and\r\n",
					"                  d_qoy < 4))\r\n",
					" group by ca_state,\r\n",
					"          cd_gender,\r\n",
					"          cd_marital_status,\r\n",
					"          cd_dep_count,\r\n",
					"          cd_dep_employed_count,\r\n",
					"          cd_dep_college_count\r\n",
					" order by ca_state,\r\n",
					"          cd_gender,\r\n",
					"          cd_marital_status,\r\n",
					"          cd_dep_count,\r\n",
					"          cd_dep_employed_count,\r\n",
					"          cd_dep_college_count\r\n",
					"  limit 100;"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"--query36\r\n",
					"  select  \r\n",
					"    sum(ss_net_profit)/sum(ss_ext_sales_price) as gross_margin\r\n",
					"   ,i_category\r\n",
					"   ,i_class\r\n",
					"   ,grouping(i_category)+grouping(i_class) as lochierarchy\r\n",
					"   ,rank() over (\r\n",
					" \tpartition by grouping(i_category)+grouping(i_class),\r\n",
					" \tcase when grouping(i_class) = 0 then i_category end \r\n",
					" \torder by sum(ss_net_profit)/sum(ss_ext_sales_price) asc) as rank_within_parent\r\n",
					" from\r\n",
					"    store_sales\r\n",
					"   ,date_dim       d1\r\n",
					"   ,item\r\n",
					"   ,store\r\n",
					" where\r\n",
					"    d1.d_year = 2001 \r\n",
					" and d1.d_date_sk = ss_sold_date_sk\r\n",
					" and i_item_sk  = ss_item_sk \r\n",
					" and s_store_sk  = ss_store_sk\r\n",
					" and s_state in ('TN','TN','TN','TN',\r\n",
					"                 'TN','TN','TN','TN')\r\n",
					" group by rollup(i_category,i_class)\r\n",
					" order by\r\n",
					"   lochierarchy desc\r\n",
					"  ,case when lochierarchy = 0 then i_category end\r\n",
					"  ,rank_within_parent\r\n",
					"   limit 100;"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"--query37\r\n",
					"  select  i_item_id\r\n",
					"       ,i_item_desc\r\n",
					"       ,i_current_price\r\n",
					" from item, inventory, date_dim, catalog_sales\r\n",
					" where i_current_price between 68 and 68 + 30\r\n",
					" and inv_item_sk = i_item_sk\r\n",
					" and d_date_sk=inv_date_sk\r\n",
					" and d_date between cast('2000-02-01' as date) and date_add(cast('2000-02-01' as date), 60 )\r\n",
					" and i_manufact_id in (677,940,694,808)\r\n",
					" and inv_quantity_on_hand between 100 and 500\r\n",
					" and cs_item_sk = i_item_sk\r\n",
					" group by i_item_id,i_item_desc,i_current_price\r\n",
					" order by i_item_id\r\n",
					"  limit 100;"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"--query38\r\n",
					" select  count(*) from (\r\n",
					"    select distinct c_last_name, c_first_name, d_date\r\n",
					"    from store_sales, date_dim, customer\r\n",
					"          where store_sales.ss_sold_date_sk = date_dim.d_date_sk\r\n",
					"      and store_sales.ss_customer_sk = customer.c_customer_sk\r\n",
					"      and d_month_seq between 1200 and 1200 + 11\r\n",
					"  intersect\r\n",
					"    select distinct c_last_name, c_first_name, d_date\r\n",
					"    from catalog_sales, date_dim, customer\r\n",
					"          where catalog_sales.cs_sold_date_sk = date_dim.d_date_sk\r\n",
					"      and catalog_sales.cs_bill_customer_sk = customer.c_customer_sk\r\n",
					"      and d_month_seq between 1200 and 1200 + 11\r\n",
					"  intersect\r\n",
					"    select distinct c_last_name, c_first_name, d_date\r\n",
					"    from web_sales, date_dim, customer\r\n",
					"          where web_sales.ws_sold_date_sk = date_dim.d_date_sk\r\n",
					"      and web_sales.ws_bill_customer_sk = customer.c_customer_sk\r\n",
					"      and d_month_seq between 1200 and 1200 + 11\r\n",
					") hot_cust\r\n",
					" limit 100;"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"--query39\r\n",
					"with inv as\r\n",
					"(select w_warehouse_name,w_warehouse_sk,i_item_sk,d_moy\r\n",
					"       ,stdev,mean, case mean when 0 then null else stdev/mean end cov\r\n",
					" from(select w_warehouse_name,w_warehouse_sk,i_item_sk,d_moy\r\n",
					"            ,stddev_samp(inv_quantity_on_hand) stdev,avg(inv_quantity_on_hand) mean\r\n",
					"      from inventory\r\n",
					"          ,item\r\n",
					"          ,warehouse\r\n",
					"          ,date_dim\r\n",
					"      where inv_item_sk = i_item_sk\r\n",
					"        and inv_warehouse_sk = w_warehouse_sk\r\n",
					"        and inv_date_sk = d_date_sk\r\n",
					"        and d_year =2001\r\n",
					"      group by w_warehouse_name,w_warehouse_sk,i_item_sk,d_moy) foo\r\n",
					" where case mean when 0 then 0 else stdev/mean end > 1)\r\n",
					"select inv1.w_warehouse_sk,inv1.i_item_sk,inv1.d_moy,inv1.mean, inv1.cov\r\n",
					"        ,inv2.w_warehouse_sk as w_warehouse_sk_2,inv2.i_item_sk as i_item_sk_2,inv2.d_moy as d_moy_2,inv2.mean as mean_2, inv2.cov as cov_2\r\n",
					"from inv inv1,inv inv2\r\n",
					"where inv1.i_item_sk = inv2.i_item_sk\r\n",
					"  and inv1.w_warehouse_sk =  inv2.w_warehouse_sk\r\n",
					"  and inv1.d_moy=1\r\n",
					"  and inv2.d_moy=1+1\r\n",
					"order by inv1.w_warehouse_sk,inv1.i_item_sk,inv1.d_moy,inv1.mean,inv1.cov\r\n",
					"        ,d_moy_2,mean_2, cov_2\r\n",
					";\r\n",
					"with inv as\r\n",
					"(select w_warehouse_name,w_warehouse_sk,i_item_sk,d_moy\r\n",
					"       ,stdev,mean, case mean when 0 then null else stdev/mean end cov\r\n",
					" from(select w_warehouse_name,w_warehouse_sk,i_item_sk,d_moy\r\n",
					"            ,stddev_samp(inv_quantity_on_hand) stdev,avg(inv_quantity_on_hand) mean\r\n",
					"      from inventory\r\n",
					"          ,item\r\n",
					"          ,warehouse\r\n",
					"          ,date_dim\r\n",
					"      where inv_item_sk = i_item_sk\r\n",
					"        and inv_warehouse_sk = w_warehouse_sk\r\n",
					"        and inv_date_sk = d_date_sk\r\n",
					"        and d_year =2001\r\n",
					"      group by w_warehouse_name,w_warehouse_sk,i_item_sk,d_moy) foo\r\n",
					" where case mean when 0 then 0 else stdev/mean end > 1)\r\n",
					"select inv1.w_warehouse_sk,inv1.i_item_sk,inv1.d_moy,inv1.mean, inv1.cov\r\n",
					"        ,inv2.w_warehouse_sk as w_warehouse_sk_2,inv2.i_item_sk as i_item_sk_2,inv2.d_moy as d_moy_2,inv2.mean as mean_2, inv2.cov as cov_2\r\n",
					"from inv inv1,inv inv2\r\n",
					"where inv1.i_item_sk = inv2.i_item_sk\r\n",
					"  and inv1.w_warehouse_sk =  inv2.w_warehouse_sk\r\n",
					"  and inv1.d_moy=1\r\n",
					"  and inv2.d_moy=1+1\r\n",
					"  and inv1.cov > 1.5\r\n",
					"order by inv1.w_warehouse_sk,inv1.i_item_sk,inv1.d_moy,inv1.mean,inv1.cov\r\n",
					"        ,d_moy_2,mean_2, cov_2;"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"--query40\r\n",
					"  select  \r\n",
					"   w_state\r\n",
					"  ,i_item_id\r\n",
					"  ,sum(case when (cast(d_date as date) < cast ('2000-03-11' as date)) \r\n",
					" \t\tthen cs_sales_price - coalesce(cr_refunded_cash,0) else 0 end) as sales_before\r\n",
					"  ,sum(case when (cast(d_date as date) >= cast ('2000-03-11' as date)) \r\n",
					" \t\tthen cs_sales_price - coalesce(cr_refunded_cash,0) else 0 end) as sales_after\r\n",
					" from\r\n",
					"   catalog_sales left outer join catalog_returns on\r\n",
					"       (cs_order_number = cr_order_number \r\n",
					"        and cs_item_sk = cr_item_sk)\r\n",
					"  ,warehouse \r\n",
					"  ,item\r\n",
					"  ,date_dim\r\n",
					" where\r\n",
					"     i_current_price between 0.99 and 1.49\r\n",
					" and i_item_sk          = cs_item_sk\r\n",
					" and cs_warehouse_sk    = w_warehouse_sk \r\n",
					" and cs_sold_date_sk    = d_date_sk\r\n",
					" and d_date between date_sub(cast ('2000-03-11' as date), 30 )\r\n",
					"                and date_add(cast ('2000-03-11' as date), 30 ) \r\n",
					" group by\r\n",
					"    w_state,i_item_id\r\n",
					" order by w_state,i_item_id\r\n",
					" limit 100;"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"--query41\r\n",
					"  select  distinct(i_product_name)\r\n",
					" from item i1\r\n",
					" where i_manufact_id between 738 and 738+40 \r\n",
					"   and (select count(*) as item_cnt\r\n",
					"        from item\r\n",
					"        where (i_manufact = i1.i_manufact and\r\n",
					"        ((i_category = 'Women' and \r\n",
					"        (i_color = 'powder' or i_color = 'khaki') and \r\n",
					"        (i_units = 'Ounce' or i_units = 'Oz') and\r\n",
					"        (i_size = 'medium' or i_size = 'extra large')\r\n",
					"        ) or\r\n",
					"        (i_category = 'Women' and\r\n",
					"        (i_color = 'brown' or i_color = 'honeydew') and\r\n",
					"        (i_units = 'Bunch' or i_units = 'Ton') and\r\n",
					"        (i_size = 'N/A' or i_size = 'small')\r\n",
					"        ) or\r\n",
					"        (i_category = 'Men' and\r\n",
					"        (i_color = 'floral' or i_color = 'deep') and\r\n",
					"        (i_units = 'N/A' or i_units = 'Dozen') and\r\n",
					"        (i_size = 'petite' or i_size = 'large')\r\n",
					"        ) or\r\n",
					"        (i_category = 'Men' and\r\n",
					"        (i_color = 'light' or i_color = 'cornflower') and\r\n",
					"        (i_units = 'Box' or i_units = 'Pound') and\r\n",
					"        (i_size = 'medium' or i_size = 'extra large')\r\n",
					"        ))) or\r\n",
					"       (i_manufact = i1.i_manufact and\r\n",
					"        ((i_category = 'Women' and \r\n",
					"        (i_color = 'midnight' or i_color = 'snow') and \r\n",
					"        (i_units = 'Pallet' or i_units = 'Gross') and\r\n",
					"        (i_size = 'medium' or i_size = 'extra large')\r\n",
					"        ) or\r\n",
					"        (i_category = 'Women' and\r\n",
					"        (i_color = 'cyan' or i_color = 'papaya') and\r\n",
					"        (i_units = 'Cup' or i_units = 'Dram') and\r\n",
					"        (i_size = 'N/A' or i_size = 'small')\r\n",
					"        ) or\r\n",
					"        (i_category = 'Men' and\r\n",
					"        (i_color = 'orange' or i_color = 'frosted') and\r\n",
					"        (i_units = 'Each' or i_units = 'Tbl') and\r\n",
					"        (i_size = 'petite' or i_size = 'large')\r\n",
					"        ) or\r\n",
					"        (i_category = 'Men' and\r\n",
					"        (i_color = 'forest' or i_color = 'ghost') and\r\n",
					"        (i_units = 'Lb' or i_units = 'Bundle') and\r\n",
					"        (i_size = 'medium' or i_size = 'extra large')\r\n",
					"        )))) > 0\r\n",
					" order by i_product_name\r\n",
					"  limit 100;"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"--query42\r\n",
					"  select  dt.d_year\r\n",
					" \t,item.i_category_id\r\n",
					" \t,item.i_category\r\n",
					" \t,sum(ss_ext_sales_price)\r\n",
					" from \tdate_dim dt\r\n",
					" \t,store_sales\r\n",
					" \t,item\r\n",
					" where dt.d_date_sk = store_sales.ss_sold_date_sk\r\n",
					" \tand store_sales.ss_item_sk = item.i_item_sk\r\n",
					" \tand item.i_manager_id = 1  \t\r\n",
					" \tand dt.d_moy=11\r\n",
					" \tand dt.d_year=2000\r\n",
					" group by \tdt.d_year\r\n",
					" \t\t,item.i_category_id\r\n",
					" \t\t,item.i_category\r\n",
					" order by       sum(ss_ext_sales_price) desc,dt.d_year\r\n",
					" \t\t,item.i_category_id\r\n",
					" \t\t,item.i_category\r\n",
					" limit 100 ;"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"--query43\r\n",
					"  select  s_store_name, s_store_id,\r\n",
					"        sum(case when (d_day_name='Sunday') then ss_sales_price else null end) sun_sales,\r\n",
					"        sum(case when (d_day_name='Monday') then ss_sales_price else null end) mon_sales,\r\n",
					"        sum(case when (d_day_name='Tuesday') then ss_sales_price else  null end) tue_sales,\r\n",
					"        sum(case when (d_day_name='Wednesday') then ss_sales_price else null end) wed_sales,\r\n",
					"        sum(case when (d_day_name='Thursday') then ss_sales_price else null end) thu_sales,\r\n",
					"        sum(case when (d_day_name='Friday') then ss_sales_price else null end) fri_sales,\r\n",
					"        sum(case when (d_day_name='Saturday') then ss_sales_price else null end) sat_sales\r\n",
					" from date_dim, store_sales, store\r\n",
					" where d_date_sk = ss_sold_date_sk and\r\n",
					"       s_store_sk = ss_store_sk and\r\n",
					"       s_gmt_offset = -5 and\r\n",
					"       d_year = 2000 \r\n",
					" group by s_store_name, s_store_id\r\n",
					" order by s_store_name, s_store_id,sun_sales,mon_sales,tue_sales,wed_sales,thu_sales,fri_sales,sat_sales\r\n",
					"  limit 100;"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"--query44\r\n",
					" select  asceding.rnk, i1.i_product_name best_performing, i2.i_product_name worst_performing\r\n",
					"from(select *\r\n",
					"     from (select item_sk,rank() over (order by rank_col asc) rnk\r\n",
					"           from (select ss_item_sk item_sk,avg(ss_net_profit) rank_col \r\n",
					"                 from store_sales ss1\r\n",
					"                 where ss_store_sk = 4\r\n",
					"                 group by ss_item_sk\r\n",
					"                 having avg(ss_net_profit) > 0.9*(select avg(ss_net_profit) rank_col\r\n",
					"                                                  from store_sales\r\n",
					"                                                  where ss_store_sk = 4\r\n",
					"                                                    and ss_addr_sk is null\r\n",
					"                                                  group by ss_store_sk))V1)V11\r\n",
					"     where rnk  < 11) asceding,\r\n",
					"    (select *\r\n",
					"     from (select item_sk,rank() over (order by rank_col desc) rnk\r\n",
					"           from (select ss_item_sk item_sk,avg(ss_net_profit) rank_col\r\n",
					"                 from store_sales ss1\r\n",
					"                 where ss_store_sk = 4\r\n",
					"                 group by ss_item_sk\r\n",
					"                 having avg(ss_net_profit) > 0.9*(select avg(ss_net_profit) rank_col\r\n",
					"                                                  from store_sales\r\n",
					"                                                  where ss_store_sk = 4\r\n",
					"                                                    and ss_addr_sk is null\r\n",
					"                                                  group by ss_store_sk))V2)V21\r\n",
					"     where rnk  < 11) descending,\r\n",
					"item i1,\r\n",
					"item i2\r\n",
					"where asceding.rnk = descending.rnk \r\n",
					"  and i1.i_item_sk=asceding.item_sk\r\n",
					"  and i2.i_item_sk=descending.item_sk\r\n",
					"order by asceding.rnk\r\n",
					" limit 100;"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"--query45\r\n",
					"  select  ca_zip, ca_city, sum(ws_sales_price)\r\n",
					" from web_sales, customer, customer_address, date_dim, item\r\n",
					" where ws_bill_customer_sk = c_customer_sk\r\n",
					" \tand c_current_addr_sk = ca_address_sk \r\n",
					" \tand ws_item_sk = i_item_sk \r\n",
					" \tand ( substr(ca_zip,1,5) in ('85669', '86197','88274','83405','86475', '85392', '85460', '80348', '81792')\r\n",
					" \t      or \r\n",
					" \t      i_item_id in (select i_item_id\r\n",
					"                             from item\r\n",
					"                             where i_item_sk in (2, 3, 5, 7, 11, 13, 17, 19, 23, 29)\r\n",
					"                             )\r\n",
					" \t    )\r\n",
					" \tand ws_sold_date_sk = d_date_sk\r\n",
					" \tand d_qoy = 2 and d_year = 2001\r\n",
					" group by ca_zip, ca_city\r\n",
					" order by ca_zip, ca_city\r\n",
					"  limit 100;"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"--query46\r\n",
					"  select  c_last_name\r\n",
					"       ,c_first_name\r\n",
					"       ,ca_city\r\n",
					"       ,bought_city\r\n",
					"       ,ss_ticket_number\r\n",
					"       ,amt,profit \r\n",
					" from\r\n",
					"   (select ss_ticket_number\r\n",
					"          ,ss_customer_sk\r\n",
					"          ,ca_city bought_city\r\n",
					"          ,sum(ss_coupon_amt) amt\r\n",
					"          ,sum(ss_net_profit) profit\r\n",
					"    from store_sales,date_dim,store,household_demographics,customer_address \r\n",
					"    where store_sales.ss_sold_date_sk = date_dim.d_date_sk\r\n",
					"    and store_sales.ss_store_sk = store.s_store_sk  \r\n",
					"    and store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk\r\n",
					"    and store_sales.ss_addr_sk = customer_address.ca_address_sk\r\n",
					"    and (household_demographics.hd_dep_count = 4 or\r\n",
					"         household_demographics.hd_vehicle_count= 3)\r\n",
					"    and date_dim.d_dow in (6,0)\r\n",
					"    and date_dim.d_year in (1999,1999+1,1999+2) \r\n",
					"    and store.s_city in ('Fairview','Midway','Fairview','Fairview','Fairview') \r\n",
					"    group by ss_ticket_number,ss_customer_sk,ss_addr_sk,ca_city) dn,customer,customer_address current_addr\r\n",
					"    where ss_customer_sk = c_customer_sk\r\n",
					"      and customer.c_current_addr_sk = current_addr.ca_address_sk\r\n",
					"      and current_addr.ca_city <> bought_city\r\n",
					"  order by c_last_name\r\n",
					"          ,c_first_name\r\n",
					"          ,ca_city\r\n",
					"          ,bought_city\r\n",
					"          ,ss_ticket_number\r\n",
					"   limit 100;"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"--query47\r\n",
					" with v1 as(\r\n",
					" select i_category, i_brand,\r\n",
					"        s_store_name, s_company_name,\r\n",
					"        d_year, d_moy,\r\n",
					"        sum(ss_sales_price) sum_sales,\r\n",
					"        avg(sum(ss_sales_price)) over\r\n",
					"          (partition by i_category, i_brand,\r\n",
					"                     s_store_name, s_company_name, d_year)\r\n",
					"          avg_monthly_sales,\r\n",
					"        rank() over\r\n",
					"          (partition by i_category, i_brand,\r\n",
					"                     s_store_name, s_company_name\r\n",
					"           order by d_year, d_moy) rn\r\n",
					" from item, store_sales, date_dim, store\r\n",
					" where ss_item_sk = i_item_sk and\r\n",
					"       ss_sold_date_sk = d_date_sk and\r\n",
					"       ss_store_sk = s_store_sk and\r\n",
					"       (\r\n",
					"         d_year = 1999 or\r\n",
					"         ( d_year = 1999-1 and d_moy =12) or\r\n",
					"         ( d_year = 1999+1 and d_moy =1)\r\n",
					"       )\r\n",
					" group by i_category, i_brand,\r\n",
					"          s_store_name, s_company_name,\r\n",
					"          d_year, d_moy),\r\n",
					" v2 as(\r\n",
					" select v1.i_category, v1.i_brand, v1.s_store_name, v1.s_company_name\r\n",
					"        ,v1.d_year, v1.d_moy\r\n",
					"        ,v1.avg_monthly_sales\r\n",
					"        ,v1.sum_sales, v1_lag.sum_sales psum, v1_lead.sum_sales nsum\r\n",
					" from v1, v1 v1_lag, v1 v1_lead\r\n",
					" where v1.i_category = v1_lag.i_category and\r\n",
					"       v1.i_category = v1_lead.i_category and\r\n",
					"       v1.i_brand = v1_lag.i_brand and\r\n",
					"       v1.i_brand = v1_lead.i_brand and\r\n",
					"       v1.s_store_name = v1_lag.s_store_name and\r\n",
					"       v1.s_store_name = v1_lead.s_store_name and\r\n",
					"       v1.s_company_name = v1_lag.s_company_name and\r\n",
					"       v1.s_company_name = v1_lead.s_company_name and\r\n",
					"       v1.rn = v1_lag.rn + 1 and\r\n",
					"       v1.rn = v1_lead.rn - 1)\r\n",
					"  select  *\r\n",
					" from v2\r\n",
					" where  d_year = 1999 and    \r\n",
					"        avg_monthly_sales > 0 and\r\n",
					"        case when avg_monthly_sales > 0 then abs(sum_sales - avg_monthly_sales) / avg_monthly_sales else null end > 0.1\r\n",
					" order by sum_sales - avg_monthly_sales, 3\r\n",
					"  limit 100;"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"--query48\r\n",
					" select sum (ss_quantity)\r\n",
					" from store_sales, store, customer_demographics, customer_address, date_dim\r\n",
					" where s_store_sk = ss_store_sk\r\n",
					" and  ss_sold_date_sk = d_date_sk and d_year = 2000\r\n",
					" and  \r\n",
					" (\r\n",
					"  (\r\n",
					"   cd_demo_sk = ss_cdemo_sk\r\n",
					"   and \r\n",
					"   cd_marital_status = 'M'\r\n",
					"   and \r\n",
					"   cd_education_status = '4 yr Degree'\r\n",
					"   and \r\n",
					"   ss_sales_price between 100.00 and 150.00  \r\n",
					"   )\r\n",
					" or\r\n",
					"  (\r\n",
					"  cd_demo_sk = ss_cdemo_sk\r\n",
					"   and \r\n",
					"   cd_marital_status = 'D'\r\n",
					"   and \r\n",
					"   cd_education_status = '2 yr Degree'\r\n",
					"   and \r\n",
					"   ss_sales_price between 50.00 and 100.00   \r\n",
					"  )\r\n",
					" or \r\n",
					" (\r\n",
					"  cd_demo_sk = ss_cdemo_sk\r\n",
					"  and \r\n",
					"   cd_marital_status = 'S'\r\n",
					"   and \r\n",
					"   cd_education_status = 'College'\r\n",
					"   and \r\n",
					"   ss_sales_price between 150.00 and 200.00  \r\n",
					" )\r\n",
					" )\r\n",
					" and\r\n",
					" (\r\n",
					"  (\r\n",
					"  ss_addr_sk = ca_address_sk\r\n",
					"  and\r\n",
					"  ca_country = 'United States'\r\n",
					"  and\r\n",
					"  ca_state in ('CO', 'OH', 'TX')\r\n",
					"  and ss_net_profit between 0 and 2000  \r\n",
					"  )\r\n",
					" or\r\n",
					"  (ss_addr_sk = ca_address_sk\r\n",
					"  and\r\n",
					"  ca_country = 'United States'\r\n",
					"  and\r\n",
					"  ca_state in ('OR', 'MN', 'KY')\r\n",
					"  and ss_net_profit between 150 and 3000 \r\n",
					"  )\r\n",
					" or\r\n",
					"  (ss_addr_sk = ca_address_sk\r\n",
					"  and\r\n",
					"  ca_country = 'United States'\r\n",
					"  and\r\n",
					"  ca_state in ('VA', 'CA', 'MS')\r\n",
					"  and ss_net_profit between 50 and 25000 \r\n",
					"  )\r\n",
					" );"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"--query49\r\n",
					"  select  \r\n",
					" 'web' as channel\r\n",
					" ,web.item\r\n",
					" ,web.return_ratio\r\n",
					" ,web.return_rank\r\n",
					" ,web.currency_rank\r\n",
					" from (\r\n",
					" \tselect \r\n",
					" \t item\r\n",
					" \t,return_ratio\r\n",
					" \t,currency_ratio\r\n",
					" \t,rank() over (order by return_ratio) as return_rank\r\n",
					" \t,rank() over (order by currency_ratio) as currency_rank\r\n",
					" \tfrom\r\n",
					" \t(\tselect ws.ws_item_sk as item\r\n",
					" \t\t,(cast(sum(coalesce(wr.wr_return_quantity,0)) as decimal(15,4))/\r\n",
					" \t\tcast(sum(coalesce(ws.ws_quantity,0)) as decimal(15,4) )) as return_ratio\r\n",
					" \t\t,(cast(sum(coalesce(wr.wr_return_amt,0)) as decimal(15,4))/\r\n",
					" \t\tcast(sum(coalesce(ws.ws_net_paid,0)) as decimal(15,4) )) as currency_ratio\r\n",
					" \t\tfrom \r\n",
					" \t\t web_sales ws left outer join web_returns wr \r\n",
					" \t\t\ton (ws.ws_order_number = wr.wr_order_number and \r\n",
					" \t\t\tws.ws_item_sk = wr.wr_item_sk)\r\n",
					"                 ,date_dim\r\n",
					" \t\twhere \r\n",
					" \t\t\twr.wr_return_amt > 10000 \r\n",
					" \t\t\tand ws.ws_net_profit > 1\r\n",
					"                         and ws.ws_net_paid > 0\r\n",
					"                         and ws.ws_quantity > 0\r\n",
					"                         and ws_sold_date_sk = d_date_sk\r\n",
					"                         and d_year = 2001\r\n",
					"                         and d_moy = 12\r\n",
					" \t\tgroup by ws.ws_item_sk\r\n",
					" \t) in_web\r\n",
					" ) web\r\n",
					" where \r\n",
					" (\r\n",
					" web.return_rank <= 10\r\n",
					" or\r\n",
					" web.currency_rank <= 10\r\n",
					" )\r\n",
					" union\r\n",
					" select \r\n",
					" 'catalog' as channel\r\n",
					" ,catalog.item\r\n",
					" ,catalog.return_ratio\r\n",
					" ,catalog.return_rank\r\n",
					" ,catalog.currency_rank\r\n",
					" from (\r\n",
					" \tselect \r\n",
					" \t item\r\n",
					" \t,return_ratio\r\n",
					" \t,currency_ratio\r\n",
					" \t,rank() over (order by return_ratio) as return_rank\r\n",
					" \t,rank() over (order by currency_ratio) as currency_rank\r\n",
					" \tfrom\r\n",
					" \t(\tselect \r\n",
					" \t\tcs.cs_item_sk as item\r\n",
					" \t\t,(cast(sum(coalesce(cr.cr_return_quantity,0)) as decimal(15,4))/\r\n",
					" \t\tcast(sum(coalesce(cs.cs_quantity,0)) as decimal(15,4) )) as return_ratio\r\n",
					" \t\t,(cast(sum(coalesce(cr.cr_return_amount,0)) as decimal(15,4))/\r\n",
					" \t\tcast(sum(coalesce(cs.cs_net_paid,0)) as decimal(15,4) )) as currency_ratio\r\n",
					" \t\tfrom \r\n",
					" \t\tcatalog_sales cs left outer join catalog_returns cr\r\n",
					" \t\t\ton (cs.cs_order_number = cr.cr_order_number and \r\n",
					" \t\t\tcs.cs_item_sk = cr.cr_item_sk)\r\n",
					"                ,date_dim\r\n",
					" \t\twhere \r\n",
					" \t\t\tcr.cr_return_amount > 10000 \r\n",
					" \t\t\tand cs.cs_net_profit > 1\r\n",
					"                         and cs.cs_net_paid > 0\r\n",
					"                         and cs.cs_quantity > 0\r\n",
					"                         and cs_sold_date_sk = d_date_sk\r\n",
					"                         and d_year = 2001\r\n",
					"                         and d_moy = 12\r\n",
					"                 group by cs.cs_item_sk\r\n",
					" \t) in_cat\r\n",
					" ) catalog\r\n",
					" where \r\n",
					" (\r\n",
					" catalog.return_rank <= 10\r\n",
					" or\r\n",
					" catalog.currency_rank <=10\r\n",
					" )\r\n",
					" union\r\n",
					" select \r\n",
					" 'store' as channel\r\n",
					" ,store.item\r\n",
					" ,store.return_ratio\r\n",
					" ,store.return_rank\r\n",
					" ,store.currency_rank\r\n",
					" from (\r\n",
					" \tselect \r\n",
					" \t item\r\n",
					" \t,return_ratio\r\n",
					" \t,currency_ratio\r\n",
					" \t,rank() over (order by return_ratio) as return_rank\r\n",
					" \t,rank() over (order by currency_ratio) as currency_rank\r\n",
					" \tfrom\r\n",
					" \t(\tselect sts.ss_item_sk as item\r\n",
					" \t\t,(cast(sum(coalesce(sr.sr_return_quantity,0)) as decimal(15,4))/cast(sum(coalesce(sts.ss_quantity,0)) as decimal(15,4) )) as return_ratio\r\n",
					" \t\t,(cast(sum(coalesce(sr.sr_return_amt,0)) as decimal(15,4))/cast(sum(coalesce(sts.ss_net_paid,0)) as decimal(15,4) )) as currency_ratio\r\n",
					" \t\tfrom \r\n",
					" \t\tstore_sales sts left outer join store_returns sr\r\n",
					" \t\t\ton (sts.ss_ticket_number = sr.sr_ticket_number and sts.ss_item_sk = sr.sr_item_sk)\r\n",
					"                ,date_dim\r\n",
					" \t\twhere \r\n",
					" \t\t\tsr.sr_return_amt > 10000 \r\n",
					" \t\t\tand sts.ss_net_profit > 1\r\n",
					"                         and sts.ss_net_paid > 0 \r\n",
					"                         and sts.ss_quantity > 0\r\n",
					"                         and ss_sold_date_sk = d_date_sk\r\n",
					"                         and d_year = 2001\r\n",
					"                         and d_moy = 12\r\n",
					" \t\tgroup by sts.ss_item_sk\r\n",
					" \t) in_store\r\n",
					" ) store\r\n",
					" where  (\r\n",
					" store.return_rank <= 10\r\n",
					" or \r\n",
					" store.currency_rank <= 10\r\n",
					" )\r\n",
					" order by 1,4,5\r\n",
					"  limit 100;"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"--query50\r\n",
					" select  \r\n",
					"   s_store_name\r\n",
					"  ,s_company_id\r\n",
					"  ,s_street_number\r\n",
					"  ,s_street_name\r\n",
					"  ,s_street_type\r\n",
					"  ,s_suite_number\r\n",
					"  ,s_city\r\n",
					"  ,s_county\r\n",
					"  ,s_state\r\n",
					"  ,s_zip\r\n",
					"  ,sum(case when (sr_returned_date_sk - ss_sold_date_sk <= 30 ) then 1 else 0 end)  as 30_days \r\n",
					"  ,sum(case when (sr_returned_date_sk - ss_sold_date_sk > 30) and \r\n",
					"                 (sr_returned_date_sk - ss_sold_date_sk <= 60) then 1 else 0 end )  as 31_60_days \r\n",
					"  ,sum(case when (sr_returned_date_sk - ss_sold_date_sk > 60) and \r\n",
					"                 (sr_returned_date_sk - ss_sold_date_sk <= 90) then 1 else 0 end)  as 61_90_days \r\n",
					"  ,sum(case when (sr_returned_date_sk - ss_sold_date_sk > 90) and\r\n",
					"                 (sr_returned_date_sk - ss_sold_date_sk <= 120) then 1 else 0 end)  as 91_120_days\r\n",
					"  ,sum(case when (sr_returned_date_sk - ss_sold_date_sk  > 120) then 1 else 0 end)  as above120_days\r\n",
					"from\r\n",
					"   store_sales\r\n",
					"  ,store_returns\r\n",
					"  ,store\r\n",
					"  ,date_dim d1\r\n",
					"  ,date_dim d2\r\n",
					"where\r\n",
					"    d2.d_year = 2001\r\n",
					"and d2.d_moy  = 8\r\n",
					"and ss_ticket_number = sr_ticket_number\r\n",
					"and ss_item_sk = sr_item_sk\r\n",
					"and ss_sold_date_sk   = d1.d_date_sk\r\n",
					"and sr_returned_date_sk   = d2.d_date_sk\r\n",
					"and ss_customer_sk = sr_customer_sk\r\n",
					"and ss_store_sk = s_store_sk\r\n",
					"group by\r\n",
					"   s_store_name\r\n",
					"  ,s_company_id\r\n",
					"  ,s_street_number\r\n",
					"  ,s_street_name\r\n",
					"  ,s_street_type\r\n",
					"  ,s_suite_number\r\n",
					"  ,s_city\r\n",
					"  ,s_county\r\n",
					"  ,s_state\r\n",
					"  ,s_zip\r\n",
					"order by s_store_name\r\n",
					"        ,s_company_id\r\n",
					"        ,s_street_number\r\n",
					"        ,s_street_name\r\n",
					"        ,s_street_type\r\n",
					"        ,s_suite_number\r\n",
					"        ,s_city\r\n",
					"        ,s_county\r\n",
					"        ,s_state\r\n",
					"        ,s_zip\r\n",
					" limit 100;"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"--query51\r\n",
					"WITH web_v1 as (\r\n",
					"select\r\n",
					"  ws_item_sk item_sk, d_date,\r\n",
					"  sum(sum(ws_sales_price))\r\n",
					"      over (partition by ws_item_sk order by d_date rows between unbounded preceding and current row) cume_sales\r\n",
					"from web_sales\r\n",
					"    ,date_dim\r\n",
					"where ws_sold_date_sk=d_date_sk\r\n",
					"  and d_month_seq between 1200 and 1200+11\r\n",
					"  and ws_item_sk is not NULL\r\n",
					"group by ws_item_sk, d_date),\r\n",
					"store_v1 as (\r\n",
					"select\r\n",
					"  ss_item_sk item_sk, d_date,\r\n",
					"  sum(sum(ss_sales_price))\r\n",
					"      over (partition by ss_item_sk order by d_date rows between unbounded preceding and current row) cume_sales\r\n",
					"from store_sales\r\n",
					"    ,date_dim\r\n",
					"where ss_sold_date_sk=d_date_sk\r\n",
					"  and d_month_seq between 1200 and 1200+11\r\n",
					"  and ss_item_sk is not NULL\r\n",
					"group by ss_item_sk, d_date)\r\n",
					" select  *\r\n",
					"from (select item_sk\r\n",
					"     ,d_date\r\n",
					"     ,web_sales\r\n",
					"     ,store_sales\r\n",
					"     ,max(web_sales)\r\n",
					"         over (partition by item_sk order by d_date rows between unbounded preceding and current row) web_cumulative\r\n",
					"     ,max(store_sales)\r\n",
					"         over (partition by item_sk order by d_date rows between unbounded preceding and current row) store_cumulative\r\n",
					"     from (select case when web.item_sk is not null then web.item_sk else store.item_sk end item_sk\r\n",
					"                 ,case when web.d_date is not null then web.d_date else store.d_date end d_date\r\n",
					"                 ,web.cume_sales web_sales\r\n",
					"                 ,store.cume_sales store_sales\r\n",
					"           from web_v1 web full outer join store_v1 store on (web.item_sk = store.item_sk\r\n",
					"                                                          and web.d_date = store.d_date)\r\n",
					"          )x )y\r\n",
					"where web_cumulative > store_cumulative\r\n",
					"order by item_sk\r\n",
					"        ,d_date\r\n",
					" limit 100;"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"--query52\r\n",
					"  select  dt.d_year\r\n",
					" \t,item.i_brand_id brand_id\r\n",
					" \t,item.i_brand brand\r\n",
					" \t,sum(ss_ext_sales_price) ext_price\r\n",
					" from date_dim dt\r\n",
					"     ,store_sales\r\n",
					"     ,item\r\n",
					" where dt.d_date_sk = store_sales.ss_sold_date_sk\r\n",
					"    and store_sales.ss_item_sk = item.i_item_sk\r\n",
					"    and item.i_manager_id = 1\r\n",
					"    and dt.d_moy=11\r\n",
					"    and dt.d_year=2000\r\n",
					" group by dt.d_year\r\n",
					" \t,item.i_brand\r\n",
					" \t,item.i_brand_id\r\n",
					" order by dt.d_year\r\n",
					" \t,ext_price desc\r\n",
					" \t,brand_id\r\n",
					" limit 100 ;"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"--query53\r\n",
					" select  * from \r\n",
					"(select i_manufact_id,\r\n",
					"sum(ss_sales_price) sum_sales,\r\n",
					"avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales\r\n",
					"from item, store_sales, date_dim, store\r\n",
					"where ss_item_sk = i_item_sk and\r\n",
					"ss_sold_date_sk = d_date_sk and\r\n",
					"ss_store_sk = s_store_sk and\r\n",
					"d_month_seq in (1200,1200+1,1200+2,1200+3,1200+4,1200+5,1200+6,1200+7,1200+8,1200+9,1200+10,1200+11) and\r\n",
					"((i_category in ('Books','Children','Electronics') and\r\n",
					"i_class in ('personal','portable','reference','self-help') and\r\n",
					"i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',\r\n",
					"\t\t'exportiunivamalg #9','scholaramalgamalg #9'))\r\n",
					"or(i_category in ('Women','Music','Men') and\r\n",
					"i_class in ('accessories','classical','fragrances','pants') and\r\n",
					"i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',\r\n",
					"\t\t'importoamalg #1')))\r\n",
					"group by i_manufact_id, d_qoy ) tmp1\r\n",
					"where case when avg_quarterly_sales > 0 \r\n",
					"\tthen abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales \r\n",
					"\telse null end > 0.1\r\n",
					"order by avg_quarterly_sales,\r\n",
					"\t sum_sales,\r\n",
					"\t i_manufact_id\r\n",
					" limit 100;"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"--query54\r\n",
					" with my_customers as (\r\n",
					" select distinct c_customer_sk\r\n",
					"        , c_current_addr_sk\r\n",
					" from   \r\n",
					"        ( select cs_sold_date_sk sold_date_sk,\r\n",
					"                 cs_bill_customer_sk customer_sk,\r\n",
					"                 cs_item_sk item_sk\r\n",
					"          from   catalog_sales\r\n",
					"          union all\r\n",
					"          select ws_sold_date_sk sold_date_sk,\r\n",
					"                 ws_bill_customer_sk customer_sk,\r\n",
					"                 ws_item_sk item_sk\r\n",
					"          from   web_sales\r\n",
					"         ) cs_or_ws_sales,\r\n",
					"         item,\r\n",
					"         date_dim,\r\n",
					"         customer\r\n",
					" where   sold_date_sk = d_date_sk\r\n",
					"         and item_sk = i_item_sk\r\n",
					"         and i_category = 'Women'\r\n",
					"         and i_class = 'maternity'\r\n",
					"         and c_customer_sk = cs_or_ws_sales.customer_sk\r\n",
					"         and d_moy = 12\r\n",
					"         and d_year = 1998\r\n",
					" )\r\n",
					" , my_revenue as (\r\n",
					" select c_customer_sk,\r\n",
					"        sum(ss_ext_sales_price) as revenue\r\n",
					" from   my_customers,\r\n",
					"        store_sales,\r\n",
					"        customer_address,\r\n",
					"        store,\r\n",
					"        date_dim\r\n",
					" where  c_current_addr_sk = ca_address_sk\r\n",
					"        and ca_county = s_county\r\n",
					"        and ca_state = s_state\r\n",
					"        and ss_sold_date_sk = d_date_sk\r\n",
					"        and c_customer_sk = ss_customer_sk\r\n",
					"        and d_month_seq between (select distinct d_month_seq+1\r\n",
					"                                 from   date_dim where d_year = 1998 and d_moy = 12)\r\n",
					"                           and  (select distinct d_month_seq+3\r\n",
					"                                 from   date_dim where d_year = 1998 and d_moy = 12)\r\n",
					" group by c_customer_sk\r\n",
					" )\r\n",
					" , segments as\r\n",
					" (select cast((revenue/50) as int) as segment\r\n",
					"  from   my_revenue\r\n",
					" )\r\n",
					"  select  segment, count(*) as num_customers, segment*50 as segment_base\r\n",
					" from segments\r\n",
					" group by segment\r\n",
					" order by segment, num_customers\r\n",
					"  limit 100;"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"--query55\r\n",
					"  select  i_brand_id brand_id, i_brand brand,\r\n",
					" \tsum(ss_ext_sales_price) ext_price\r\n",
					" from date_dim, store_sales, item\r\n",
					" where d_date_sk = ss_sold_date_sk\r\n",
					" \tand ss_item_sk = i_item_sk\r\n",
					" \tand i_manager_id=28\r\n",
					" \tand d_moy=11\r\n",
					" \tand d_year=1999\r\n",
					" group by i_brand, i_brand_id\r\n",
					" order by ext_price desc, i_brand_id\r\n",
					" limit 100 ;"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"--query56\r\n",
					" with ss as (\r\n",
					" select i_item_id,sum(ss_ext_sales_price) total_sales\r\n",
					" from\r\n",
					" \tstore_sales,\r\n",
					" \tdate_dim,\r\n",
					"         customer_address,\r\n",
					"         item\r\n",
					" where i_item_id in (select\r\n",
					"     i_item_id\r\n",
					"from item\r\n",
					"where i_color in ('slate','blanched','burnished'))\r\n",
					" and     ss_item_sk              = i_item_sk\r\n",
					" and     ss_sold_date_sk         = d_date_sk\r\n",
					" and     d_year                  = 2001\r\n",
					" and     d_moy                   = 2\r\n",
					" and     ss_addr_sk              = ca_address_sk\r\n",
					" and     ca_gmt_offset           = -5 \r\n",
					" group by i_item_id),\r\n",
					" cs as (\r\n",
					" select i_item_id,sum(cs_ext_sales_price) total_sales\r\n",
					" from\r\n",
					" \tcatalog_sales,\r\n",
					" \tdate_dim,\r\n",
					"         customer_address,\r\n",
					"         item\r\n",
					" where\r\n",
					"         i_item_id               in (select\r\n",
					"  i_item_id\r\n",
					"from item\r\n",
					"where i_color in ('slate','blanched','burnished'))\r\n",
					" and     cs_item_sk              = i_item_sk\r\n",
					" and     cs_sold_date_sk         = d_date_sk\r\n",
					" and     d_year                  = 2001\r\n",
					" and     d_moy                   = 2\r\n",
					" and     cs_bill_addr_sk         = ca_address_sk\r\n",
					" and     ca_gmt_offset           = -5 \r\n",
					" group by i_item_id),\r\n",
					" ws as (\r\n",
					" select i_item_id,sum(ws_ext_sales_price) total_sales\r\n",
					" from\r\n",
					" \tweb_sales,\r\n",
					" \tdate_dim,\r\n",
					"         customer_address,\r\n",
					"         item\r\n",
					" where\r\n",
					"         i_item_id               in (select\r\n",
					"  i_item_id\r\n",
					"from item\r\n",
					"where i_color in ('slate','blanched','burnished'))\r\n",
					" and     ws_item_sk              = i_item_sk\r\n",
					" and     ws_sold_date_sk         = d_date_sk\r\n",
					" and     d_year                  = 2001\r\n",
					" and     d_moy                   = 2\r\n",
					" and     ws_bill_addr_sk         = ca_address_sk\r\n",
					" and     ca_gmt_offset           = -5\r\n",
					" group by i_item_id)\r\n",
					"  select  i_item_id ,sum(total_sales) total_sales\r\n",
					" from  (select * from ss \r\n",
					"        union all\r\n",
					"        select * from cs \r\n",
					"        union all\r\n",
					"        select * from ws) tmp1\r\n",
					" group by i_item_id\r\n",
					" order by total_sales\r\n",
					"  limit 100;"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"--query57\r\n",
					" with v1 as(\r\n",
					" select i_category, i_brand,\r\n",
					"        cc_name,\r\n",
					"        d_year, d_moy,\r\n",
					"        sum(cs_sales_price) sum_sales,\r\n",
					"        avg(sum(cs_sales_price)) over\r\n",
					"          (partition by i_category, i_brand,\r\n",
					"                     cc_name, d_year)\r\n",
					"          avg_monthly_sales,\r\n",
					"        rank() over\r\n",
					"          (partition by i_category, i_brand,\r\n",
					"                     cc_name\r\n",
					"           order by d_year, d_moy) rn\r\n",
					" from item, catalog_sales, date_dim, call_center\r\n",
					" where cs_item_sk = i_item_sk and\r\n",
					"       cs_sold_date_sk = d_date_sk and\r\n",
					"       cc_call_center_sk= cs_call_center_sk and\r\n",
					"       (\r\n",
					"         d_year = 1999 or\r\n",
					"         ( d_year = 1999-1 and d_moy =12) or\r\n",
					"         ( d_year = 1999+1 and d_moy =1)\r\n",
					"       )\r\n",
					" group by i_category, i_brand,\r\n",
					"          cc_name , d_year, d_moy),\r\n",
					" v2 as(\r\n",
					" select v1.i_category, v1.i_brand, v1.cc_name\r\n",
					"        ,v1.d_year, v1.d_moy\r\n",
					"        ,v1.avg_monthly_sales\r\n",
					"        ,v1.sum_sales, v1_lag.sum_sales psum, v1_lead.sum_sales nsum\r\n",
					" from v1, v1 v1_lag, v1 v1_lead\r\n",
					" where v1.i_category = v1_lag.i_category and\r\n",
					"       v1.i_category = v1_lead.i_category and\r\n",
					"       v1.i_brand = v1_lag.i_brand and\r\n",
					"       v1.i_brand = v1_lead.i_brand and\r\n",
					"       v1. cc_name = v1_lag. cc_name and\r\n",
					"       v1. cc_name = v1_lead. cc_name and\r\n",
					"       v1.rn = v1_lag.rn + 1 and\r\n",
					"       v1.rn = v1_lead.rn - 1)\r\n",
					"  select  *\r\n",
					" from v2\r\n",
					" where  d_year = 1999 and\r\n",
					"        avg_monthly_sales > 0 and\r\n",
					"        case when avg_monthly_sales > 0 then abs(sum_sales - avg_monthly_sales) / avg_monthly_sales else null end > 0.1\r\n",
					" order by sum_sales - avg_monthly_sales, 3\r\n",
					"  limit 100;"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"--query58\r\n",
					" with ss_items as\r\n",
					" (select i_item_id item_id\r\n",
					"        ,sum(ss_ext_sales_price) ss_item_rev \r\n",
					" from store_sales\r\n",
					"     ,item\r\n",
					"     ,date_dim\r\n",
					" where ss_item_sk = i_item_sk\r\n",
					"   and d_date in (select d_date\r\n",
					"                  from date_dim\r\n",
					"                  where d_week_seq = (select d_week_seq \r\n",
					"                                      from date_dim\r\n",
					"                                      where d_date = '2000-01-03'))\r\n",
					"   and ss_sold_date_sk   = d_date_sk\r\n",
					" group by i_item_id),\r\n",
					" cs_items as\r\n",
					" (select i_item_id item_id\r\n",
					"        ,sum(cs_ext_sales_price) cs_item_rev\r\n",
					"  from catalog_sales\r\n",
					"      ,item\r\n",
					"      ,date_dim\r\n",
					" where cs_item_sk = i_item_sk\r\n",
					"  and  d_date in (select d_date\r\n",
					"                  from date_dim\r\n",
					"                  where d_week_seq = (select d_week_seq \r\n",
					"                                      from date_dim\r\n",
					"                                      where d_date = '2000-01-03'))\r\n",
					"  and  cs_sold_date_sk = d_date_sk\r\n",
					" group by i_item_id),\r\n",
					" ws_items as\r\n",
					" (select i_item_id item_id\r\n",
					"        ,sum(ws_ext_sales_price) ws_item_rev\r\n",
					"  from web_sales\r\n",
					"      ,item\r\n",
					"      ,date_dim\r\n",
					" where ws_item_sk = i_item_sk\r\n",
					"  and  d_date in (select d_date\r\n",
					"                  from date_dim\r\n",
					"                  where d_week_seq =(select d_week_seq \r\n",
					"                                     from date_dim\r\n",
					"                                     where d_date = '2000-01-03'))\r\n",
					"  and ws_sold_date_sk   = d_date_sk\r\n",
					" group by i_item_id)\r\n",
					"  select  ss_items.item_id\r\n",
					"       ,ss_item_rev\r\n",
					"       ,ss_item_rev/((ss_item_rev+cs_item_rev+ws_item_rev)/3) * 100 ss_dev\r\n",
					"       ,cs_item_rev\r\n",
					"       ,cs_item_rev/((ss_item_rev+cs_item_rev+ws_item_rev)/3) * 100 cs_dev\r\n",
					"       ,ws_item_rev\r\n",
					"       ,ws_item_rev/((ss_item_rev+cs_item_rev+ws_item_rev)/3) * 100 ws_dev\r\n",
					"       ,(ss_item_rev+cs_item_rev+ws_item_rev)/3 average\r\n",
					" from ss_items,cs_items,ws_items\r\n",
					" where ss_items.item_id=cs_items.item_id\r\n",
					"   and ss_items.item_id=ws_items.item_id \r\n",
					"   and ss_item_rev between 0.9 * cs_item_rev and 1.1 * cs_item_rev\r\n",
					"   and ss_item_rev between 0.9 * ws_item_rev and 1.1 * ws_item_rev\r\n",
					"   and cs_item_rev between 0.9 * ss_item_rev and 1.1 * ss_item_rev\r\n",
					"   and cs_item_rev between 0.9 * ws_item_rev and 1.1 * ws_item_rev\r\n",
					"   and ws_item_rev between 0.9 * ss_item_rev and 1.1 * ss_item_rev\r\n",
					"   and ws_item_rev between 0.9 * cs_item_rev and 1.1 * cs_item_rev\r\n",
					" order by item_id\r\n",
					"         ,ss_item_rev\r\n",
					"  limit 100;"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"--query59\r\n",
					" with wss as \r\n",
					" (select d_week_seq,\r\n",
					"        ss_store_sk,\r\n",
					"        sum(case when (d_day_name='Sunday') then ss_sales_price else null end) sun_sales,\r\n",
					"        sum(case when (d_day_name='Monday') then ss_sales_price else null end) mon_sales,\r\n",
					"        sum(case when (d_day_name='Tuesday') then ss_sales_price else  null end) tue_sales,\r\n",
					"        sum(case when (d_day_name='Wednesday') then ss_sales_price else null end) wed_sales,\r\n",
					"        sum(case when (d_day_name='Thursday') then ss_sales_price else null end) thu_sales,\r\n",
					"        sum(case when (d_day_name='Friday') then ss_sales_price else null end) fri_sales,\r\n",
					"        sum(case when (d_day_name='Saturday') then ss_sales_price else null end) sat_sales\r\n",
					" from store_sales,date_dim\r\n",
					" where d_date_sk = ss_sold_date_sk\r\n",
					" group by d_week_seq,ss_store_sk\r\n",
					" )\r\n",
					"  select  s_store_name1,s_store_id1,d_week_seq1\r\n",
					"       ,sun_sales1/sun_sales2,mon_sales1/mon_sales2\r\n",
					"       ,tue_sales1/tue_sales2,wed_sales1/wed_sales2,thu_sales1/thu_sales2\r\n",
					"       ,fri_sales1/fri_sales2,sat_sales1/sat_sales2\r\n",
					" from\r\n",
					" (select s_store_name s_store_name1,wss.d_week_seq d_week_seq1\r\n",
					"        ,s_store_id s_store_id1,sun_sales sun_sales1\r\n",
					"        ,mon_sales mon_sales1,tue_sales tue_sales1\r\n",
					"        ,wed_sales wed_sales1,thu_sales thu_sales1\r\n",
					"        ,fri_sales fri_sales1,sat_sales sat_sales1\r\n",
					"  from wss,store,date_dim d\r\n",
					"  where d.d_week_seq = wss.d_week_seq and\r\n",
					"        ss_store_sk = s_store_sk and \r\n",
					"        d_month_seq between 1212 and 1212 + 11) y,\r\n",
					" (select s_store_name s_store_name2,wss.d_week_seq d_week_seq2\r\n",
					"        ,s_store_id s_store_id2,sun_sales sun_sales2\r\n",
					"        ,mon_sales mon_sales2,tue_sales tue_sales2\r\n",
					"        ,wed_sales wed_sales2,thu_sales thu_sales2\r\n",
					"        ,fri_sales fri_sales2,sat_sales sat_sales2\r\n",
					"  from wss,store,date_dim d\r\n",
					"  where d.d_week_seq = wss.d_week_seq and\r\n",
					"        ss_store_sk = s_store_sk and \r\n",
					"        d_month_seq between 1212+ 12 and 1212 + 23) x\r\n",
					" where s_store_id1=s_store_id2\r\n",
					"   and d_week_seq1=d_week_seq2-52\r\n",
					" order by s_store_name1,s_store_id1,d_week_seq1\r\n",
					" limit 100;"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"--query60\r\n",
					" with ss as (\r\n",
					" select\r\n",
					"          i_item_id,sum(ss_ext_sales_price) total_sales\r\n",
					" from\r\n",
					" \tstore_sales,\r\n",
					" \tdate_dim,\r\n",
					"         customer_address,\r\n",
					"         item\r\n",
					" where\r\n",
					"         i_item_id in (select\r\n",
					"  i_item_id\r\n",
					"from\r\n",
					" item\r\n",
					"where i_category in ('Music'))\r\n",
					" and     ss_item_sk              = i_item_sk\r\n",
					" and     ss_sold_date_sk         = d_date_sk\r\n",
					" and     d_year                  = 1998\r\n",
					" and     d_moy                   = 9\r\n",
					" and     ss_addr_sk              = ca_address_sk\r\n",
					" and     ca_gmt_offset           = -5 \r\n",
					" group by i_item_id),\r\n",
					" cs as (\r\n",
					" select\r\n",
					"          i_item_id,sum(cs_ext_sales_price) total_sales\r\n",
					" from\r\n",
					" \tcatalog_sales,\r\n",
					" \tdate_dim,\r\n",
					"         customer_address,\r\n",
					"         item\r\n",
					" where\r\n",
					"         i_item_id               in (select\r\n",
					"  i_item_id\r\n",
					"from\r\n",
					" item\r\n",
					"where i_category in ('Music'))\r\n",
					" and     cs_item_sk              = i_item_sk\r\n",
					" and     cs_sold_date_sk         = d_date_sk\r\n",
					" and     d_year                  = 1998\r\n",
					" and     d_moy                   = 9\r\n",
					" and     cs_bill_addr_sk         = ca_address_sk\r\n",
					" and     ca_gmt_offset           = -5 \r\n",
					" group by i_item_id),\r\n",
					" ws as (\r\n",
					" select\r\n",
					"          i_item_id,sum(ws_ext_sales_price) total_sales\r\n",
					" from\r\n",
					" \tweb_sales,\r\n",
					" \tdate_dim,\r\n",
					"         customer_address,\r\n",
					"         item\r\n",
					" where\r\n",
					"         i_item_id               in (select\r\n",
					"  i_item_id\r\n",
					"from\r\n",
					" item\r\n",
					"where i_category in ('Music'))\r\n",
					" and     ws_item_sk              = i_item_sk\r\n",
					" and     ws_sold_date_sk         = d_date_sk\r\n",
					" and     d_year                  = 1998\r\n",
					" and     d_moy                   = 9\r\n",
					" and     ws_bill_addr_sk         = ca_address_sk\r\n",
					" and     ca_gmt_offset           = -5\r\n",
					" group by i_item_id)\r\n",
					"  select   \r\n",
					"  i_item_id\r\n",
					",sum(total_sales) total_sales\r\n",
					" from  (select * from ss \r\n",
					"        union all\r\n",
					"        select * from cs \r\n",
					"        union all\r\n",
					"        select * from ws) tmp1\r\n",
					" group by i_item_id\r\n",
					" order by i_item_id\r\n",
					"      ,total_sales\r\n",
					"  limit 100;"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"--query61\r\n",
					" select  promotions,total,cast(promotions as decimal(15,4))/cast(total as decimal(15,4))*100\r\n",
					"from\r\n",
					"  (select sum(ss_ext_sales_price) promotions\r\n",
					"   from  store_sales\r\n",
					"        ,store\r\n",
					"        ,promotion\r\n",
					"        ,date_dim\r\n",
					"        ,customer\r\n",
					"        ,customer_address \r\n",
					"        ,item\r\n",
					"   where ss_sold_date_sk = d_date_sk\r\n",
					"   and   ss_store_sk = s_store_sk\r\n",
					"   and   ss_promo_sk = p_promo_sk\r\n",
					"   and   ss_customer_sk= c_customer_sk\r\n",
					"   and   ca_address_sk = c_current_addr_sk\r\n",
					"   and   ss_item_sk = i_item_sk \r\n",
					"   and   ca_gmt_offset = -5\r\n",
					"   and   i_category = 'Jewelry'\r\n",
					"   and   (p_channel_dmail = 'Y' or p_channel_email = 'Y' or p_channel_tv = 'Y')\r\n",
					"   and   s_gmt_offset = -5\r\n",
					"   and   d_year = 1998\r\n",
					"   and   d_moy  = 11) promotional_sales,\r\n",
					"  (select sum(ss_ext_sales_price) total\r\n",
					"   from  store_sales\r\n",
					"        ,store\r\n",
					"        ,date_dim\r\n",
					"        ,customer\r\n",
					"        ,customer_address\r\n",
					"        ,item\r\n",
					"   where ss_sold_date_sk = d_date_sk\r\n",
					"   and   ss_store_sk = s_store_sk\r\n",
					"   and   ss_customer_sk= c_customer_sk\r\n",
					"   and   ca_address_sk = c_current_addr_sk\r\n",
					"   and   ss_item_sk = i_item_sk\r\n",
					"   and   ca_gmt_offset = -5\r\n",
					"   and   i_category = 'Jewelry'\r\n",
					"   and   s_gmt_offset = -5\r\n",
					"   and   d_year = 1998\r\n",
					"   and   d_moy  = 11) all_sales\r\n",
					"order by promotions, total\r\n",
					" limit 100;"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"--query62\r\n",
					" select  \r\n",
					"   substr(w_warehouse_name,1,20)\r\n",
					"  ,sm_type\r\n",
					"  ,web_name\r\n",
					"  ,sum(case when (ws_ship_date_sk - ws_sold_date_sk <= 30 ) then 1 else 0 end)  as 30_days \r\n",
					"  ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 30) and \r\n",
					"                 (ws_ship_date_sk - ws_sold_date_sk <= 60) then 1 else 0 end )  as 31_60_days \r\n",
					"  ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 60) and \r\n",
					"                 (ws_ship_date_sk - ws_sold_date_sk <= 90) then 1 else 0 end)  as 61_90_days \r\n",
					"  ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 90) and\r\n",
					"                 (ws_ship_date_sk - ws_sold_date_sk <= 120) then 1 else 0 end)  as 91_120_days\r\n",
					"  ,sum(case when (ws_ship_date_sk - ws_sold_date_sk  > 120) then 1 else 0 end)  as above120_days\r\n",
					"from\r\n",
					"   web_sales\r\n",
					"  ,warehouse\r\n",
					"  ,ship_mode\r\n",
					"  ,web_site\r\n",
					"  ,date_dim\r\n",
					"where\r\n",
					"    d_month_seq between 1200 and 1200 + 11\r\n",
					"and ws_ship_date_sk   = d_date_sk\r\n",
					"and ws_warehouse_sk   = w_warehouse_sk\r\n",
					"and ws_ship_mode_sk   = sm_ship_mode_sk\r\n",
					"and ws_web_site_sk    = web_site_sk\r\n",
					"group by\r\n",
					"   substr(w_warehouse_name,1,20)\r\n",
					"  ,sm_type\r\n",
					"  ,web_name\r\n",
					"order by substr(w_warehouse_name,1,20)\r\n",
					"        ,sm_type\r\n",
					"       ,web_name\r\n",
					" limit 100;"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"--query63\r\n",
					" select  * \r\n",
					"from (select i_manager_id\r\n",
					"             ,sum(ss_sales_price) sum_sales\r\n",
					"             ,avg(sum(ss_sales_price)) over (partition by i_manager_id) avg_monthly_sales\r\n",
					"      from item\r\n",
					"          ,store_sales\r\n",
					"          ,date_dim\r\n",
					"          ,store\r\n",
					"      where ss_item_sk = i_item_sk\r\n",
					"        and ss_sold_date_sk = d_date_sk\r\n",
					"        and ss_store_sk = s_store_sk\r\n",
					"        and d_month_seq in (1200,1200+1,1200+2,1200+3,1200+4,1200+5,1200+6,1200+7,1200+8,1200+9,1200+10,1200+11)\r\n",
					"        and ((    i_category in ('Books','Children','Electronics')\r\n",
					"              and i_class in ('personal','portable','reference','self-help')\r\n",
					"              and i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',\r\n",
					"\t\t                  'exportiunivamalg #9','scholaramalgamalg #9'))\r\n",
					"           or(    i_category in ('Women','Music','Men')\r\n",
					"              and i_class in ('accessories','classical','fragrances','pants')\r\n",
					"              and i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',\r\n",
					"\t\t                 'importoamalg #1')))\r\n",
					"group by i_manager_id, d_moy) tmp1\r\n",
					"where case when avg_monthly_sales > 0 then abs (sum_sales - avg_monthly_sales) / avg_monthly_sales else null end > 0.1\r\n",
					"order by i_manager_id\r\n",
					"        ,avg_monthly_sales\r\n",
					"        ,sum_sales\r\n",
					" limit 100;"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"--query64\r\n",
					"with cs_ui as\r\n",
					" (select cs_item_sk\r\n",
					"        ,sum(cs_ext_list_price) as sale,sum(cr_refunded_cash+cr_reversed_charge+cr_store_credit) as refund\r\n",
					"  from catalog_sales\r\n",
					"      ,catalog_returns\r\n",
					"  where cs_item_sk = cr_item_sk\r\n",
					"    and cs_order_number = cr_order_number\r\n",
					"  group by cs_item_sk\r\n",
					"  having sum(cs_ext_list_price)>2*sum(cr_refunded_cash+cr_reversed_charge+cr_store_credit)),\r\n",
					"cross_sales as\r\n",
					" (select i_product_name product_name\r\n",
					"     ,i_item_sk item_sk\r\n",
					"     ,s_store_name store_name\r\n",
					"     ,s_zip store_zip\r\n",
					"     ,ad1.ca_street_number b_street_number\r\n",
					"     ,ad1.ca_street_name b_street_name\r\n",
					"     ,ad1.ca_city b_city\r\n",
					"     ,ad1.ca_zip b_zip\r\n",
					"     ,ad2.ca_street_number c_street_number\r\n",
					"     ,ad2.ca_street_name c_street_name\r\n",
					"     ,ad2.ca_city c_city\r\n",
					"     ,ad2.ca_zip c_zip\r\n",
					"     ,d1.d_year as syear\r\n",
					"     ,d2.d_year as fsyear\r\n",
					"     ,d3.d_year s2year\r\n",
					"     ,count(*) cnt\r\n",
					"     ,sum(ss_wholesale_cost) s1\r\n",
					"     ,sum(ss_list_price) s2\r\n",
					"     ,sum(ss_coupon_amt) s3\r\n",
					"  FROM   store_sales\r\n",
					"        ,store_returns\r\n",
					"        ,cs_ui\r\n",
					"        ,date_dim d1\r\n",
					"        ,date_dim d2\r\n",
					"        ,date_dim d3\r\n",
					"        ,store\r\n",
					"        ,customer\r\n",
					"        ,customer_demographics cd1\r\n",
					"        ,customer_demographics cd2\r\n",
					"        ,promotion\r\n",
					"        ,household_demographics hd1\r\n",
					"        ,household_demographics hd2\r\n",
					"        ,customer_address ad1\r\n",
					"        ,customer_address ad2\r\n",
					"        ,income_band ib1\r\n",
					"        ,income_band ib2\r\n",
					"        ,item\r\n",
					"  WHERE  ss_store_sk = s_store_sk AND\r\n",
					"         ss_sold_date_sk = d1.d_date_sk AND\r\n",
					"         ss_customer_sk = c_customer_sk AND\r\n",
					"         ss_cdemo_sk= cd1.cd_demo_sk AND\r\n",
					"         ss_hdemo_sk = hd1.hd_demo_sk AND\r\n",
					"         ss_addr_sk = ad1.ca_address_sk and\r\n",
					"         ss_item_sk = i_item_sk and\r\n",
					"         ss_item_sk = sr_item_sk and\r\n",
					"         ss_ticket_number = sr_ticket_number and\r\n",
					"         ss_item_sk = cs_ui.cs_item_sk and\r\n",
					"         c_current_cdemo_sk = cd2.cd_demo_sk AND\r\n",
					"         c_current_hdemo_sk = hd2.hd_demo_sk AND\r\n",
					"         c_current_addr_sk = ad2.ca_address_sk and\r\n",
					"         c_first_sales_date_sk = d2.d_date_sk and\r\n",
					"         c_first_shipto_date_sk = d3.d_date_sk and\r\n",
					"         ss_promo_sk = p_promo_sk and\r\n",
					"         hd1.hd_income_band_sk = ib1.ib_income_band_sk and\r\n",
					"         hd2.hd_income_band_sk = ib2.ib_income_band_sk and\r\n",
					"         cd1.cd_marital_status <> cd2.cd_marital_status and\r\n",
					"         i_color in ('purple','burlywood','indian','spring','floral','medium') and\r\n",
					"         i_current_price between 64 and 64 + 10 and\r\n",
					"         i_current_price between 64 + 1 and 64 + 15\r\n",
					"group by i_product_name\r\n",
					"       ,i_item_sk\r\n",
					"       ,s_store_name\r\n",
					"       ,s_zip\r\n",
					"       ,ad1.ca_street_number\r\n",
					"       ,ad1.ca_street_name\r\n",
					"       ,ad1.ca_city\r\n",
					"       ,ad1.ca_zip\r\n",
					"       ,ad2.ca_street_number\r\n",
					"       ,ad2.ca_street_name\r\n",
					"       ,ad2.ca_city\r\n",
					"       ,ad2.ca_zip\r\n",
					"       ,d1.d_year\r\n",
					"       ,d2.d_year\r\n",
					"       ,d3.d_year\r\n",
					")\r\n",
					"select cs1.product_name\r\n",
					"     ,cs1.store_name\r\n",
					"     ,cs1.store_zip\r\n",
					"     ,cs1.b_street_number\r\n",
					"     ,cs1.b_street_name\r\n",
					"     ,cs1.b_city\r\n",
					"     ,cs1.b_zip\r\n",
					"     ,cs1.c_street_number\r\n",
					"     ,cs1.c_street_name\r\n",
					"     ,cs1.c_city\r\n",
					"     ,cs1.c_zip\r\n",
					"     ,cs1.syear\r\n",
					"     ,cs1.cnt\r\n",
					"     ,cs1.s1 as s11\r\n",
					"     ,cs1.s2 as s21\r\n",
					"     ,cs1.s3 as s31\r\n",
					"     ,cs2.s1 as s12\r\n",
					"     ,cs2.s2 as s22\r\n",
					"     ,cs2.s3 as s32\r\n",
					"     ,cs2.syear as syear_2\r\n",
					"     ,cs2.cnt as cnt_2\r\n",
					"from cross_sales cs1,cross_sales cs2\r\n",
					"where cs1.item_sk=cs2.item_sk and\r\n",
					"     cs1.syear = 1999 and\r\n",
					"     cs2.syear = 1999 + 1 and\r\n",
					"     cs2.cnt <= cs1.cnt and\r\n",
					"     cs1.store_name = cs2.store_name and\r\n",
					"     cs1.store_zip = cs2.store_zip\r\n",
					"order by cs1.product_name\r\n",
					"       ,cs1.store_name\r\n",
					"       ,cnt_2;"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"--query65\r\n",
					"  select \r\n",
					"\ts_store_name,\r\n",
					"\ti_item_desc,\r\n",
					"\tsc.revenue,\r\n",
					"\ti_current_price,\r\n",
					"\ti_wholesale_cost,\r\n",
					"\ti_brand\r\n",
					" from store, item,\r\n",
					"     (select ss_store_sk, avg(revenue) as ave\r\n",
					" \tfrom\r\n",
					" \t    (select  ss_store_sk, ss_item_sk, \r\n",
					" \t\t     sum(ss_sales_price) as revenue\r\n",
					" \t\tfrom store_sales, date_dim\r\n",
					" \t\twhere ss_sold_date_sk = d_date_sk and d_month_seq between 1176 and 1176+11\r\n",
					" \t\tgroup by ss_store_sk, ss_item_sk) sa\r\n",
					" \tgroup by ss_store_sk) sb,\r\n",
					"     (select  ss_store_sk, ss_item_sk, sum(ss_sales_price) as revenue\r\n",
					" \tfrom store_sales, date_dim\r\n",
					" \twhere ss_sold_date_sk = d_date_sk and d_month_seq between 1176 and 1176+11\r\n",
					" \tgroup by ss_store_sk, ss_item_sk) sc\r\n",
					" where sb.ss_store_sk = sc.ss_store_sk and \r\n",
					"       sc.revenue <= 0.1 * sb.ave and\r\n",
					"       s_store_sk = sc.ss_store_sk and\r\n",
					"       i_item_sk = sc.ss_item_sk\r\n",
					" order by s_store_name, i_item_desc\r\n",
					" limit 100;"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"--query66\r\n",
					"  select   \r\n",
					"         w_warehouse_name\r\n",
					" \t,w_warehouse_sq_ft\r\n",
					" \t,w_city\r\n",
					" \t,w_county\r\n",
					" \t,w_state\r\n",
					" \t,w_country\r\n",
					"        ,ship_carriers\r\n",
					"        ,year\r\n",
					" \t,sum(jan_sales) as jan_sales\r\n",
					" \t,sum(feb_sales) as feb_sales\r\n",
					" \t,sum(mar_sales) as mar_sales\r\n",
					" \t,sum(apr_sales) as apr_sales\r\n",
					" \t,sum(may_sales) as may_sales\r\n",
					" \t,sum(jun_sales) as jun_sales\r\n",
					" \t,sum(jul_sales) as jul_sales\r\n",
					" \t,sum(aug_sales) as aug_sales\r\n",
					" \t,sum(sep_sales) as sep_sales\r\n",
					" \t,sum(oct_sales) as oct_sales\r\n",
					" \t,sum(nov_sales) as nov_sales\r\n",
					" \t,sum(dec_sales) as dec_sales\r\n",
					" \t,sum(jan_sales/w_warehouse_sq_ft) as jan_sales_per_sq_foot\r\n",
					" \t,sum(feb_sales/w_warehouse_sq_ft) as feb_sales_per_sq_foot\r\n",
					" \t,sum(mar_sales/w_warehouse_sq_ft) as mar_sales_per_sq_foot\r\n",
					" \t,sum(apr_sales/w_warehouse_sq_ft) as apr_sales_per_sq_foot\r\n",
					" \t,sum(may_sales/w_warehouse_sq_ft) as may_sales_per_sq_foot\r\n",
					" \t,sum(jun_sales/w_warehouse_sq_ft) as jun_sales_per_sq_foot\r\n",
					" \t,sum(jul_sales/w_warehouse_sq_ft) as jul_sales_per_sq_foot\r\n",
					" \t,sum(aug_sales/w_warehouse_sq_ft) as aug_sales_per_sq_foot\r\n",
					" \t,sum(sep_sales/w_warehouse_sq_ft) as sep_sales_per_sq_foot\r\n",
					" \t,sum(oct_sales/w_warehouse_sq_ft) as oct_sales_per_sq_foot\r\n",
					" \t,sum(nov_sales/w_warehouse_sq_ft) as nov_sales_per_sq_foot\r\n",
					" \t,sum(dec_sales/w_warehouse_sq_ft) as dec_sales_per_sq_foot\r\n",
					" \t,sum(jan_net) as jan_net\r\n",
					" \t,sum(feb_net) as feb_net\r\n",
					" \t,sum(mar_net) as mar_net\r\n",
					" \t,sum(apr_net) as apr_net\r\n",
					" \t,sum(may_net) as may_net\r\n",
					" \t,sum(jun_net) as jun_net\r\n",
					" \t,sum(jul_net) as jul_net\r\n",
					" \t,sum(aug_net) as aug_net\r\n",
					" \t,sum(sep_net) as sep_net\r\n",
					" \t,sum(oct_net) as oct_net\r\n",
					" \t,sum(nov_net) as nov_net\r\n",
					" \t,sum(dec_net) as dec_net\r\n",
					" from (\r\n",
					"     select \r\n",
					" \tw_warehouse_name\r\n",
					" \t,w_warehouse_sq_ft\r\n",
					" \t,w_city\r\n",
					" \t,w_county\r\n",
					" \t,w_state\r\n",
					" \t,w_country\r\n",
					" \t,concat('DHL' , ',' , 'BARIAN') as ship_carriers\r\n",
					"       ,d_year as year\r\n",
					" \t,sum(case when d_moy = 1 \r\n",
					" \t\tthen ws_ext_sales_price* ws_quantity else 0 end) as jan_sales\r\n",
					" \t,sum(case when d_moy = 2 \r\n",
					" \t\tthen ws_ext_sales_price* ws_quantity else 0 end) as feb_sales\r\n",
					" \t,sum(case when d_moy = 3 \r\n",
					" \t\tthen ws_ext_sales_price* ws_quantity else 0 end) as mar_sales\r\n",
					" \t,sum(case when d_moy = 4 \r\n",
					" \t\tthen ws_ext_sales_price* ws_quantity else 0 end) as apr_sales\r\n",
					" \t,sum(case when d_moy = 5 \r\n",
					" \t\tthen ws_ext_sales_price* ws_quantity else 0 end) as may_sales\r\n",
					" \t,sum(case when d_moy = 6 \r\n",
					" \t\tthen ws_ext_sales_price* ws_quantity else 0 end) as jun_sales\r\n",
					" \t,sum(case when d_moy = 7 \r\n",
					" \t\tthen ws_ext_sales_price* ws_quantity else 0 end) as jul_sales\r\n",
					" \t,sum(case when d_moy = 8 \r\n",
					" \t\tthen ws_ext_sales_price* ws_quantity else 0 end) as aug_sales\r\n",
					" \t,sum(case when d_moy = 9 \r\n",
					" \t\tthen ws_ext_sales_price* ws_quantity else 0 end) as sep_sales\r\n",
					" \t,sum(case when d_moy = 10 \r\n",
					" \t\tthen ws_ext_sales_price* ws_quantity else 0 end) as oct_sales\r\n",
					" \t,sum(case when d_moy = 11\r\n",
					" \t\tthen ws_ext_sales_price* ws_quantity else 0 end) as nov_sales\r\n",
					" \t,sum(case when d_moy = 12\r\n",
					" \t\tthen ws_ext_sales_price* ws_quantity else 0 end) as dec_sales\r\n",
					" \t,sum(case when d_moy = 1 \r\n",
					" \t\tthen ws_net_paid * ws_quantity else 0 end) as jan_net\r\n",
					" \t,sum(case when d_moy = 2\r\n",
					" \t\tthen ws_net_paid * ws_quantity else 0 end) as feb_net\r\n",
					" \t,sum(case when d_moy = 3 \r\n",
					" \t\tthen ws_net_paid * ws_quantity else 0 end) as mar_net\r\n",
					" \t,sum(case when d_moy = 4 \r\n",
					" \t\tthen ws_net_paid * ws_quantity else 0 end) as apr_net\r\n",
					" \t,sum(case when d_moy = 5 \r\n",
					" \t\tthen ws_net_paid * ws_quantity else 0 end) as may_net\r\n",
					" \t,sum(case when d_moy = 6 \r\n",
					" \t\tthen ws_net_paid * ws_quantity else 0 end) as jun_net\r\n",
					" \t,sum(case when d_moy = 7 \r\n",
					" \t\tthen ws_net_paid * ws_quantity else 0 end) as jul_net\r\n",
					" \t,sum(case when d_moy = 8 \r\n",
					" \t\tthen ws_net_paid * ws_quantity else 0 end) as aug_net\r\n",
					" \t,sum(case when d_moy = 9 \r\n",
					" \t\tthen ws_net_paid * ws_quantity else 0 end) as sep_net\r\n",
					" \t,sum(case when d_moy = 10 \r\n",
					" \t\tthen ws_net_paid * ws_quantity else 0 end) as oct_net\r\n",
					" \t,sum(case when d_moy = 11\r\n",
					" \t\tthen ws_net_paid * ws_quantity else 0 end) as nov_net\r\n",
					" \t,sum(case when d_moy = 12\r\n",
					" \t\tthen ws_net_paid * ws_quantity else 0 end) as dec_net\r\n",
					"     from\r\n",
					"          web_sales\r\n",
					"         ,warehouse\r\n",
					"         ,date_dim\r\n",
					"         ,time_dim\r\n",
					" \t  ,ship_mode\r\n",
					"     where\r\n",
					"            ws_warehouse_sk =  w_warehouse_sk\r\n",
					"        and ws_sold_date_sk = d_date_sk\r\n",
					"        and ws_sold_time_sk = t_time_sk\r\n",
					" \tand ws_ship_mode_sk = sm_ship_mode_sk\r\n",
					"        and d_year = 2001\r\n",
					" \tand t_time between 30838 and 30838+28800 \r\n",
					" \tand sm_carrier in ('DHL','BARIAN')\r\n",
					"     group by \r\n",
					"        w_warehouse_name\r\n",
					" \t,w_warehouse_sq_ft\r\n",
					" \t,w_city\r\n",
					" \t,w_county\r\n",
					" \t,w_state\r\n",
					" \t,w_country\r\n",
					"       ,d_year\r\n",
					" union all\r\n",
					"     select \r\n",
					" \tw_warehouse_name\r\n",
					" \t,w_warehouse_sq_ft\r\n",
					" \t,w_city\r\n",
					" \t,w_county\r\n",
					" \t,w_state\r\n",
					" \t,w_country\r\n",
					" \t,concat('DHL' , ',' , 'BARIAN') as ship_carriers\r\n",
					"       ,d_year as year\r\n",
					" \t,sum(case when d_moy = 1 \r\n",
					" \t\tthen cs_sales_price* cs_quantity else 0 end) as jan_sales\r\n",
					" \t,sum(case when d_moy = 2 \r\n",
					" \t\tthen cs_sales_price* cs_quantity else 0 end) as feb_sales\r\n",
					" \t,sum(case when d_moy = 3 \r\n",
					" \t\tthen cs_sales_price* cs_quantity else 0 end) as mar_sales\r\n",
					" \t,sum(case when d_moy = 4 \r\n",
					" \t\tthen cs_sales_price* cs_quantity else 0 end) as apr_sales\r\n",
					" \t,sum(case when d_moy = 5 \r\n",
					" \t\tthen cs_sales_price* cs_quantity else 0 end) as may_sales\r\n",
					" \t,sum(case when d_moy = 6 \r\n",
					" \t\tthen cs_sales_price* cs_quantity else 0 end) as jun_sales\r\n",
					" \t,sum(case when d_moy = 7 \r\n",
					" \t\tthen cs_sales_price* cs_quantity else 0 end) as jul_sales\r\n",
					" \t,sum(case when d_moy = 8 \r\n",
					" \t\tthen cs_sales_price* cs_quantity else 0 end) as aug_sales\r\n",
					" \t,sum(case when d_moy = 9 \r\n",
					" \t\tthen cs_sales_price* cs_quantity else 0 end) as sep_sales\r\n",
					" \t,sum(case when d_moy = 10 \r\n",
					" \t\tthen cs_sales_price* cs_quantity else 0 end) as oct_sales\r\n",
					" \t,sum(case when d_moy = 11\r\n",
					" \t\tthen cs_sales_price* cs_quantity else 0 end) as nov_sales\r\n",
					" \t,sum(case when d_moy = 12\r\n",
					" \t\tthen cs_sales_price* cs_quantity else 0 end) as dec_sales\r\n",
					" \t,sum(case when d_moy = 1 \r\n",
					" \t\tthen cs_net_paid_inc_tax * cs_quantity else 0 end) as jan_net\r\n",
					" \t,sum(case when d_moy = 2 \r\n",
					" \t\tthen cs_net_paid_inc_tax * cs_quantity else 0 end) as feb_net\r\n",
					" \t,sum(case when d_moy = 3 \r\n",
					" \t\tthen cs_net_paid_inc_tax * cs_quantity else 0 end) as mar_net\r\n",
					" \t,sum(case when d_moy = 4 \r\n",
					" \t\tthen cs_net_paid_inc_tax * cs_quantity else 0 end) as apr_net\r\n",
					" \t,sum(case when d_moy = 5 \r\n",
					" \t\tthen cs_net_paid_inc_tax * cs_quantity else 0 end) as may_net\r\n",
					" \t,sum(case when d_moy = 6 \r\n",
					" \t\tthen cs_net_paid_inc_tax * cs_quantity else 0 end) as jun_net\r\n",
					" \t,sum(case when d_moy = 7 \r\n",
					" \t\tthen cs_net_paid_inc_tax * cs_quantity else 0 end) as jul_net\r\n",
					" \t,sum(case when d_moy = 8 \r\n",
					" \t\tthen cs_net_paid_inc_tax * cs_quantity else 0 end) as aug_net\r\n",
					" \t,sum(case when d_moy = 9 \r\n",
					" \t\tthen cs_net_paid_inc_tax * cs_quantity else 0 end) as sep_net\r\n",
					" \t,sum(case when d_moy = 10 \r\n",
					" \t\tthen cs_net_paid_inc_tax * cs_quantity else 0 end) as oct_net\r\n",
					" \t,sum(case when d_moy = 11\r\n",
					" \t\tthen cs_net_paid_inc_tax * cs_quantity else 0 end) as nov_net\r\n",
					" \t,sum(case when d_moy = 12\r\n",
					" \t\tthen cs_net_paid_inc_tax * cs_quantity else 0 end) as dec_net\r\n",
					"     from\r\n",
					"          catalog_sales\r\n",
					"         ,warehouse\r\n",
					"         ,date_dim\r\n",
					"         ,time_dim\r\n",
					" \t ,ship_mode\r\n",
					"     where\r\n",
					"            cs_warehouse_sk =  w_warehouse_sk\r\n",
					"        and cs_sold_date_sk = d_date_sk\r\n",
					"        and cs_sold_time_sk = t_time_sk\r\n",
					" \tand cs_ship_mode_sk = sm_ship_mode_sk\r\n",
					"        and d_year = 2001\r\n",
					" \tand t_time between 30838 AND 30838+28800 \r\n",
					" \tand sm_carrier in ('DHL','BARIAN')\r\n",
					"     group by \r\n",
					"        w_warehouse_name\r\n",
					" \t,w_warehouse_sq_ft\r\n",
					" \t,w_city\r\n",
					" \t,w_county\r\n",
					" \t,w_state\r\n",
					" \t,w_country\r\n",
					"       ,d_year\r\n",
					" ) x\r\n",
					" group by \r\n",
					"        w_warehouse_name\r\n",
					" \t,w_warehouse_sq_ft\r\n",
					" \t,w_city\r\n",
					" \t,w_county\r\n",
					" \t,w_state\r\n",
					" \t,w_country\r\n",
					" \t,ship_carriers\r\n",
					"       ,year\r\n",
					" order by w_warehouse_name\r\n",
					"  limit 100;"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"--query67\r\n",
					" select  *\r\n",
					"from (select i_category\r\n",
					"            ,i_class\r\n",
					"            ,i_brand\r\n",
					"            ,i_product_name\r\n",
					"            ,d_year\r\n",
					"            ,d_qoy\r\n",
					"            ,d_moy\r\n",
					"            ,s_store_id\r\n",
					"            ,sumsales\r\n",
					"            ,rank() over (partition by i_category order by sumsales desc) rk\r\n",
					"      from (select i_category\r\n",
					"                  ,i_class\r\n",
					"                  ,i_brand\r\n",
					"                  ,i_product_name\r\n",
					"                  ,d_year\r\n",
					"                  ,d_qoy\r\n",
					"                  ,d_moy\r\n",
					"                  ,s_store_id\r\n",
					"                  ,sum(coalesce(ss_sales_price*ss_quantity,0)) sumsales\r\n",
					"            from store_sales\r\n",
					"                ,date_dim\r\n",
					"                ,store\r\n",
					"                ,item\r\n",
					"       where  ss_sold_date_sk=d_date_sk\r\n",
					"          and ss_item_sk=i_item_sk\r\n",
					"          and ss_store_sk = s_store_sk\r\n",
					"          and d_month_seq between 1200 and 1200+11\r\n",
					"       group by  rollup(i_category, i_class, i_brand, i_product_name, d_year, d_qoy, d_moy,s_store_id))dw1) dw2\r\n",
					"where rk <= 100\r\n",
					"order by i_category\r\n",
					"        ,i_class\r\n",
					"        ,i_brand\r\n",
					"        ,i_product_name\r\n",
					"        ,d_year\r\n",
					"        ,d_qoy\r\n",
					"        ,d_moy\r\n",
					"        ,s_store_id\r\n",
					"        ,sumsales\r\n",
					"        ,rk\r\n",
					" limit 100;"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"--query68\r\n",
					"  select  c_last_name\r\n",
					"       ,c_first_name\r\n",
					"       ,ca_city\r\n",
					"       ,bought_city\r\n",
					"       ,ss_ticket_number\r\n",
					"       ,extended_price\r\n",
					"       ,extended_tax\r\n",
					"       ,list_price\r\n",
					" from (select ss_ticket_number\r\n",
					"             ,ss_customer_sk\r\n",
					"             ,ca_city bought_city\r\n",
					"             ,sum(ss_ext_sales_price) extended_price \r\n",
					"             ,sum(ss_ext_list_price) list_price\r\n",
					"             ,sum(ss_ext_tax) extended_tax \r\n",
					"       from store_sales\r\n",
					"           ,date_dim\r\n",
					"           ,store\r\n",
					"           ,household_demographics\r\n",
					"           ,customer_address \r\n",
					"       where store_sales.ss_sold_date_sk = date_dim.d_date_sk\r\n",
					"         and store_sales.ss_store_sk = store.s_store_sk  \r\n",
					"        and store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk\r\n",
					"        and store_sales.ss_addr_sk = customer_address.ca_address_sk\r\n",
					"        and date_dim.d_dom between 1 and 2 \r\n",
					"        and (household_demographics.hd_dep_count = 4 or\r\n",
					"             household_demographics.hd_vehicle_count= 3)\r\n",
					"        and date_dim.d_year in (1999,1999+1,1999+2)\r\n",
					"        and store.s_city in ('Fairview','Midway')\r\n",
					"       group by ss_ticket_number\r\n",
					"               ,ss_customer_sk\r\n",
					"               ,ss_addr_sk,ca_city) dn\r\n",
					"      ,customer\r\n",
					"      ,customer_address current_addr\r\n",
					" where ss_customer_sk = c_customer_sk\r\n",
					"   and customer.c_current_addr_sk = current_addr.ca_address_sk\r\n",
					"   and current_addr.ca_city <> bought_city\r\n",
					" order by c_last_name\r\n",
					"         ,ss_ticket_number\r\n",
					"  limit 100;"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"--query69\r\n",
					"  select  \r\n",
					"  cd_gender,\r\n",
					"  cd_marital_status,\r\n",
					"  cd_education_status,\r\n",
					"  count(*) cnt1,\r\n",
					"  cd_purchase_estimate,\r\n",
					"  count(*) cnt2,\r\n",
					"  cd_credit_rating,\r\n",
					"  count(*) cnt3\r\n",
					" from\r\n",
					"  customer c,customer_address ca,customer_demographics\r\n",
					" where\r\n",
					"  c.c_current_addr_sk = ca.ca_address_sk and\r\n",
					"  ca_state in ('KY','GA','NM') and\r\n",
					"  cd_demo_sk = c.c_current_cdemo_sk and \r\n",
					"  exists (select *\r\n",
					"          from store_sales,date_dim\r\n",
					"          where c.c_customer_sk = ss_customer_sk and\r\n",
					"                ss_sold_date_sk = d_date_sk and\r\n",
					"                d_year = 2001 and\r\n",
					"                d_moy between 4 and 4+2) and\r\n",
					"   (not exists (select *\r\n",
					"            from web_sales,date_dim\r\n",
					"            where c.c_customer_sk = ws_bill_customer_sk and\r\n",
					"                  ws_sold_date_sk = d_date_sk and\r\n",
					"                  d_year = 2001 and\r\n",
					"                  d_moy between 4 and 4+2) and\r\n",
					"    not exists (select * \r\n",
					"            from catalog_sales,date_dim\r\n",
					"            where c.c_customer_sk = cs_ship_customer_sk and\r\n",
					"                  cs_sold_date_sk = d_date_sk and\r\n",
					"                  d_year = 2001 and\r\n",
					"                  d_moy between 4 and 4+2))\r\n",
					" group by cd_gender,\r\n",
					"          cd_marital_status,\r\n",
					"          cd_education_status,\r\n",
					"          cd_purchase_estimate,\r\n",
					"          cd_credit_rating\r\n",
					" order by cd_gender,\r\n",
					"          cd_marital_status,\r\n",
					"          cd_education_status,\r\n",
					"          cd_purchase_estimate,\r\n",
					"          cd_credit_rating\r\n",
					"  limit 100;"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"--query70\r\n",
					"  select  \r\n",
					"    sum(ss_net_profit) as total_sum\r\n",
					"   ,s_state\r\n",
					"   ,s_county\r\n",
					"   ,grouping(s_state)+grouping(s_county) as lochierarchy\r\n",
					"   ,rank() over (\r\n",
					" \tpartition by grouping(s_state)+grouping(s_county),\r\n",
					" \tcase when grouping(s_county) = 0 then s_state end \r\n",
					" \torder by sum(ss_net_profit) desc) as rank_within_parent\r\n",
					" from\r\n",
					"    store_sales\r\n",
					"   ,date_dim       d1\r\n",
					"   ,store\r\n",
					" where\r\n",
					"    d1.d_month_seq between 1200 and 1200+11\r\n",
					" and d1.d_date_sk = ss_sold_date_sk\r\n",
					" and s_store_sk  = ss_store_sk\r\n",
					" and s_state in\r\n",
					"             ( select s_state\r\n",
					"               from  (select s_state as s_state,\r\n",
					" \t\t\t    rank() over ( partition by s_state order by sum(ss_net_profit) desc) as ranking\r\n",
					"                      from   store_sales, store, date_dim\r\n",
					"                      where  d_month_seq between 1200 and 1200+11\r\n",
					" \t\t\t    and d_date_sk = ss_sold_date_sk\r\n",
					" \t\t\t    and s_store_sk  = ss_store_sk\r\n",
					"                      group by s_state\r\n",
					"                     ) tmp1 \r\n",
					"               where ranking <= 5\r\n",
					"             )\r\n",
					" group by rollup(s_state,s_county)\r\n",
					" order by\r\n",
					"   lochierarchy desc\r\n",
					"  ,case when lochierarchy = 0 then s_state end\r\n",
					"  ,rank_within_parent\r\n",
					"  limit 100;"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"--query71\r\n",
					" select i_brand_id brand_id, i_brand brand,t_hour,t_minute,\r\n",
					" \tsum(ext_price) ext_price\r\n",
					" from item, (select ws_ext_sales_price as ext_price, \r\n",
					"                        ws_sold_date_sk as sold_date_sk,\r\n",
					"                        ws_item_sk as sold_item_sk,\r\n",
					"                        ws_sold_time_sk as time_sk  \r\n",
					"                 from web_sales,date_dim\r\n",
					"                 where d_date_sk = ws_sold_date_sk\r\n",
					"                   and d_moy=11\r\n",
					"                   and d_year=1999\r\n",
					"                 union all\r\n",
					"                 select cs_ext_sales_price as ext_price,\r\n",
					"                        cs_sold_date_sk as sold_date_sk,\r\n",
					"                        cs_item_sk as sold_item_sk,\r\n",
					"                        cs_sold_time_sk as time_sk\r\n",
					"                 from catalog_sales,date_dim\r\n",
					"                 where d_date_sk = cs_sold_date_sk\r\n",
					"                   and d_moy=11\r\n",
					"                   and d_year=1999\r\n",
					"                 union all\r\n",
					"                 select ss_ext_sales_price as ext_price,\r\n",
					"                        ss_sold_date_sk as sold_date_sk,\r\n",
					"                        ss_item_sk as sold_item_sk,\r\n",
					"                        ss_sold_time_sk as time_sk\r\n",
					"                 from store_sales,date_dim\r\n",
					"                 where d_date_sk = ss_sold_date_sk\r\n",
					"                   and d_moy=11\r\n",
					"                   and d_year=1999\r\n",
					"                 ) tmp,time_dim\r\n",
					" where\r\n",
					"   sold_item_sk = i_item_sk\r\n",
					"   and i_manager_id=1\r\n",
					"   and time_sk = t_time_sk\r\n",
					"   and (t_meal_time = 'breakfast' or t_meal_time = 'dinner')\r\n",
					" group by i_brand, i_brand_id,t_hour,t_minute\r\n",
					" order by ext_price desc, i_brand_id;"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"--query72\r\n",
					" select  i_item_desc\r\n",
					"      ,w_warehouse_name\r\n",
					"      ,d1.d_week_seq\r\n",
					"      ,sum(case when p_promo_sk is null then 1 else 0 end) no_promo\r\n",
					"      ,sum(case when p_promo_sk is not null then 1 else 0 end) promo\r\n",
					"      ,count(*) total_cnt\r\n",
					"from catalog_sales\r\n",
					"join inventory on (cs_item_sk = inv_item_sk)\r\n",
					"join warehouse on (w_warehouse_sk=inv_warehouse_sk)\r\n",
					"join item on (i_item_sk = cs_item_sk)\r\n",
					"join customer_demographics on (cs_bill_cdemo_sk = cd_demo_sk)\r\n",
					"join household_demographics on (cs_bill_hdemo_sk = hd_demo_sk)\r\n",
					"join date_dim d1 on (cs_sold_date_sk = d1.d_date_sk)\r\n",
					"join date_dim d2 on (inv_date_sk = d2.d_date_sk)\r\n",
					"join date_dim d3 on (cs_ship_date_sk = d3.d_date_sk)\r\n",
					"left outer join promotion on (cs_promo_sk=p_promo_sk)\r\n",
					"left outer join catalog_returns on (cr_item_sk = cs_item_sk and cr_order_number = cs_order_number)\r\n",
					"where d1.d_week_seq = d2.d_week_seq\r\n",
					"  and inv_quantity_on_hand < cs_quantity \r\n",
					"  and d3.d_date > date_add(cast(d1.d_date as date),5)\r\n",
					"  and hd_buy_potential = '>10000'\r\n",
					"  and d1.d_year = 1999\r\n",
					"  and cd_marital_status = 'D'\r\n",
					"group by i_item_desc,w_warehouse_name,d1.d_week_seq\r\n",
					"order by total_cnt desc, i_item_desc, w_warehouse_name, d_week_seq\r\n",
					" limit 100;"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"--query73\r\n",
					" select c_last_name\r\n",
					"       ,c_first_name\r\n",
					"       ,c_salutation\r\n",
					"       ,c_preferred_cust_flag \r\n",
					"       ,ss_ticket_number\r\n",
					"       ,cnt from\r\n",
					"   (select ss_ticket_number\r\n",
					"          ,ss_customer_sk\r\n",
					"          ,count(*) cnt\r\n",
					"    from store_sales,date_dim,store,household_demographics\r\n",
					"    where store_sales.ss_sold_date_sk = date_dim.d_date_sk\r\n",
					"    and store_sales.ss_store_sk = store.s_store_sk  \r\n",
					"    and store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk\r\n",
					"    and date_dim.d_dom between 1 and 2 \r\n",
					"    and (household_demographics.hd_buy_potential = '>10000' or\r\n",
					"         household_demographics.hd_buy_potential = 'Unknown')\r\n",
					"    and household_demographics.hd_vehicle_count > 0\r\n",
					"    and case when household_demographics.hd_vehicle_count > 0 then \r\n",
					"             household_demographics.hd_dep_count/ household_demographics.hd_vehicle_count else null end > 1\r\n",
					"    and date_dim.d_year in (1999,1999+1,1999+2)\r\n",
					"    and store.s_county in ('Williamson County','Franklin Parish','Bronx County','Orange County')\r\n",
					"    group by ss_ticket_number,ss_customer_sk) dj,customer\r\n",
					"    where ss_customer_sk = c_customer_sk\r\n",
					"      and cnt between 1 and 5\r\n",
					"    order by cnt desc, c_last_name asc;"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"--query74\r\n",
					" with year_total as (\r\n",
					" select c_customer_id customer_id\r\n",
					"       ,c_first_name customer_first_name\r\n",
					"       ,c_last_name customer_last_name\r\n",
					"       ,d_year as year\r\n",
					"       ,sum(ss_net_paid) year_total\r\n",
					"       ,'s' sale_type\r\n",
					" from customer\r\n",
					"     ,store_sales\r\n",
					"     ,date_dim\r\n",
					" where c_customer_sk = ss_customer_sk\r\n",
					"   and ss_sold_date_sk = d_date_sk\r\n",
					"   and d_year in (2001,2001+1)\r\n",
					" group by c_customer_id\r\n",
					"         ,c_first_name\r\n",
					"         ,c_last_name\r\n",
					"         ,d_year\r\n",
					" union all\r\n",
					" select c_customer_id customer_id\r\n",
					"       ,c_first_name customer_first_name\r\n",
					"       ,c_last_name customer_last_name\r\n",
					"       ,d_year as year\r\n",
					"       ,sum(ws_net_paid) year_total\r\n",
					"       ,'w' sale_type\r\n",
					" from customer\r\n",
					"     ,web_sales\r\n",
					"     ,date_dim\r\n",
					" where c_customer_sk = ws_bill_customer_sk\r\n",
					"   and ws_sold_date_sk = d_date_sk\r\n",
					"   and d_year in (2001,2001+1)\r\n",
					" group by c_customer_id\r\n",
					"         ,c_first_name\r\n",
					"         ,c_last_name\r\n",
					"         ,d_year\r\n",
					"         )\r\n",
					"  select \r\n",
					"        t_s_secyear.customer_id, t_s_secyear.customer_first_name, t_s_secyear.customer_last_name\r\n",
					" from year_total t_s_firstyear\r\n",
					"     ,year_total t_s_secyear\r\n",
					"     ,year_total t_w_firstyear\r\n",
					"     ,year_total t_w_secyear\r\n",
					" where t_s_secyear.customer_id = t_s_firstyear.customer_id\r\n",
					"         and t_s_firstyear.customer_id = t_w_secyear.customer_id\r\n",
					"         and t_s_firstyear.customer_id = t_w_firstyear.customer_id\r\n",
					"         and t_s_firstyear.sale_type = 's'\r\n",
					"         and t_w_firstyear.sale_type = 'w'\r\n",
					"         and t_s_secyear.sale_type = 's'\r\n",
					"         and t_w_secyear.sale_type = 'w'\r\n",
					"         and t_s_firstyear.year = 2001\r\n",
					"         and t_s_secyear.year = 2001+1\r\n",
					"         and t_w_firstyear.year = 2001\r\n",
					"         and t_w_secyear.year = 2001+1\r\n",
					"         and t_s_firstyear.year_total > 0\r\n",
					"         and t_w_firstyear.year_total > 0\r\n",
					"         and case when t_w_firstyear.year_total > 0 then t_w_secyear.year_total / t_w_firstyear.year_total else null end\r\n",
					"           > case when t_s_firstyear.year_total > 0 then t_s_secyear.year_total / t_s_firstyear.year_total else null end\r\n",
					" order by 1,1,1\r\n",
					" limit 100;"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"--query75\r\n",
					"WITH all_sales AS (\r\n",
					" SELECT d_year\r\n",
					"       ,i_brand_id\r\n",
					"       ,i_class_id\r\n",
					"       ,i_category_id\r\n",
					"       ,i_manufact_id\r\n",
					"       ,SUM(sales_cnt) AS sales_cnt\r\n",
					"       ,SUM(sales_amt) AS sales_amt\r\n",
					" FROM (SELECT d_year\r\n",
					"             ,i_brand_id\r\n",
					"             ,i_class_id\r\n",
					"             ,i_category_id\r\n",
					"             ,i_manufact_id\r\n",
					"             ,cs_quantity - COALESCE(cr_return_quantity,0) AS sales_cnt\r\n",
					"             ,cs_ext_sales_price - COALESCE(cr_return_amount,0.0) AS sales_amt\r\n",
					"       FROM catalog_sales JOIN item ON i_item_sk=cs_item_sk\r\n",
					"                          JOIN date_dim ON d_date_sk=cs_sold_date_sk\r\n",
					"                          LEFT JOIN catalog_returns ON (cs_order_number=cr_order_number \r\n",
					"                                                    AND cs_item_sk=cr_item_sk)\r\n",
					"       WHERE i_category='Books'\r\n",
					"       UNION\r\n",
					"       SELECT d_year\r\n",
					"             ,i_brand_id\r\n",
					"             ,i_class_id\r\n",
					"             ,i_category_id\r\n",
					"             ,i_manufact_id\r\n",
					"             ,ss_quantity - COALESCE(sr_return_quantity,0) AS sales_cnt\r\n",
					"             ,ss_ext_sales_price - COALESCE(sr_return_amt,0.0) AS sales_amt\r\n",
					"       FROM store_sales JOIN item ON i_item_sk=ss_item_sk\r\n",
					"                        JOIN date_dim ON d_date_sk=ss_sold_date_sk\r\n",
					"                        LEFT JOIN store_returns ON (ss_ticket_number=sr_ticket_number \r\n",
					"                                                AND ss_item_sk=sr_item_sk)\r\n",
					"       WHERE i_category='Books'\r\n",
					"       UNION\r\n",
					"       SELECT d_year\r\n",
					"             ,i_brand_id\r\n",
					"             ,i_class_id\r\n",
					"             ,i_category_id\r\n",
					"             ,i_manufact_id\r\n",
					"             ,ws_quantity - COALESCE(wr_return_quantity,0) AS sales_cnt\r\n",
					"             ,ws_ext_sales_price - COALESCE(wr_return_amt,0.0) AS sales_amt\r\n",
					"       FROM web_sales JOIN item ON i_item_sk=ws_item_sk\r\n",
					"                      JOIN date_dim ON d_date_sk=ws_sold_date_sk\r\n",
					"                      LEFT JOIN web_returns ON (ws_order_number=wr_order_number \r\n",
					"                                            AND ws_item_sk=wr_item_sk)\r\n",
					"       WHERE i_category='Books') sales_detail\r\n",
					" GROUP BY d_year, i_brand_id, i_class_id, i_category_id, i_manufact_id)\r\n",
					" SELECT  prev_yr.d_year AS prev_year\r\n",
					"                          ,curr_yr.d_year AS year\r\n",
					"                          ,curr_yr.i_brand_id\r\n",
					"                          ,curr_yr.i_class_id\r\n",
					"                          ,curr_yr.i_category_id\r\n",
					"                          ,curr_yr.i_manufact_id\r\n",
					"                          ,prev_yr.sales_cnt AS prev_yr_cnt\r\n",
					"                          ,curr_yr.sales_cnt AS curr_yr_cnt\r\n",
					"                          ,curr_yr.sales_cnt-prev_yr.sales_cnt AS sales_cnt_diff\r\n",
					"                          ,curr_yr.sales_amt-prev_yr.sales_amt AS sales_amt_diff\r\n",
					" FROM all_sales curr_yr, all_sales prev_yr\r\n",
					" WHERE curr_yr.i_brand_id=prev_yr.i_brand_id\r\n",
					"   AND curr_yr.i_class_id=prev_yr.i_class_id\r\n",
					"   AND curr_yr.i_category_id=prev_yr.i_category_id\r\n",
					"   AND curr_yr.i_manufact_id=prev_yr.i_manufact_id\r\n",
					"   AND curr_yr.d_year=2002\r\n",
					"   AND prev_yr.d_year=2002-1\r\n",
					"   AND CAST(curr_yr.sales_cnt AS DECIMAL(17,2))/CAST(prev_yr.sales_cnt AS DECIMAL(17,2))<0.9\r\n",
					" ORDER BY sales_cnt_diff\r\n",
					"  limit 100;"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"--query76\r\n",
					" select  channel, col_name, d_year, d_qoy, i_category, COUNT(*) sales_cnt, SUM(ext_sales_price) sales_amt FROM (\r\n",
					"        SELECT 'store' as channel, 'ss_store_sk' col_name, d_year, d_qoy, i_category, ss_ext_sales_price ext_sales_price\r\n",
					"         FROM store_sales, item, date_dim\r\n",
					"         WHERE ss_store_sk IS NULL\r\n",
					"           AND ss_sold_date_sk=d_date_sk\r\n",
					"           AND ss_item_sk=i_item_sk\r\n",
					"        UNION ALL\r\n",
					"        SELECT 'web' as channel, 'ws_ship_customer_sk' col_name, d_year, d_qoy, i_category, ws_ext_sales_price ext_sales_price\r\n",
					"         FROM web_sales, item, date_dim\r\n",
					"         WHERE ws_ship_customer_sk IS NULL\r\n",
					"           AND ws_sold_date_sk=d_date_sk\r\n",
					"           AND ws_item_sk=i_item_sk\r\n",
					"        UNION ALL\r\n",
					"        SELECT 'catalog' as channel, 'cs_ship_addr_sk' col_name, d_year, d_qoy, i_category, cs_ext_sales_price ext_sales_price\r\n",
					"         FROM catalog_sales, item, date_dim\r\n",
					"         WHERE cs_ship_addr_sk IS NULL\r\n",
					"           AND cs_sold_date_sk=d_date_sk\r\n",
					"           AND cs_item_sk=i_item_sk) foo\r\n",
					"GROUP BY channel, col_name, d_year, d_qoy, i_category\r\n",
					"ORDER BY channel, col_name, d_year, d_qoy, i_category\r\n",
					" limit 100;"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"--query77\r\n",
					" with ss as\r\n",
					" (select s_store_sk,\r\n",
					"         sum(ss_ext_sales_price) as sales,\r\n",
					"         sum(ss_net_profit) as profit\r\n",
					" from store_sales,\r\n",
					"      date_dim,\r\n",
					"      store\r\n",
					" where ss_sold_date_sk = d_date_sk\r\n",
					"       and d_date between cast('2000-08-23' as date) \r\n",
					"                  and date_add(cast('2000-08-23' as date), 30 ) \r\n",
					"       and ss_store_sk = s_store_sk\r\n",
					" group by s_store_sk)\r\n",
					" ,\r\n",
					" sr as\r\n",
					" (select s_store_sk,\r\n",
					"         sum(sr_return_amt) as returns,\r\n",
					"         sum(sr_net_loss) as profit_loss\r\n",
					" from store_returns,\r\n",
					"      date_dim,\r\n",
					"      store\r\n",
					" where sr_returned_date_sk = d_date_sk\r\n",
					"       and d_date between cast('2000-08-23' as date)\r\n",
					"                  and date_add(cast('2000-08-23' as date),  30 )\r\n",
					"       and sr_store_sk = s_store_sk\r\n",
					" group by s_store_sk), \r\n",
					" cs as\r\n",
					" (select cs_call_center_sk,\r\n",
					"        sum(cs_ext_sales_price) as sales,\r\n",
					"        sum(cs_net_profit) as profit\r\n",
					" from catalog_sales,\r\n",
					"      date_dim\r\n",
					" where cs_sold_date_sk = d_date_sk\r\n",
					"       and d_date between cast('2000-08-23' as date)\r\n",
					"                  and date_add(cast('2000-08-23' as date), 30 )\r\n",
					" group by cs_call_center_sk \r\n",
					" ), \r\n",
					" cr as\r\n",
					" (select cr_call_center_sk,\r\n",
					"         sum(cr_return_amount) as returns,\r\n",
					"         sum(cr_net_loss) as profit_loss\r\n",
					" from catalog_returns,\r\n",
					"      date_dim\r\n",
					" where cr_returned_date_sk = d_date_sk\r\n",
					"       and d_date between cast('2000-08-23' as date)\r\n",
					"                  and date_add(cast('2000-08-23' as date),  30 )\r\n",
					" group by cr_call_center_sk\r\n",
					" ), \r\n",
					" ws as\r\n",
					" ( select wp_web_page_sk,\r\n",
					"        sum(ws_ext_sales_price) as sales,\r\n",
					"        sum(ws_net_profit) as profit\r\n",
					" from web_sales,\r\n",
					"      date_dim,\r\n",
					"      web_page\r\n",
					" where ws_sold_date_sk = d_date_sk\r\n",
					"       and d_date between cast('2000-08-23' as date)\r\n",
					"                  and date_add(cast('2000-08-23' as date), 30 )\r\n",
					"       and ws_web_page_sk = wp_web_page_sk\r\n",
					" group by wp_web_page_sk), \r\n",
					" wr as\r\n",
					" (select wp_web_page_sk,\r\n",
					"        sum(wr_return_amt) as returns,\r\n",
					"        sum(wr_net_loss) as profit_loss\r\n",
					" from web_returns,\r\n",
					"      date_dim,\r\n",
					"      web_page\r\n",
					" where wr_returned_date_sk = d_date_sk\r\n",
					"       and d_date between cast('2000-08-23' as date)\r\n",
					"                  and date_add(cast('2000-08-23' as date), 30 )\r\n",
					"       and wr_web_page_sk = wp_web_page_sk\r\n",
					" group by wp_web_page_sk)\r\n",
					"  select  channel\r\n",
					"        , id\r\n",
					"        , sum(sales) as sales\r\n",
					"        , sum(returns) as returns\r\n",
					"        , sum(profit) as profit\r\n",
					" from \r\n",
					" (select 'store channel' as channel\r\n",
					"        , ss.s_store_sk as id\r\n",
					"        , sales\r\n",
					"        , coalesce(returns, 0) as returns\r\n",
					"        , (profit - coalesce(profit_loss,0)) as profit\r\n",
					" from   ss left join sr\r\n",
					"        on  ss.s_store_sk = sr.s_store_sk\r\n",
					" union all\r\n",
					" select 'catalog channel' as channel\r\n",
					"        , cs_call_center_sk as id\r\n",
					"        , sales\r\n",
					"        , returns\r\n",
					"        , (profit - profit_loss) as profit\r\n",
					" from  cs\r\n",
					"       , cr\r\n",
					" union all\r\n",
					" select 'web channel' as channel\r\n",
					"        , ws.wp_web_page_sk as id\r\n",
					"        , sales\r\n",
					"        , coalesce(returns, 0) returns\r\n",
					"        , (profit - coalesce(profit_loss,0)) as profit\r\n",
					" from   ws left join wr\r\n",
					"        on  ws.wp_web_page_sk = wr.wp_web_page_sk\r\n",
					" ) x\r\n",
					" group by rollup (channel, id)\r\n",
					" order by channel\r\n",
					"         ,id\r\n",
					"  limit 100;"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"--query78\r\n",
					"with ws as\r\n",
					"  (select d_year AS ws_sold_year, ws_item_sk,\r\n",
					"    ws_bill_customer_sk ws_customer_sk,\r\n",
					"    sum(ws_quantity) ws_qty,\r\n",
					"    sum(ws_wholesale_cost) ws_wc,\r\n",
					"    sum(ws_sales_price) ws_sp\r\n",
					"   from web_sales\r\n",
					"   left join web_returns on wr_order_number=ws_order_number and ws_item_sk=wr_item_sk\r\n",
					"   join date_dim on ws_sold_date_sk = d_date_sk\r\n",
					"   where wr_order_number is null\r\n",
					"   group by d_year, ws_item_sk, ws_bill_customer_sk\r\n",
					"   ),\r\n",
					"cs as\r\n",
					"  (select d_year AS cs_sold_year, cs_item_sk,\r\n",
					"    cs_bill_customer_sk cs_customer_sk,\r\n",
					"    sum(cs_quantity) cs_qty,\r\n",
					"    sum(cs_wholesale_cost) cs_wc,\r\n",
					"    sum(cs_sales_price) cs_sp\r\n",
					"   from catalog_sales\r\n",
					"   left join catalog_returns on cr_order_number=cs_order_number and cs_item_sk=cr_item_sk\r\n",
					"   join date_dim on cs_sold_date_sk = d_date_sk\r\n",
					"   where cr_order_number is null\r\n",
					"   group by d_year, cs_item_sk, cs_bill_customer_sk\r\n",
					"   ),\r\n",
					"ss as\r\n",
					"  (select d_year AS ss_sold_year, ss_item_sk,\r\n",
					"    ss_customer_sk,\r\n",
					"    sum(ss_quantity) ss_qty,\r\n",
					"    sum(ss_wholesale_cost) ss_wc,\r\n",
					"    sum(ss_sales_price) ss_sp\r\n",
					"   from store_sales\r\n",
					"   left join store_returns on sr_ticket_number=ss_ticket_number and ss_item_sk=sr_item_sk\r\n",
					"   join date_dim on ss_sold_date_sk = d_date_sk\r\n",
					"   where sr_ticket_number is null\r\n",
					"   group by d_year, ss_item_sk, ss_customer_sk\r\n",
					"   )\r\n",
					" select \r\n",
					"ss_sold_year, ss_item_sk, ss_customer_sk,\r\n",
					"round(ss_qty/(coalesce(ws_qty,0)+coalesce(cs_qty,0)),2) ratio,\r\n",
					"ss_qty store_qty, ss_wc store_wholesale_cost, ss_sp store_sales_price,\r\n",
					"coalesce(ws_qty,0)+coalesce(cs_qty,0) other_chan_qty,\r\n",
					"coalesce(ws_wc,0)+coalesce(cs_wc,0) other_chan_wholesale_cost,\r\n",
					"coalesce(ws_sp,0)+coalesce(cs_sp,0) other_chan_sales_price\r\n",
					"from ss\r\n",
					"left join ws on (ws_sold_year=ss_sold_year and ws_item_sk=ss_item_sk and ws_customer_sk=ss_customer_sk)\r\n",
					"left join cs on (cs_sold_year=ss_sold_year and cs_item_sk=ss_item_sk and cs_customer_sk=ss_customer_sk)\r\n",
					"where (coalesce(ws_qty,0)>0 or coalesce(cs_qty, 0)>0) and ss_sold_year=2000\r\n",
					"order by \r\n",
					"  ss_sold_year, ss_item_sk, ss_customer_sk,\r\n",
					"  ss_qty desc, ss_wc desc, ss_sp desc,\r\n",
					"  other_chan_qty,\r\n",
					"  other_chan_wholesale_cost,\r\n",
					"  other_chan_sales_price,\r\n",
					"  round(ss_qty/(coalesce(ws_qty+cs_qty,1)),2)\r\n",
					" limit 100;"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"--query79\r\n",
					"  select \r\n",
					"  c_last_name,c_first_name,substr(s_city,1,30),ss_ticket_number,amt,profit\r\n",
					"  from\r\n",
					"   (select ss_ticket_number\r\n",
					"          ,ss_customer_sk\r\n",
					"          ,store.s_city\r\n",
					"          ,sum(ss_coupon_amt) amt\r\n",
					"          ,sum(ss_net_profit) profit\r\n",
					"    from store_sales,date_dim,store,household_demographics\r\n",
					"    where store_sales.ss_sold_date_sk = date_dim.d_date_sk\r\n",
					"    and store_sales.ss_store_sk = store.s_store_sk  \r\n",
					"    and store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk\r\n",
					"    and (household_demographics.hd_dep_count = 6 or household_demographics.hd_vehicle_count > 2)\r\n",
					"    and date_dim.d_dow = 1\r\n",
					"    and date_dim.d_year in (1999,1999+1,1999+2) \r\n",
					"    and store.s_number_employees between 200 and 295\r\n",
					"    group by ss_ticket_number,ss_customer_sk,ss_addr_sk,store.s_city) ms,customer\r\n",
					"    where ss_customer_sk = c_customer_sk\r\n",
					" order by c_last_name,c_first_name,substr(s_city,1,30), profit\r\n",
					" limit 100;"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"--query80\r\n",
					" with ssr as\r\n",
					" (select  s_store_id as store_id,\r\n",
					"          sum(ss_ext_sales_price) as sales,\r\n",
					"          sum(coalesce(sr_return_amt, 0)) as returns,\r\n",
					"          sum(ss_net_profit - coalesce(sr_net_loss, 0)) as profit\r\n",
					"  from store_sales left outer join store_returns on\r\n",
					"         (ss_item_sk = sr_item_sk and ss_ticket_number = sr_ticket_number),\r\n",
					"     date_dim,\r\n",
					"     store,\r\n",
					"     item,\r\n",
					"     promotion\r\n",
					" where ss_sold_date_sk = d_date_sk\r\n",
					"       and d_date between cast('2000-08-23' as date) \r\n",
					"                  and date_add(cast('2000-08-23' as date), 30 )\r\n",
					"       and ss_store_sk = s_store_sk\r\n",
					"       and ss_item_sk = i_item_sk\r\n",
					"       and i_current_price > 50\r\n",
					"       and ss_promo_sk = p_promo_sk\r\n",
					"       and p_channel_tv = 'N'\r\n",
					" group by s_store_id)\r\n",
					" ,\r\n",
					" csr as\r\n",
					" (select  cp_catalog_page_id as catalog_page_id,\r\n",
					"          sum(cs_ext_sales_price) as sales,\r\n",
					"          sum(coalesce(cr_return_amount, 0)) as returns,\r\n",
					"          sum(cs_net_profit - coalesce(cr_net_loss, 0)) as profit\r\n",
					"  from catalog_sales left outer join catalog_returns on\r\n",
					"         (cs_item_sk = cr_item_sk and cs_order_number = cr_order_number),\r\n",
					"     date_dim,\r\n",
					"     catalog_page,\r\n",
					"     item,\r\n",
					"     promotion\r\n",
					" where cs_sold_date_sk = d_date_sk\r\n",
					"       and d_date between cast('2000-08-23' as date)\r\n",
					"                  and date_add(cast('2000-08-23' as date), 30 )\r\n",
					"        and cs_catalog_page_sk = cp_catalog_page_sk\r\n",
					"       and cs_item_sk = i_item_sk\r\n",
					"       and i_current_price > 50\r\n",
					"       and cs_promo_sk = p_promo_sk\r\n",
					"       and p_channel_tv = 'N'\r\n",
					"group by cp_catalog_page_id)\r\n",
					" ,\r\n",
					" wsr as\r\n",
					" (select  web_site_id,\r\n",
					"          sum(ws_ext_sales_price) as sales,\r\n",
					"          sum(coalesce(wr_return_amt, 0)) as returns,\r\n",
					"          sum(ws_net_profit - coalesce(wr_net_loss, 0)) as profit\r\n",
					"  from web_sales left outer join web_returns on\r\n",
					"         (ws_item_sk = wr_item_sk and ws_order_number = wr_order_number),\r\n",
					"     date_dim,\r\n",
					"     web_site,\r\n",
					"     item,\r\n",
					"     promotion\r\n",
					" where ws_sold_date_sk = d_date_sk\r\n",
					"       and d_date between cast('2000-08-23' as date)\r\n",
					"                  and date_add(cast('2000-08-23' as date),  30 )\r\n",
					"        and ws_web_site_sk = web_site_sk\r\n",
					"       and ws_item_sk = i_item_sk\r\n",
					"       and i_current_price > 50\r\n",
					"       and ws_promo_sk = p_promo_sk\r\n",
					"       and p_channel_tv = 'N'\r\n",
					"group by web_site_id)\r\n",
					"  select  channel\r\n",
					"        , id\r\n",
					"        , sum(sales) as sales\r\n",
					"        , sum(returns) as returns\r\n",
					"        , sum(profit) as profit\r\n",
					" from \r\n",
					" (select 'store channel' as channel\r\n",
					"        , concat( 'store' , store_id )  as id\r\n",
					"        , sales\r\n",
					"        , returns\r\n",
					"        , profit\r\n",
					" from   ssr\r\n",
					" union all\r\n",
					" select 'catalog channel' as channel\r\n",
					"        , concat( 'catalog_page' , catalog_page_id ) as id\r\n",
					"        , sales\r\n",
					"        , returns\r\n",
					"        , profit\r\n",
					" from  csr\r\n",
					" union all\r\n",
					" select 'web channel' as channel\r\n",
					"        , concat( 'web_site' , web_site_id )  as id\r\n",
					"        , sales\r\n",
					"        , returns\r\n",
					"        , profit\r\n",
					" from   wsr\r\n",
					" ) x\r\n",
					" group by rollup (channel, id)\r\n",
					" order by channel\r\n",
					"         ,id\r\n",
					"  limit 100;"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"--query81\r\n",
					" with customer_total_return as\r\n",
					" (select cr_returning_customer_sk as ctr_customer_sk\r\n",
					"        ,ca_state as ctr_state, \r\n",
					" \tsum(cr_return_amt_inc_tax) as ctr_total_return\r\n",
					" from catalog_returns\r\n",
					"     ,date_dim\r\n",
					"     ,customer_address\r\n",
					" where cr_returned_date_sk = d_date_sk \r\n",
					"   and d_year =2000\r\n",
					"   and cr_returning_addr_sk = ca_address_sk \r\n",
					" group by cr_returning_customer_sk\r\n",
					"         ,ca_state )\r\n",
					"  select  c_customer_id,c_salutation,c_first_name,c_last_name,ca_street_number,ca_street_name\r\n",
					"                   ,ca_street_type,ca_suite_number,ca_city,ca_county,ca_state,ca_zip,ca_country,ca_gmt_offset\r\n",
					"                  ,ca_location_type,ctr_total_return\r\n",
					" from customer_total_return ctr1\r\n",
					"     ,customer_address\r\n",
					"     ,customer\r\n",
					" where ctr1.ctr_total_return > (select avg(ctr_total_return)*1.2\r\n",
					" \t\t\t  from customer_total_return ctr2 \r\n",
					"                  \t  where ctr1.ctr_state = ctr2.ctr_state)\r\n",
					"       and ca_address_sk = c_current_addr_sk\r\n",
					"       and ca_state = 'GA'\r\n",
					"       and ctr1.ctr_customer_sk = c_customer_sk\r\n",
					" order by c_customer_id,c_salutation,c_first_name,c_last_name,ca_street_number,ca_street_name\r\n",
					"                   ,ca_street_type,ca_suite_number,ca_city,ca_county,ca_state,ca_zip,ca_country,ca_gmt_offset\r\n",
					"                  ,ca_location_type,ctr_total_return\r\n",
					"  limit 100;"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"--query82\r\n",
					"  select  i_item_id\r\n",
					"       ,i_item_desc\r\n",
					"       ,i_current_price\r\n",
					" from item, inventory, date_dim, store_sales\r\n",
					" where i_current_price between 62 and 62+30\r\n",
					" and inv_item_sk = i_item_sk\r\n",
					" and d_date_sk=inv_date_sk\r\n",
					" and d_date between cast('2000-05-25' as date) and date_add(cast('2000-05-25' as date), 60 )\r\n",
					" and i_manufact_id in (129,270,821,423)\r\n",
					" and inv_quantity_on_hand between 100 and 500\r\n",
					" and ss_item_sk = i_item_sk\r\n",
					" group by i_item_id,i_item_desc,i_current_price\r\n",
					" order by i_item_id\r\n",
					"  limit 100;"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"--query83\r\n",
					" with sr_items as\r\n",
					" (select i_item_id item_id,\r\n",
					"        sum(sr_return_quantity) sr_item_qty\r\n",
					" from store_returns,\r\n",
					"      item,\r\n",
					"      date_dim\r\n",
					" where sr_item_sk = i_item_sk\r\n",
					" and   d_date    in \r\n",
					"\t(select d_date\r\n",
					"\tfrom date_dim\r\n",
					"\twhere d_week_seq in \r\n",
					"\t\t(select d_week_seq\r\n",
					"\t\tfrom date_dim\r\n",
					"\t  where d_date in ('2000-06-30','2000-09-27','2000-11-17')))\r\n",
					" and   sr_returned_date_sk   = d_date_sk\r\n",
					" group by i_item_id),\r\n",
					" cr_items as\r\n",
					" (select i_item_id item_id,\r\n",
					"        sum(cr_return_quantity) cr_item_qty\r\n",
					" from catalog_returns,\r\n",
					"      item,\r\n",
					"      date_dim\r\n",
					" where cr_item_sk = i_item_sk\r\n",
					" and   d_date    in \r\n",
					"\t(select d_date\r\n",
					"\tfrom date_dim\r\n",
					"\twhere d_week_seq in \r\n",
					"\t\t(select d_week_seq\r\n",
					"\t\tfrom date_dim\r\n",
					"\t  where d_date in ('2000-06-30','2000-09-27','2000-11-17')))\r\n",
					" and   cr_returned_date_sk   = d_date_sk\r\n",
					" group by i_item_id),\r\n",
					" wr_items as\r\n",
					" (select i_item_id item_id,\r\n",
					"        sum(wr_return_quantity) wr_item_qty\r\n",
					" from web_returns,\r\n",
					"      item,\r\n",
					"      date_dim\r\n",
					" where wr_item_sk = i_item_sk\r\n",
					" and   d_date    in \r\n",
					"\t(select d_date\r\n",
					"\tfrom date_dim\r\n",
					"\twhere d_week_seq in \r\n",
					"\t\t(select d_week_seq\r\n",
					"\t\tfrom date_dim\r\n",
					"\t\twhere d_date in ('2000-06-30','2000-09-27','2000-11-17')))\r\n",
					" and   wr_returned_date_sk   = d_date_sk\r\n",
					" group by i_item_id)\r\n",
					"  select  sr_items.item_id\r\n",
					"       ,sr_item_qty\r\n",
					"       ,sr_item_qty/(sr_item_qty+cr_item_qty+wr_item_qty)/3.0 * 100 sr_dev\r\n",
					"       ,cr_item_qty\r\n",
					"       ,cr_item_qty/(sr_item_qty+cr_item_qty+wr_item_qty)/3.0 * 100 cr_dev\r\n",
					"       ,wr_item_qty\r\n",
					"       ,wr_item_qty/(sr_item_qty+cr_item_qty+wr_item_qty)/3.0 * 100 wr_dev\r\n",
					"       ,(sr_item_qty+cr_item_qty+wr_item_qty)/3.0 average\r\n",
					" from sr_items\r\n",
					"     ,cr_items\r\n",
					"     ,wr_items\r\n",
					" where sr_items.item_id=cr_items.item_id\r\n",
					"   and sr_items.item_id=wr_items.item_id \r\n",
					" order by sr_items.item_id\r\n",
					"         ,sr_item_qty\r\n",
					"  limit 100;"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"--query84\r\n",
					"  select  c_customer_id as customer_id\r\n",
					"       ,concat(c_last_name , ', ' , coalesce(c_first_name,'')) as customername\r\n",
					" from customer\r\n",
					"     ,customer_address\r\n",
					"     ,customer_demographics\r\n",
					"     ,household_demographics\r\n",
					"     ,income_band\r\n",
					"     ,store_returns\r\n",
					" where ca_city\t        =  'Edgewood'\r\n",
					"   and c_current_addr_sk = ca_address_sk\r\n",
					"   and ib_lower_bound   >=  38128\r\n",
					"   and ib_upper_bound   <=  38128 + 50000\r\n",
					"   and ib_income_band_sk = hd_income_band_sk\r\n",
					"   and cd_demo_sk = c_current_cdemo_sk\r\n",
					"   and hd_demo_sk = c_current_hdemo_sk\r\n",
					"   and sr_cdemo_sk = cd_demo_sk\r\n",
					" order by c_customer_id\r\n",
					"  limit 100;"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"--query85\r\n",
					"  select  substr(r_reason_desc,1,20)\r\n",
					"       ,avg(ws_quantity)\r\n",
					"       ,avg(wr_refunded_cash)\r\n",
					"       ,avg(wr_fee)\r\n",
					" from web_sales, web_returns, web_page, customer_demographics cd1,\r\n",
					"      customer_demographics cd2, customer_address, date_dim, reason \r\n",
					" where ws_web_page_sk = wp_web_page_sk\r\n",
					"   and ws_item_sk = wr_item_sk\r\n",
					"   and ws_order_number = wr_order_number\r\n",
					"   and ws_sold_date_sk = d_date_sk and d_year = 2000\r\n",
					"   and cd1.cd_demo_sk = wr_refunded_cdemo_sk \r\n",
					"   and cd2.cd_demo_sk = wr_returning_cdemo_sk\r\n",
					"   and ca_address_sk = wr_refunded_addr_sk\r\n",
					"   and r_reason_sk = wr_reason_sk\r\n",
					"   and\r\n",
					"   (\r\n",
					"    (\r\n",
					"     cd1.cd_marital_status = 'M'\r\n",
					"     and\r\n",
					"     cd1.cd_marital_status = cd2.cd_marital_status\r\n",
					"     and\r\n",
					"     cd1.cd_education_status = 'Advanced Degree'\r\n",
					"     and \r\n",
					"     cd1.cd_education_status = cd2.cd_education_status\r\n",
					"     and\r\n",
					"     ws_sales_price between 100.00 and 150.00\r\n",
					"    )\r\n",
					"   or\r\n",
					"    (\r\n",
					"     cd1.cd_marital_status = 'S'\r\n",
					"     and\r\n",
					"     cd1.cd_marital_status = cd2.cd_marital_status\r\n",
					"     and\r\n",
					"     cd1.cd_education_status = 'College' \r\n",
					"     and\r\n",
					"     cd1.cd_education_status = cd2.cd_education_status\r\n",
					"     and\r\n",
					"     ws_sales_price between 50.00 and 100.00\r\n",
					"    )\r\n",
					"   or\r\n",
					"    (\r\n",
					"     cd1.cd_marital_status = 'W'\r\n",
					"     and\r\n",
					"     cd1.cd_marital_status = cd2.cd_marital_status\r\n",
					"     and\r\n",
					"     cd1.cd_education_status = '2 yr Degree'\r\n",
					"     and\r\n",
					"     cd1.cd_education_status = cd2.cd_education_status\r\n",
					"     and\r\n",
					"     ws_sales_price between 150.00 and 200.00\r\n",
					"    )\r\n",
					"   )\r\n",
					"   and\r\n",
					"   (\r\n",
					"    (\r\n",
					"     ca_country = 'United States'\r\n",
					"     and\r\n",
					"     ca_state in ('IN', 'OH', 'NJ')\r\n",
					"     and ws_net_profit between 100 and 200  \r\n",
					"    )\r\n",
					"    or\r\n",
					"    (\r\n",
					"     ca_country = 'United States'\r\n",
					"     and\r\n",
					"     ca_state in ('WI', 'CT', 'KY')\r\n",
					"     and ws_net_profit between 150 and 300  \r\n",
					"    )\r\n",
					"    or\r\n",
					"    (\r\n",
					"     ca_country = 'United States'\r\n",
					"     and\r\n",
					"     ca_state in ('LA', 'IA', 'AR')\r\n",
					"     and ws_net_profit between 50 and 250  \r\n",
					"    )\r\n",
					"   )\r\n",
					"group by r_reason_desc\r\n",
					"order by substr(r_reason_desc,1,20)\r\n",
					"        ,avg(ws_quantity)\r\n",
					"        ,avg(wr_refunded_cash)\r\n",
					"        ,avg(wr_fee)\r\n",
					" limit 100;"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"--query86\r\n",
					"  select   \r\n",
					"    sum(ws_net_paid) as total_sum\r\n",
					"   ,i_category\r\n",
					"   ,i_class\r\n",
					"   ,grouping(i_category)+grouping(i_class) as lochierarchy\r\n",
					"   ,rank() over (\r\n",
					" \tpartition by grouping(i_category)+grouping(i_class),\r\n",
					" \tcase when grouping(i_class) = 0 then i_category end \r\n",
					" \torder by sum(ws_net_paid) desc) as rank_within_parent\r\n",
					" from\r\n",
					"    web_sales\r\n",
					"   ,date_dim       d1\r\n",
					"   ,item\r\n",
					" where\r\n",
					"    d1.d_month_seq between 1200 and 1200+11\r\n",
					" and d1.d_date_sk = ws_sold_date_sk\r\n",
					" and i_item_sk  = ws_item_sk\r\n",
					" group by rollup(i_category,i_class)\r\n",
					" order by\r\n",
					"   lochierarchy desc,\r\n",
					"   case when lochierarchy = 0 then i_category end,\r\n",
					"   rank_within_parent\r\n",
					"  limit 100;"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"--query87\r\n",
					"select count(*) \r\n",
					"from ((select distinct c_last_name, c_first_name, d_date\r\n",
					"       from store_sales, date_dim, customer\r\n",
					"       where store_sales.ss_sold_date_sk = date_dim.d_date_sk\r\n",
					"         and store_sales.ss_customer_sk = customer.c_customer_sk\r\n",
					"         and d_month_seq between 1200 and 1200+11)\r\n",
					"       except\r\n",
					"      (select distinct c_last_name, c_first_name, d_date\r\n",
					"       from catalog_sales, date_dim, customer\r\n",
					"       where catalog_sales.cs_sold_date_sk = date_dim.d_date_sk\r\n",
					"         and catalog_sales.cs_bill_customer_sk = customer.c_customer_sk\r\n",
					"         and d_month_seq between 1200 and 1200+11)\r\n",
					"       except\r\n",
					"      (select distinct c_last_name, c_first_name, d_date\r\n",
					"       from web_sales, date_dim, customer\r\n",
					"       where web_sales.ws_sold_date_sk = date_dim.d_date_sk\r\n",
					"         and web_sales.ws_bill_customer_sk = customer.c_customer_sk\r\n",
					"         and d_month_seq between 1200 and 1200+11)\r\n",
					") cool_cust;"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"--query88\r\n",
					"select  *\r\n",
					"from\r\n",
					" (select count(*) h8_30_to_9\r\n",
					" from store_sales, household_demographics , time_dim, store\r\n",
					" where ss_sold_time_sk = time_dim.t_time_sk   \r\n",
					"     and ss_hdemo_sk = household_demographics.hd_demo_sk \r\n",
					"     and ss_store_sk = s_store_sk\r\n",
					"     and time_dim.t_hour = 8\r\n",
					"     and time_dim.t_minute >= 30\r\n",
					"     and ((household_demographics.hd_dep_count = 4 and household_demographics.hd_vehicle_count<=4+2) or\r\n",
					"          (household_demographics.hd_dep_count = 2 and household_demographics.hd_vehicle_count<=2+2) or\r\n",
					"          (household_demographics.hd_dep_count = 0 and household_demographics.hd_vehicle_count<=0+2)) \r\n",
					"     and store.s_store_name = 'ese') s1,\r\n",
					" (select count(*) h9_to_9_30 \r\n",
					" from store_sales, household_demographics , time_dim, store\r\n",
					" where ss_sold_time_sk = time_dim.t_time_sk\r\n",
					"     and ss_hdemo_sk = household_demographics.hd_demo_sk\r\n",
					"     and ss_store_sk = s_store_sk \r\n",
					"     and time_dim.t_hour = 9 \r\n",
					"     and time_dim.t_minute < 30\r\n",
					"     and ((household_demographics.hd_dep_count = 4 and household_demographics.hd_vehicle_count<=4+2) or\r\n",
					"          (household_demographics.hd_dep_count = 2 and household_demographics.hd_vehicle_count<=2+2) or\r\n",
					"          (household_demographics.hd_dep_count = 0 and household_demographics.hd_vehicle_count<=0+2))\r\n",
					"     and store.s_store_name = 'ese') s2,\r\n",
					" (select count(*) h9_30_to_10 \r\n",
					" from store_sales, household_demographics , time_dim, store\r\n",
					" where ss_sold_time_sk = time_dim.t_time_sk\r\n",
					"     and ss_hdemo_sk = household_demographics.hd_demo_sk\r\n",
					"     and ss_store_sk = s_store_sk\r\n",
					"     and time_dim.t_hour = 9\r\n",
					"     and time_dim.t_minute >= 30\r\n",
					"     and ((household_demographics.hd_dep_count = 4 and household_demographics.hd_vehicle_count<=4+2) or\r\n",
					"          (household_demographics.hd_dep_count = 2 and household_demographics.hd_vehicle_count<=2+2) or\r\n",
					"          (household_demographics.hd_dep_count = 0 and household_demographics.hd_vehicle_count<=0+2))\r\n",
					"     and store.s_store_name = 'ese') s3,\r\n",
					" (select count(*) h10_to_10_30\r\n",
					" from store_sales, household_demographics , time_dim, store\r\n",
					" where ss_sold_time_sk = time_dim.t_time_sk\r\n",
					"     and ss_hdemo_sk = household_demographics.hd_demo_sk\r\n",
					"     and ss_store_sk = s_store_sk\r\n",
					"     and time_dim.t_hour = 10 \r\n",
					"     and time_dim.t_minute < 30\r\n",
					"     and ((household_demographics.hd_dep_count = 4 and household_demographics.hd_vehicle_count<=4+2) or\r\n",
					"          (household_demographics.hd_dep_count = 2 and household_demographics.hd_vehicle_count<=2+2) or\r\n",
					"          (household_demographics.hd_dep_count = 0 and household_demographics.hd_vehicle_count<=0+2))\r\n",
					"     and store.s_store_name = 'ese') s4,\r\n",
					" (select count(*) h10_30_to_11\r\n",
					" from store_sales, household_demographics , time_dim, store\r\n",
					" where ss_sold_time_sk = time_dim.t_time_sk\r\n",
					"     and ss_hdemo_sk = household_demographics.hd_demo_sk\r\n",
					"     and ss_store_sk = s_store_sk\r\n",
					"     and time_dim.t_hour = 10 \r\n",
					"     and time_dim.t_minute >= 30\r\n",
					"     and ((household_demographics.hd_dep_count = 4 and household_demographics.hd_vehicle_count<=4+2) or\r\n",
					"          (household_demographics.hd_dep_count = 2 and household_demographics.hd_vehicle_count<=2+2) or\r\n",
					"          (household_demographics.hd_dep_count = 0 and household_demographics.hd_vehicle_count<=0+2))\r\n",
					"     and store.s_store_name = 'ese') s5,\r\n",
					" (select count(*) h11_to_11_30\r\n",
					" from store_sales, household_demographics , time_dim, store\r\n",
					" where ss_sold_time_sk = time_dim.t_time_sk\r\n",
					"     and ss_hdemo_sk = household_demographics.hd_demo_sk\r\n",
					"     and ss_store_sk = s_store_sk \r\n",
					"     and time_dim.t_hour = 11\r\n",
					"     and time_dim.t_minute < 30\r\n",
					"     and ((household_demographics.hd_dep_count = 4 and household_demographics.hd_vehicle_count<=4+2) or\r\n",
					"          (household_demographics.hd_dep_count = 2 and household_demographics.hd_vehicle_count<=2+2) or\r\n",
					"          (household_demographics.hd_dep_count = 0 and household_demographics.hd_vehicle_count<=0+2))\r\n",
					"     and store.s_store_name = 'ese') s6,\r\n",
					" (select count(*) h11_30_to_12\r\n",
					" from store_sales, household_demographics , time_dim, store\r\n",
					" where ss_sold_time_sk = time_dim.t_time_sk\r\n",
					"     and ss_hdemo_sk = household_demographics.hd_demo_sk\r\n",
					"     and ss_store_sk = s_store_sk\r\n",
					"     and time_dim.t_hour = 11\r\n",
					"     and time_dim.t_minute >= 30\r\n",
					"     and ((household_demographics.hd_dep_count = 4 and household_demographics.hd_vehicle_count<=4+2) or\r\n",
					"          (household_demographics.hd_dep_count = 2 and household_demographics.hd_vehicle_count<=2+2) or\r\n",
					"          (household_demographics.hd_dep_count = 0 and household_demographics.hd_vehicle_count<=0+2))\r\n",
					"     and store.s_store_name = 'ese') s7,\r\n",
					" (select count(*) h12_to_12_30\r\n",
					" from store_sales, household_demographics , time_dim, store\r\n",
					" where ss_sold_time_sk = time_dim.t_time_sk\r\n",
					"     and ss_hdemo_sk = household_demographics.hd_demo_sk\r\n",
					"     and ss_store_sk = s_store_sk\r\n",
					"     and time_dim.t_hour = 12\r\n",
					"     and time_dim.t_minute < 30\r\n",
					"     and ((household_demographics.hd_dep_count = 4 and household_demographics.hd_vehicle_count<=4+2) or\r\n",
					"          (household_demographics.hd_dep_count = 2 and household_demographics.hd_vehicle_count<=2+2) or\r\n",
					"          (household_demographics.hd_dep_count = 0 and household_demographics.hd_vehicle_count<=0+2))\r\n",
					"     and store.s_store_name = 'ese') s8;"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"--query89\r\n",
					" select  *\r\n",
					"from(\r\n",
					"select i_category, i_class, i_brand,\r\n",
					"       s_store_name, s_company_name,\r\n",
					"       d_moy,\r\n",
					"       sum(ss_sales_price) sum_sales,\r\n",
					"       avg(sum(ss_sales_price)) over\r\n",
					"         (partition by i_category, i_brand, s_store_name, s_company_name)\r\n",
					"         avg_monthly_sales\r\n",
					"from item, store_sales, date_dim, store\r\n",
					"where ss_item_sk = i_item_sk and\r\n",
					"      ss_sold_date_sk = d_date_sk and\r\n",
					"      ss_store_sk = s_store_sk and\r\n",
					"      d_year in (1999) and\r\n",
					"        ((i_category in ('Books','Electronics','Sports') and\r\n",
					"          i_class in ('computers','stereo','football')\r\n",
					"         )\r\n",
					"      or (i_category in ('Men','Jewelry','Women') and\r\n",
					"          i_class in ('shirts','birdal','dresses') \r\n",
					"        ))\r\n",
					"group by i_category, i_class, i_brand,\r\n",
					"         s_store_name, s_company_name, d_moy) tmp1\r\n",
					"where case when (avg_monthly_sales <> 0) then (abs(sum_sales - avg_monthly_sales) / avg_monthly_sales) else null end > 0.1\r\n",
					"order by sum_sales - avg_monthly_sales, s_store_name\r\n",
					" limit 100;"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"--query90\r\n",
					"  select  cast(amc as decimal(15,4))/cast(pmc as decimal(15,4)) am_pm_ratio\r\n",
					" from ( select count(*) amc\r\n",
					"       from web_sales, household_demographics , time_dim, web_page\r\n",
					"       where ws_sold_time_sk = time_dim.t_time_sk\r\n",
					"         and ws_ship_hdemo_sk = household_demographics.hd_demo_sk\r\n",
					"         and ws_web_page_sk = web_page.wp_web_page_sk\r\n",
					"         and time_dim.t_hour between 8 and 8+1\r\n",
					"         and household_demographics.hd_dep_count = 6\r\n",
					"         and web_page.wp_char_count between 5000 and 5200) at1,\r\n",
					"      ( select count(*) pmc\r\n",
					"       from web_sales, household_demographics , time_dim, web_page\r\n",
					"       where ws_sold_time_sk = time_dim.t_time_sk\r\n",
					"         and ws_ship_hdemo_sk = household_demographics.hd_demo_sk\r\n",
					"         and ws_web_page_sk = web_page.wp_web_page_sk\r\n",
					"         and time_dim.t_hour between 19 and 19+1\r\n",
					"         and household_demographics.hd_dep_count = 6\r\n",
					"         and web_page.wp_char_count between 5000 and 5200) pt\r\n",
					" order by am_pm_ratio\r\n",
					"  limit 100;"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"--query91\r\n",
					"select  \r\n",
					"        cc_call_center_id Call_Center,\r\n",
					"        cc_name Call_Center_Name,\r\n",
					"        cc_manager Manager,\r\n",
					"        sum(cr_net_loss) Returns_Loss\r\n",
					"from\r\n",
					"        call_center,\r\n",
					"        catalog_returns,\r\n",
					"        date_dim,\r\n",
					"        customer,\r\n",
					"        customer_address,\r\n",
					"        customer_demographics,\r\n",
					"        household_demographics\r\n",
					"where\r\n",
					"        cr_call_center_sk       = cc_call_center_sk\r\n",
					"and     cr_returned_date_sk     = d_date_sk\r\n",
					"and     cr_returning_customer_sk= c_customer_sk\r\n",
					"and     cd_demo_sk              = c_current_cdemo_sk\r\n",
					"and     hd_demo_sk              = c_current_hdemo_sk\r\n",
					"and     ca_address_sk           = c_current_addr_sk\r\n",
					"and     d_year                  = 1998 \r\n",
					"and     d_moy                   = 11\r\n",
					"and     ( (cd_marital_status       = 'M' and cd_education_status     = 'Unknown')\r\n",
					"        or(cd_marital_status       = 'W' and cd_education_status     = 'Advanced Degree'))\r\n",
					"and     hd_buy_potential like 'Unknown%'\r\n",
					"and     ca_gmt_offset           = -7\r\n",
					"group by cc_call_center_id,cc_name,cc_manager,cd_marital_status,cd_education_status\r\n",
					"order by sum(cr_net_loss) desc;"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"--query92\r\n",
					" select  \r\n",
					"   sum(ws_ext_discount_amt)  as Excess_Discount_Amount \r\n",
					"from \r\n",
					"    web_sales \r\n",
					"   ,item \r\n",
					"   ,date_dim\r\n",
					"where\r\n",
					"i_manufact_id = 350\r\n",
					"and i_item_sk = ws_item_sk \r\n",
					"and d_date between '2000-01-27' and \r\n",
					"        date_add(cast('2000-01-27' as date), 90 )\r\n",
					"and d_date_sk = ws_sold_date_sk \r\n",
					"and ws_ext_discount_amt  \r\n",
					"     > ( \r\n",
					"         SELECT \r\n",
					"            1.3 * avg(ws_ext_discount_amt) \r\n",
					"         FROM \r\n",
					"            web_sales \r\n",
					"           ,date_dim\r\n",
					"         WHERE \r\n",
					"              ws_item_sk = i_item_sk \r\n",
					"          and d_date between '2000-01-27' and\r\n",
					"                             date_add(cast('2000-01-27' as date), 90 )\r\n",
					"          and d_date_sk = ws_sold_date_sk \r\n",
					"      ) \r\n",
					"order by sum(ws_ext_discount_amt)\r\n",
					" limit 100;"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"--query93\r\n",
					" select  ss_customer_sk\r\n",
					"            ,sum(act_sales) sumsales\r\n",
					"      from (select ss_item_sk\r\n",
					"                  ,ss_ticket_number\r\n",
					"                  ,ss_customer_sk\r\n",
					"                  ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price\r\n",
					"                                                            else (ss_quantity*ss_sales_price) end act_sales\r\n",
					"            from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk\r\n",
					"                                                               and sr_ticket_number = ss_ticket_number)\r\n",
					"                ,reason\r\n",
					"            where sr_reason_sk = r_reason_sk\r\n",
					"              and r_reason_desc = 'reason 28') t\r\n",
					"      group by ss_customer_sk\r\n",
					"      order by sumsales, ss_customer_sk\r\n",
					" limit 100;"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"--query94\r\n",
					" select  \r\n",
					"   count(distinct ws_order_number) as order_count\r\n",
					"  ,sum(ws_ext_ship_cost) as total_shipping_cost\r\n",
					"  ,sum(ws_net_profit) as total_net_profit\r\n",
					"from\r\n",
					"   web_sales ws1\r\n",
					"  ,date_dim\r\n",
					"  ,customer_address\r\n",
					"  ,web_site\r\n",
					"where\r\n",
					"    d_date between cast('1999-2-01' as date) and \r\n",
					"           date_add(cast('1999-2-01' as date), 60 )\r\n",
					"and ws1.ws_ship_date_sk = d_date_sk\r\n",
					"and ws1.ws_ship_addr_sk = ca_address_sk\r\n",
					"and ca_state = 'IL'\r\n",
					"and ws1.ws_web_site_sk = web_site_sk\r\n",
					"and web_company_name = 'pri'\r\n",
					"and exists (select *\r\n",
					"            from web_sales ws2\r\n",
					"            where ws1.ws_order_number = ws2.ws_order_number\r\n",
					"              and ws1.ws_warehouse_sk <> ws2.ws_warehouse_sk)\r\n",
					"and not exists(select *\r\n",
					"               from web_returns wr1\r\n",
					"               where ws1.ws_order_number = wr1.wr_order_number)\r\n",
					"order by count(distinct ws_order_number)\r\n",
					" limit 100;"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"--query95\r\n",
					"with ws_wh as\r\n",
					"(select ws1.ws_order_number,ws1.ws_warehouse_sk wh1,ws2.ws_warehouse_sk wh2\r\n",
					" from web_sales ws1,web_sales ws2\r\n",
					" where ws1.ws_order_number = ws2.ws_order_number\r\n",
					"   and ws1.ws_warehouse_sk <> ws2.ws_warehouse_sk)\r\n",
					" select  \r\n",
					"   count(distinct ws_order_number) as order_count\r\n",
					"  ,sum(ws_ext_ship_cost) as total_shipping_cost\r\n",
					"  ,sum(ws_net_profit) as total_net_profit\r\n",
					"from\r\n",
					"   web_sales ws1\r\n",
					"  ,date_dim\r\n",
					"  ,customer_address\r\n",
					"  ,web_site\r\n",
					"where\r\n",
					"    d_date between '1999-2-01' and \r\n",
					"           date_add(cast('1999-2-01' as date), 60 )\r\n",
					"and ws1.ws_ship_date_sk = d_date_sk\r\n",
					"and ws1.ws_ship_addr_sk = ca_address_sk\r\n",
					"and ca_state = 'IL'\r\n",
					"and ws1.ws_web_site_sk = web_site_sk\r\n",
					"and web_company_name = 'pri'\r\n",
					"and ws1.ws_order_number in (select ws_order_number\r\n",
					"                            from ws_wh)\r\n",
					"and ws1.ws_order_number in (select wr_order_number\r\n",
					"                            from web_returns,ws_wh\r\n",
					"                            where wr_order_number = ws_wh.ws_order_number)\r\n",
					"order by count(distinct ws_order_number)\r\n",
					" limit 100;"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"--query96\r\n",
					" select  count(*) \r\n",
					"from store_sales\r\n",
					"    ,household_demographics \r\n",
					"    ,time_dim, store\r\n",
					"where ss_sold_time_sk = time_dim.t_time_sk   \r\n",
					"    and ss_hdemo_sk = household_demographics.hd_demo_sk \r\n",
					"    and ss_store_sk = s_store_sk\r\n",
					"    and time_dim.t_hour = 20\r\n",
					"    and time_dim.t_minute >= 30\r\n",
					"    and household_demographics.hd_dep_count = 7\r\n",
					"    and store.s_store_name = 'ese'\r\n",
					"order by count(*)\r\n",
					" limit 100;"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"--query97\r\n",
					"with ssci as (\r\n",
					"select ss_customer_sk customer_sk\r\n",
					"      ,ss_item_sk item_sk\r\n",
					"from store_sales,date_dim\r\n",
					"where ss_sold_date_sk = d_date_sk\r\n",
					"  and d_month_seq between 1200 and 1200 + 11\r\n",
					"group by ss_customer_sk\r\n",
					"        ,ss_item_sk),\r\n",
					"csci as(\r\n",
					" select cs_bill_customer_sk customer_sk\r\n",
					"      ,cs_item_sk item_sk\r\n",
					"from catalog_sales,date_dim\r\n",
					"where cs_sold_date_sk = d_date_sk\r\n",
					"  and d_month_seq between 1200 and 1200 + 11\r\n",
					"group by cs_bill_customer_sk\r\n",
					"        ,cs_item_sk)\r\n",
					" select  sum(case when ssci.customer_sk is not null and csci.customer_sk is null then 1 else 0 end) store_only\r\n",
					"      ,sum(case when ssci.customer_sk is null and csci.customer_sk is not null then 1 else 0 end) catalog_only\r\n",
					"      ,sum(case when ssci.customer_sk is not null and csci.customer_sk is not null then 1 else 0 end) store_and_catalog\r\n",
					"from ssci full outer join csci on (ssci.customer_sk=csci.customer_sk\r\n",
					"                               and ssci.item_sk = csci.item_sk)\r\n",
					" limit 100;"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"--query98\r\n",
					"select i_item_id\r\n",
					"      ,i_item_desc \r\n",
					"      ,i_category \r\n",
					"      ,i_class \r\n",
					"      ,i_current_price\r\n",
					"      ,sum(ss_ext_sales_price) as itemrevenue \r\n",
					"      ,sum(ss_ext_sales_price)*100/sum(sum(ss_ext_sales_price)) over\r\n",
					"          (partition by i_class) as revenueratio\r\n",
					"from\t\r\n",
					"\tstore_sales\r\n",
					"    \t,item \r\n",
					"    \t,date_dim\r\n",
					"where \r\n",
					"\tss_item_sk = i_item_sk \r\n",
					"  \tand i_category in ('Sports', 'Books', 'Home')\r\n",
					"  \tand ss_sold_date_sk = d_date_sk\r\n",
					"\tand d_date between cast('1999-02-22' as date) \r\n",
					"\t\t\t\tand date_add(cast('1999-02-22' as date), 30 )\r\n",
					"group by \r\n",
					"\ti_item_id\r\n",
					"        ,i_item_desc \r\n",
					"        ,i_category\r\n",
					"        ,i_class\r\n",
					"        ,i_current_price\r\n",
					"order by \r\n",
					"\ti_category\r\n",
					"        ,i_class\r\n",
					"        ,i_item_id\r\n",
					"        ,i_item_desc\r\n",
					"        ,revenueratio;"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"--query99\r\n",
					" select  \r\n",
					"   substr(w_warehouse_name,1,20)\r\n",
					"  ,sm_type\r\n",
					"  ,cc_name\r\n",
					"  ,sum(case when (cs_ship_date_sk - cs_sold_date_sk <= 30 ) then 1 else 0 end)  as 30_days \r\n",
					"  ,sum(case when (cs_ship_date_sk - cs_sold_date_sk > 30) and \r\n",
					"                 (cs_ship_date_sk - cs_sold_date_sk <= 60) then 1 else 0 end )  as 31_60_days\r\n",
					"  ,sum(case when (cs_ship_date_sk - cs_sold_date_sk > 60) and \r\n",
					"                 (cs_ship_date_sk - cs_sold_date_sk <= 90) then 1 else 0 end)  as 61_90_days\r\n",
					"  ,sum(case when (cs_ship_date_sk - cs_sold_date_sk > 90) and\r\n",
					"                 (cs_ship_date_sk - cs_sold_date_sk <= 120) then 1 else 0 end)  as 91_120_days\r\n",
					"  ,sum(case when (cs_ship_date_sk - cs_sold_date_sk  > 120) then 1 else 0 end)  as above120_days\r\n",
					"from\r\n",
					"   catalog_sales\r\n",
					"  ,warehouse\r\n",
					"  ,ship_mode\r\n",
					"  ,call_center\r\n",
					"  ,date_dim\r\n",
					"where\r\n",
					"    d_month_seq between 1200 and 1200 + 11\r\n",
					"and cs_ship_date_sk   = d_date_sk\r\n",
					"and cs_warehouse_sk   = w_warehouse_sk\r\n",
					"and cs_ship_mode_sk   = sm_ship_mode_sk\r\n",
					"and cs_call_center_sk = cc_call_center_sk\r\n",
					"group by\r\n",
					"   substr(w_warehouse_name,1,20)\r\n",
					"  ,sm_type\r\n",
					"  ,cc_name\r\n",
					"order by substr(w_warehouse_name,1,20)\r\n",
					"        ,sm_type\r\n",
					"        ,cc_name\r\n",
					" limit 100;"
				],
				"execution_count": null
			}
		]
	}
}