{
	"name": "buildings-iot-data-analytics",
	"properties": {
		"folder": {
			"name": "Examples-SQL-Dedicated/operational-analytics"
		},
		"content": {
			"query": "-- Create external table\ndrop external table ext.buildings_sensors;\ngo\ncreate external table ext.buildings_sensors\n(\n     ISO8601 varchar(20)\n    ,deviceid varchar(20)\n    ,avg_temperature float\n    ,avg_humidity float\n)\nWITH\n(\n    LOCATION='03-serve/iot-data/buildings-by-hour/',\n    DATA_SOURCE = datalake2020_source,\n    FILE_FORMAT = parquet_snappy\n);\n\n-- Test the external table\nselect top 10 * from ext.buildings_sensors\nselect count(*) from ext.buildings_sensors\n-- 91\nselect *\nfrom ext.buildings_sensors order by ISO8601 desc, deviceid asc\n\n\nCREATE SCHEMA staging;\n\n-- CTAS for staging table\ndrop table staging.buildings;\ngo\ncreate table staging.buildings\nwith\n(\n    DISTRIBUTION = ROUND_ROBIN\n    ,HEAP\n)\nas \nselect * from ext.buildings_sensors;\n\nselect * from staging.buildings\n\n-- Put new records in staging\nselect * from staging.buildings\norder by ISO8601 desc, deviceid asc\n\nselect * from ext.buildings_sensors\norder by ISO8601 desc, deviceid asc\n\n-- one time\ntruncate table staging.buildings;\ninsert into staging.buildings\nselect\n     e.ISO8601\n    ,e.deviceid\n    ,e.avg_temperature\n    ,e.avg_humidity\nfrom ext.buildings_sensors as e\n--left join staging.buildings as s \nleft join dw.buildings as s\non \n     e.ISO8601 = s.ISO8601\n--    and e.deviceid = s.deviceid\n--    and e.avg_temperature = s.avg_temperature\n--    and e.avg_humidity = e.avg_humidity\nwhere s.ISO8601 is null\n--order by e.ISO8601 asc, e.deviceid desc\n-- asc  2021-09-28-00\n-- desc 2021-09-30-23\n\n-- asc  2021-09-26-00\n-- desc 2021-09-27-23\n\nselect count(*) from staging.buildings\n\n\n-- Create heap table\nCREATE TABLE staging.buildings\n(\n     ISO8601 varchar(20)\n    ,deviceid varchar(20)\n    ,avg_temperature float\n    ,avg_humidity float\n)\nWITH (HEAP);\n\ninsert into staging.buildings\nselect * from ext.buildings_sensors\n\n\n\n-- DW table\nDROP TABLE dw.buildings;\nGO\nCREATE TABLE dw.buildings\n(\n     ISO8601 varchar(20)\n    ,deviceid varchar(20)\n    ,avg_temperature float\n    ,avg_humidity float\n)\nWITH (DISTRIBUTION = HASH(deviceid),CLUSTERED COLUMNSTORE INDEX);\n\n-- Insert new records to the data warehouse table\ninsert into dw.buildings \nselect * from staging.buildings;\n\nselect * from dw.buildings \n\n-- Create the sproc\ndrop PROCEDURE dw_insert;\nCREATE PROCEDURE dw_insert AS\nBEGIN\n    -- Truncate the staging table. Staging table will only hold new records to be inserted\n    truncate table staging.buildings;\n\n    -- Insert only new records into the staging table\n    insert into staging.buildings\n    select\n         e.ISO8601\n        ,e.deviceid\n        ,e.avg_temperature\n        ,e.avg_humidity\n    from ext.buildings_sensors as e\n    left join dw.buildings as s\n    on \n        e.ISO8601 = s.ISO8601\n    --    and e.deviceid = s.deviceid\n    --    and e.avg_temperature = s.avg_temperature\n    --    and e.avg_humidity = e.avg_humidity\n    where s.ISO8601 is null\n\n    -- Insert new records into the DW table\n    insert into dw.buildings select * from staging.buildings;\nEND\n\nselect count(*) from dw.buildings\n--91\n\nexec dw_insert;\nselect count(*) from dw.buildings;\n--182\n\n\nSELECT count(*)\nFROM [ext].[buildings_sensors]\n-- 91\n-- 115\n-- 151\n-- 199\n\nselect * from ext.buildings_sensors\norder by ISO8601 desc\n\nselect count(*) from dw.buildings;\n-- 91\n-- 182\n\nselect * from dw.buildings\norder by ISO8601 desc\n\nSELECT top 10 \n    year(cast(left(ISO8601,10) as date)) as [year], month(cast(left(ISO8601,10) as date)) as [month], day(cast(left(ISO8601,10) as date)) as [day]\n    ,count(*) as occurs\nfrom dw.buildings\ngroup by year(cast(left(ISO8601,10) as date)), month(cast(left(ISO8601,10) as date)), day(cast(left(ISO8601,10) as date))\n\nselect count(*)\nfrom dw.buildings\nwhere day(cast(left(ISO8601,10) as date)) = 26\norder by ISO8601 desc\n-- 26   144 deleted\n-- 27   129 deleted\n\n\nselect count(*)\nfrom [ext].[buildings_sensors]\nwhere day(cast(left(ISO8601,10) as date)) = 26\norder by ISO8601 desc\n\n\nselect *\nfrom dw.buildings\nwhere day(cast(left(ISO8601,10) as date)) = 26\norder by ISO8601 desc",
			"metadata": {
				"language": "sql"
			},
			"currentConnection": {
				"databaseName": "master",
				"poolName": "Built-in"
			},
			"resultLimit": 5000
		},
		"type": "SqlQuery"
	}
}