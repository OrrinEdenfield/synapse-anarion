{
	"name": "dx-in-a-day-L02",
	"properties": {
		"content": {
			"query": "// Challenge 5, Task 1\n.alter-merge table LogisticsTelemetryManipulated policy retention softdelete = 60d recoverability = enabled \n\n\n// Challenge 6, Task 1\n.show queries\n.show commands\n.show journal\n.show tables details\n\n// Challenge 6, Task 2\n.show queries | where StartedOn >= ago(7d) and User == 'ored@microsoft.com' | count \n\n\n// Challenge 6, Task 3\n.show journal | project EventTimestamp, Event | where Event == 'CREATE-MATERIALIZED-VIEW'\n\n// Challenge 6, Task 4\n.show commands | where StartedOn >= ago(7d) and User == 'ored@microsoft.com'  | count \n\n// Challenge 6, Task 5\n.show tables details | project TableName, TotalOriginalSize, HotExtentSize, TotalExtentSize | extend TotalExtentSizeInMB = format_bytes(TotalExtentSize, 0, \"MB\")\n\n\n// Challenge 7, Task 1\nlet devIDs = LogisticsTelemetryHistorical | project deviceId, Shock | sort by Shock desc | take 10; LogisticsTelemetryHistorical | project deviceId, Temp | summarize avg(toint(Temp)) by deviceId | where deviceId in (devIDs)\n\n\n// Challenge 7, Task 2\nLogisticsTelemetryHistorical \n| summarize count() by TransportationMode, bin(enqueuedTime, 10m) \n| render timechart \n\n\n// Challenge 7, Task 3\n// Challenge 7, Task 4\n// Challenge 7, Task 5\nlet min_t = (toscalar(LogisticsTelemetryHistorical | summarize min(enqueuedTime)));\nlet max_t = (toscalar(LogisticsTelemetryHistorical | summarize max(enqueuedTime)));\nlet step_interval = 10m;\nLogisticsTelemetryHistorical\n| make-series avg_shock_series=avg(Shock) on (enqueuedTime) from (min_t) to (max_t) step step_interval \n| extend anomalies_flags = series_decompose_anomalies(avg_shock_series, 1) \n| render anomalychart  with(anomalycolumns=anomalies_flags, title='avg shock anomalies')\n\n\n// Challenge 8, Task 1\nLogisticsTelemetryHistorical\n| distinct TransportationMode\n\n// Challenge 8, Task 2",
			"metadata": {
				"language": "kql"
			},
			"currentConnection": {
				"poolName": "oredsdxpool01",
				"databaseName": "db01"
			}
		},
		"type": "KqlQuery"
	}
}