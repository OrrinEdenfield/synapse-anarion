{
	"name": "SQLserverlessByHand-1",
	"properties": {
		"folder": {
			"name": "Examples-SQL-Serverless"
		},
		"content": {
			"query": "--=====================================================================\n--====== DELIMITED DATA ===============================================\n--=====================================================================\n\n-- Full path to one file\nSELECT top 10 *\nfrom OPENROWSET(\n    bulk 'https://minastirith.dfs.core.windows.net/datalake2020/01-fresh/biketrips/2020/202012-citibike-tripdata.csv',\n    format = 'csv',\n    parser_version = '2.0',\n    FIRSTROW = 2\n) as rows\n\n-- Use header row for column names\nSELECT top 10 *\nfrom OPENROWSET(\n    bulk 'https://minastirith.dfs.core.windows.net/datalake2020/01-fresh/biketrips/2020/202012-citibike-tripdata.csv',\n    format = 'csv',\n    parser_version = '2.0',\n    header_row = true\n) as rows\n\n\n-- Using a data source\ncreate external data source biketrips\nwith (location='https://minastirith.dfs.core.windows.net/datalake2020/01-fresh/biketrips/');\n\nselect top 10 *\nfrom OPENROWSET(\n     bulk '2020/202012-citibike-tripdata.csv'\n    ,data_source = 'biketrips'\n    ,format = 'csv'\n    ,parser_version='2.0'\n    --,FIRSTROW=2\n) as rows;\n\n-- Explicitly specify a schema\nselect top 10 *\nfrom OPENROWSET(\n    bulk '2020/202012-citibike-tripdata.csv',\n    data_source = 'biketrips',\n    format='csv',\n    parser_version='2.0',\n    FIRSTROW=2\n) with(\n     tripduration varchar(50)\n    ,starttime varchar(50)\n    ,stoptime varchar(50)\n    ,start_station_id varchar(50)\n) as rows\n\n-- Find collation of the database:\nSELECT CONVERT (varchar, SERVERPROPERTY('collation')) AS 'Server Collation';\n\n\n-- Below uses data that can be queried by running this setup script:\n-- https://github.com/Azure-Samples/Synapse/blob/main/SQL/Samples/LdwSample/SampleDB.sql\n\n-- Read Windows-style new line files \nSELECT *\nFROM OPENROWSET(\n        BULK 'csv/population/population.csv',\n        DATA_SOURCE = 'SqlOnDemandDemo',\n        FORMAT = 'CSV', PARSER_VERSION = '2.0',\n        FIELDTERMINATOR =',',\n        ROWTERMINATOR = '\\n'\n    )\nWITH (\n    [country_code] VARCHAR (5) COLLATE Latin1_General_BIN2,\n    [country_name] VARCHAR (100) COLLATE Latin1_General_BIN2,\n    [year] smallint,\n    [population] bigint\n) AS [r]\nWHERE\n    country_name = 'Luxembourg'\n    AND year = 2017;\n\n-- Read UNIX-style new line files\nSELECT * \nFROM OPENROWSET( \n    BULK 'csv/population-unix/population.csv', \n    DATA_SOURCE = 'SqlOnDemandDemo', \n    FORMAT = 'CSV', PARSER_VERSION = '2.0', \n    FIELDTERMINATOR =',', \n    ROWTERMINATOR = '0x0a' ) \nWITH ( \n    [country_code] VARCHAR (5) COLLATE Latin1_General_BIN2, \n    [country_name] VARCHAR (100) COLLATE Latin1_General_BIN2, \n    [year] smallint, [population] bigint \n) AS [r] \nWHERE \n    country_name = 'Luxembourg' \n    AND year = 2017;\n\n-- Work with custom quote character\n-- This query would return the same results if you omitted the FIELDQUOTE parameter since the default value for FIELDQUOTE is a double-quote.\nSELECT * \nFROM OPENROWSET( \n    BULK 'csv/population-unix-hdr-quoted/population.csv', \n    DATA_SOURCE = 'SqlOnDemandDemo', \n    FORMAT = 'CSV', PARSER_VERSION = '2.0', \n    FIELDTERMINATOR =',', \n    ROWTERMINATOR = '0x0a',\n    FIRSTROW = 2,\n    FIELDQUOTE = ' ” '\n) \nWITH ( \n    [country_code] VARCHAR (5) COLLATE Latin1_General_BIN2, \n    [country_name] VARCHAR (100) COLLATE Latin1_General_BIN2, \n    [year] smallint, [population] bigint \n) AS [r] \nWHERE \n    country_name = 'Luxembourg' \n    AND year = 2017;\n\n\n-- Work with escape characters\n-- This query would fail if ESCAPECHAR is not specified since the comma in \"Slov,enia\" would be treated as field delimiter instead of part of the country/region name. \"Slov,enia\" would be treated as two columns. Therefore, the row would have one column more than the other rows, and one column more than you defined in the WITH clause.\nSELECT * \nFROM OPENROWSET( \n    BULK 'csv/population-unix-hdr-escape/population.csv', \n    DATA_SOURCE = 'SqlOnDemandDemo', \n    FORMAT = 'CSV', PARSER_VERSION = '2.0', \n    FIELDTERMINATOR =',', \n    ROWTERMINATOR = '0x0a',\n    FIRSTROW = 2,\n    ESCAPECHAR = ' \\\\ '\n) \nWITH ( \n    [country_code] VARCHAR (5) COLLATE Latin1_General_BIN2, \n    [country_name] VARCHAR (100) COLLATE Latin1_General_BIN2, \n    [year] smallint, \n    [population] bigint \n) AS [r] \nWHERE \n    country_name = 'Slovenia';\n\n\n-- Work with escape quoting characters\nSELECT * \nFROM OPENROWSET( \n    BULK 'csv/population-unix-hdr-escape-quoted/population.csv', \n    DATA_SOURCE = 'SqlOnDemandDemo', \n    FORMAT = 'CSV', PARSER_VERSION = '2.0', \n    FIELDTERMINATOR =',', \n    ROWTERMINATOR = '0x0a',\n    FIRSTROW = 2\n) \nWITH ( \n    [country_code] VARCHAR (5) COLLATE Latin1_General_BIN2, \n    [country_name] VARCHAR (100) COLLATE Latin1_General_BIN2, \n    [year] smallint, \n    [population] bigint \n) AS [r] \nWHERE \n    country_name = 'Slovenia';\n\n\n-- Work with tab-delimited files\nSELECT * \nFROM OPENROWSET( \n    BULK 'csv/population-unix-hdr-tsv/population.csv', \n    DATA_SOURCE = 'SqlOnDemandDemo', \n    FORMAT = 'CSV', PARSER_VERSION = '2.0', \n    FIELDTERMINATOR ='\\t', \n    ROWTERMINATOR = '0x0a',\n    FIRSTROW = 2\n) \nWITH ( \n    [country_code] VARCHAR (5) COLLATE Latin1_General_BIN2, \n    [country_name] VARCHAR (100) COLLATE Latin1_General_BIN2, \n    [year] smallint, \n    [population] bigint \n) AS [r] \nWHERE \n    country_name = 'Slovenia'\n    AND year = 2017\n\n\n-- Return a subset of columns from a file\n-- Look at the WITH clause in the query below and note that there is \"2\" (without quotes) at the end of row where you define the [country_name] column. It means that the [country_name] column is the second column in the file. The query will ignore all columns in the file except the second one.\nSELECT \n    COUNT(DISTINCT country_name) AS countries \nFROM OPENROWSET(\n    BULK 'csv/population/population.csv', \n    DATA_SOURCE = 'SqlOnDemandDemo', \n    FORMAT = 'CSV', PARSER_VERSION = '2.0', \n    FIELDTERMINATOR =',', \n    ROWTERMINATOR = '\\n' ) \nWITH ( \n    --[country_code] VARCHAR (5), \n    [country_name] VARCHAR (100) 2 \n    --[year] smallint, \n    --[population] bigint \n) AS [r]\n\n\n--=====================================================================\n--====== PARQUET DATA =================================================\n--=====================================================================\n\n-- Parquet works much the same as CSV except you change the FORMAT value\nSELECT top 10 *\nfrom OPENROWSET(\n     bulk 'https://minastirith.dfs.core.windows.net/datalake2020/02-curated/biketrips/onefile/biketrips.parquet/part-00000-a763e5c2-062d-4f7b-8347-71f788fb0ab1-c000.snappy.parquet'\n    ,FORMAT='parquet'\n) as rows\n\n-- Again, queries below this use the setup script data\n-- https://github.com/Azure-Samples/Synapse/blob/master/SQL/Samples/LdwSample/SampleDB.sql\n\n-- Query specific column of parquet files\nSELECT \n    YEAR(tpepPickupDateTime), \n    passengerCount, \n    COUNT(*) AS cnt \nFROM \n    OPENROWSET( \n        BULK 'puYear=2018/puMonth=*/*.snappy.parquet', \n        DATA_SOURCE = 'YellowTaxi', \n        FORMAT='PARQUET' \n    ) WITH ( \n        tpepPickupDateTime DATETIME2, \n        passengerCount INT \n    ) AS nyc \nGROUP BY \n    passengerCount, \n    YEAR(tpepPickupDateTime) \nORDER BY \n    YEAR(tpepPickupDateTime), \n    passengerCount;\n\n-- Query partitioned data\n-- The serverless SQL pool query is compatible with Hive/Hadoop partitioning scheme.\nSELECT \n    YEAR(tpepPickupDateTime), \n    passengerCount, \n    COUNT(*) AS cnt \nFROM \n    OPENROWSET(\n        BULK 'puYear=*/puMonth=*/*.snappy.parquet', \n        DATA_SOURCE = 'YellowTaxi', \n        FORMAT='PARQUET' ) nyc \nWHERE \n    nyc.filepath(1) = 2017 \n    AND nyc.filepath(2) IN (1, 2, 3) \n    AND tpepPickupDateTime BETWEEN CAST('1/1/2017' AS datetime) AND CAST('3/31/2017' AS datetime)\nGROUP BY \n    passengerCount, \n    YEAR(tpepPickupDateTime) \nORDER BY \n    YEAR(tpepPickupDateTime), \n    passengerCount;\n\n-- Data type mapping\n-- https://docs.microsoft.com/en-us/learn/modules/query-data-lake-using-azure-synapse-serverless-sql-pools/3-query-parquet-file#data-type-mapping\n\n\n--=====================================================================\n--====== JSDON DATA ===================================================\n--=====================================================================\n\n-- Pandemic Data Lake data used below is publically accessible\n\n-- Read JSONL files\nselect top 10 * \nfrom \n    openrowset( \n        bulk 'https://pandemicdatalake.blob.core.windows.net/public/curated/covid-19/ecdc_cases/latest/ecdc_cases.jsonl', \n        format = 'csv', \n        fieldterminator ='0x0b', \n        fieldquote = '0x0b' \n    ) with (doc nvarchar(max)) as rows\n\n-- Read JSON files\nselect top 10 * \nfrom \n    openrowset( \n        bulk 'https://pandemicdatalake.blob.core.windows.net/public/curated/covid-19/ecdc_cases/latest/ecdc_cases.json', \n        format = 'csv', \n        fieldterminator ='0x0b', \n        fieldquote = '0x0b', \n        rowterminator = '0x0b' --> You need to override rowterminator to read classic JSON \n    ) with (doc nvarchar(max)) as rows\n\n-- Parse the JSON files using JSON_VALUE\nselect \n    JSON_VALUE(doc, '$.date_rep') AS date_reported, \n    JSON_VALUE(doc, '$.countries_and_territories') AS country, \n    JSON_VALUE(doc, '$.cases') as cases, \n    doc \nfrom \n    openrowset( \n        bulk 'latest/ecdc_cases.jsonl', \n        data_source = 'covid', \n        format = 'csv', \n        fieldterminator ='0x0b', \n        fieldquote = '0x0b' \n    ) with (doc nvarchar(max)) as rows \norder by JSON_VALUE(doc, '$.geo_id') desc\n\n-- Parse the JSON files using OPENJSON\nselect * \nfrom \n    openrowset( \n        bulk 'latest/ecdc_cases.jsonl', \n        data_source = 'covid', \n        format = 'csv', \n        fieldterminator ='0x0b', \n        fieldquote = '0x0b' \n    ) with (doc nvarchar(max)) as rows \n    cross apply openjson (doc) \n        with ( date_rep datetime2, \n                   cases int, \n                   fatal int '$.deaths', \n                   country varchar(100) '$.countries_and_territories') \nwhere country = 'Serbia' \norder by country, date_rep desc;\n\n\n--=====================================================================\n--====== MULTIPLE FILES ===============================================\n--=====================================================================\n\n-- Again, queries below this use the setup script data\n-- https://github.com/Azure-Samples/Synapse/blob/master/SQL/Samples/LdwSample/SampleDB.sql\n\n-- Read all files in folder\n-- All files accessed with the single OPENROWSET must have the same structure (i.e., number of columns and their data types).\nSELECT \n    YEAR(pickup_datetime) AS [year], \n    SUM(passenger_count) AS passengers_total, \n    COUNT(*) AS [rides_total] \nFROM \n    OPENROWSET( \n        BULK 'csv/taxi/*.csv',                 -- LOOK HERE\n        DATA_SOURCE = 'sqlondemanddemo', \n        FORMAT = 'CSV', \n        PARSER_VERSION = '2.0', \n        FIRSTROW = 2 \n    ) WITH ( \n        pickup_datetime DATETIME2 2, \n        passenger_count INT 4 \n    ) AS nyc \nGROUP BY \n    YEAR(pickup_datetime) \nORDER BY \n    YEAR(pickup_datetime);\n\n\n-- Read subset of files in folder\nSELECT \n    payment_type,\n    SUM(fare_amount) AS fare_total\nFROM \n    OPENROWSET( \n        BULK 'csv/taxi/yellow_tripdata_2017-*.csv', \n        DATA_SOURCE = 'sqlondemanddemo', \n        FORMAT = 'CSV', \n        PARSER_VERSION = '2.0', \n        FIRSTROW = 2 \n    ) WITH ( \n        payment_type INT 10, \n        fare_amount FLOAT 11 \n    ) AS nyc \nGROUP BY \n    payment_type \nORDER BY \n    payment_type;\n\n-- Read all files from a specific folder\nSELECT \n    YEAR(pickup_datetime) as [year], \n    SUM(passenger_count) AS passengers_total, \n    COUNT(*) AS [rides_total] \nFROM OPENROWSET( \n    BULK 'csv/taxi/', \n    DATA_SOURCE = 'sqlondemanddemo', \n    FORMAT = 'CSV', \n    PARSER_VERSION = '2.0', \n    FIRSTROW = 2 \n) WITH ( \n    vendor_id VARCHAR(100) COLLATE Latin1_General_BIN2, \n    pickup_datetime DATETIME2, \n    dropoff_datetime DATETIME2, \n    passenger_count INT, \n    trip_distance FLOAT, \n    rate_code INT, \n    store_and_fwd_flag VARCHAR(100) COLLATE Latin1_General_BIN2, \n    pickup_location_id INT, \n    dropoff_location_id INT, \n    payment_type INT, \n    fare_amount FLOAT, \n    extra FLOAT, \n    mta_tax FLOAT, \n    tip_amount FLOAT, \n    tolls_amount FLOAT, \n    improvement_surcharge FLOAT, \n    total_amount FLOAT \n) AS nyc \nGROUP BY \n    YEAR(pickup_datetime) \nORDER BY \n    YEAR(pickup_datetime);\n\n\n-- Read all files from multiple folders\nSELECT\n    YEAR(pickup_datetime) as [year],\n    SUM(passenger_count) AS passengers_total,\n    COUNT(*) AS [rides_total]\nFROM OPENROWSET(\n        BULK 'csv/t*i/', \n        DATA_SOURCE = 'sqlondemanddemo',\n        FORMAT = 'CSV', PARSER_VERSION = '2.0',\n        FIRSTROW = 2\n    )\n    WITH (\n        vendor_id VARCHAR(100) COLLATE Latin1_General_BIN2, \n        pickup_datetime DATETIME2, \n        dropoff_datetime DATETIME2,\n        passenger_count INT,\n        trip_distance FLOAT,\n        rate_code INT,\n        store_and_fwd_flag VARCHAR(100) COLLATE Latin1_General_BIN2,\n        pickup_location_id INT,\n        dropoff_location_id INT,\n        payment_type INT,\n        fare_amount FLOAT,\n        extra FLOAT,\n        mta_tax FLOAT,\n        tip_amount FLOAT,\n        tolls_amount FLOAT,\n        improvement_surcharge FLOAT,\n        total_amount FLOAT\n    ) AS nyc\nGROUP BY\n    YEAR(pickup_datetime)\nORDER BY\n    YEAR(pickup_datetime);\n\n-- Use multiple wildcards\nSELECT\n    YEAR(pickup_datetime) as [year],\n    SUM(passenger_count) AS passengers_total,\n    COUNT(*) AS [rides_total]\nFROM OPENROWSET(\n        BULK 'csv/t*i/yellow_tripdata_2017-*.csv',\n        DATA_SOURCE = 'sqlondemanddemo',\n        FORMAT = 'CSV', PARSER_VERSION = '2.0',\n        FIRSTROW = 2\n    )\n    WITH (\n        vendor_id VARCHAR(100) COLLATE Latin1_General_BIN2, \n        pickup_datetime DATETIME2, \n        dropoff_datetime DATETIME2,\n        passenger_count INT,\n        trip_distance FLOAT,\n        rate_code INT,\n        store_and_fwd_flag VARCHAR(100) COLLATE Latin1_General_BIN2,\n        pickup_location_id INT,\n        dropoff_location_id INT,\n        payment_type INT,\n        fare_amount FLOAT,\n        extra FLOAT,\n        mta_tax FLOAT,\n        tip_amount FLOAT,\n        tolls_amount FLOAT,\n        improvement_surcharge FLOAT,\n        total_amount FLOAT\n    ) AS nyc\nGROUP BY\n    YEAR(pickup_datetime)\nORDER BY\n    YEAR(pickup_datetime);\n\n\n\n\n\n",
			"metadata": {
				"language": "sql"
			},
			"currentConnection": {
				"databaseName": "master",
				"poolName": "Built-in"
			},
			"resultLimit": 5000
		},
		"type": "SqlQuery"
	}
}