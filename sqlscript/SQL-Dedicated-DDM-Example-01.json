{
	"name": "SQL-Dedicated-DDM-Example-01",
	"properties": {
		"folder": {
			"name": "Examples-SQL-Dedicated"
		},
		"content": {
			"query": "/*\nDynamic data masking example for Azure Synapse SQL Dedicated\n*/\n\n-- in ddmtesting2 database\n\n-- create schema\ncreate schema ddm;\n\n\n/*\ndrop table dbo.securedata;\n*/\n\n-- create table\ncreate table ddm.securedata(\n     [MemberID]         int not null\n    ,[FirstName]        varchar(100) not null\n    ,[LastName]         varchar(100) not null\n    ,[PostalAddress]    varchar(100) not null\n    ,[CreditCard]       decimal(16,0) not null\n)\nwith\n(\n\t distribution = round_robin\n    ,clustered columnstore index\n);\n\n\n-- insert some data\ninsert into ddm.securedata values (1234,'Francisque','Thandeka','100 High Street',1111222233334444);\ninsert into ddm.securedata values (1235,'Vanda','Maeleachlainn','101 High Street',2222333344445555);\ninsert into ddm.securedata values (1236,'Josefina','Visnja','102 High Street',3333444455556666);\ninsert into ddm.securedata values (1237,'Andrés','Winfrith','103 High Street',4444555566667777);\ninsert into ddm.securedata values (1239,'Josephus','Panos','105 High Street',6666777788889999);\n\n-- View data in table\nselect * from ddm.securedata;\n-- All data visible to everyone who has access to the table.\n/*\nMemberID    FirstName   LastName        PostalAddress       CreditCard\n1234\t    Francisque\tThandeka\t    100 High Street\t    1111222233334444\n1237\t    Andrés\t    Winfrith\t    103 High Street\t    4444555566667777\n1236\t    Josefina\tVisnja\t        102 High Street\t    3333444455556666\n1239\t    Josephus\tPanos\t        105 High Street\t    6666777788889999\n1235\t    Vanda\t    Maeleachlainn\t101 High Street\t    2222333344445555\n*/\n\n\n-- Create user accounts\ncreate user User1 without login;\ncreate user User2 without login;\ncreate user User3 without login;\n\n-- Give users access to run select against the objects in schema ddm\ngrant select on schema::ddm to User1\ngrant select on schema::ddm to User2\ngrant select on schema::ddm to User3\n\n\n-- add masking to the table\nalter table ddm.securedata alter column PostalAddress add masked with (function = 'default()');\nalter table ddm.securedata alter column CreditCard add masked with (function = 'random(1, 100)');\n\n-- remove masking from the table - only run this for testing, don't remove masking when running test expecting to see masked data\n/*\nalter table dbo.securedata alter column PostalAddress drop masked;\nalter table dbo.securedata alter column CreditCard drop masked;\n*/\n\n-- Check the data:\nselect * from ddm.securedata;\n-- Data is not masked for me (ored@microsoft.com, AAD Admin)\n\n\n-- What User1 would see\nexecute as user = 'User1';  \nselect * from ddm.securedata;\nrevert;\n-- both columns are masked\n\n-- What User2 would see\nexecute as user = 'User2';  \nselect * from ddm.securedata;\nrevert;\n-- both columns are masked\n\n-- What User3 would see\nexecute as user = 'User3';  \nselect * from ddm.securedata;\nrevert;\n-- both columns are masked\n\n/*\n-- Customer has requirement that \n\tUser1 be able to see [PostalAddress]\n\tUser2 be able to see [CreditCard]\n\tUser3 be able to see [PostalAddress] & [CreditCard]\n*/\n-- Allow User3 to see the masked data, User3 can now see [PostalAddress] & [CreditCard] unmasked\ngrant unmask on ddm.securedata(PostalAddress) to User1;\ngrant unmask on ddm.securedata(CreditCard) to User2;\ngrant unmask to User3;\n\n\n-- What User1 would see\nexecute as user = 'User1';  \nselect * from ddm.securedata;\nrevert;\n-- both columns are masked (not as expected)\n-- Expected: PostalAddress to be unmasked\n\n-- What User2 would see\nexecute as user = 'User2';  \nselect * from ddm.securedata;\nrevert;\n-- both columns are masked (not as expected)\n-- Expected: CreditCard to be unmasked\n\n-- What User3 would see\nexecute as user = 'User3';  \nselect * from ddm.securedata;\nrevert;\n-- both columns are unmasked (as expected)",
			"metadata": {
				"language": "sql"
			},
			"currentConnection": {
				"databaseName": "master",
				"poolName": "Built-in"
			},
			"resultLimit": 5000
		},
		"type": "SqlQuery"
	}
}